<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[HNOI2012]永无乡</title>
    <url>/2019/12/08/%5BHNOI2012%5D%E6%B0%B8%E6%97%A0%E4%B9%A1/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于一些点，支持连边和求联通块中第k重要的点</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>动态开点权值线段树，线段树上合并</p>
<p>询问的时候二分即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ls, rs, v, l, r;</span><br><span class="line">	&#125;a[maxn * <span class="number">40</span>];</span><br><span class="line">	<span class="keyword">int</span> rt[maxn], tot;</span><br><span class="line">	T()&#123;tot = <span class="number">0</span>;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">			a[cur].v = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!a[cur].ls) a[cur].ls = ++tot;</span><br><span class="line">			upd(a[cur].ls, l, mid, p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!a[cur].rs) a[cur].rs = ++tot;</span><br><span class="line">			upd(a[cur].rs, mid + <span class="number">1</span>, r, p);</span><br><span class="line">		&#125;</span><br><span class="line">		a[cur].v = LS.v + RS.v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur || !v) <span class="keyword">return</span> cur | v;</span><br><span class="line">		a[cur].ls = Merge(a[cur].ls, a[v].ls);</span><br><span class="line">		a[cur].rs = Merge(a[cur].rs, a[v].rs);</span><br><span class="line">		a[cur].v += a[v].v;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l == a[cur].r) <span class="keyword">return</span> a[cur].l;</span><br><span class="line">		<span class="keyword">if</span> (k &lt;= LS.v) <span class="keyword">return</span> Query(a[cur].ls, k);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> Query(a[cur].rs, k - LS.v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == f[x] ? x : f[x] = getf(f[x]);&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, Q, p[maxn], link[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">		t.rt[i] = ++t.tot; f[i] = i;</span><br><span class="line">		t.upd(t.rt[i], <span class="number">1</span>, n, p[i]);</span><br><span class="line">		link[p[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">int</span> fu = getf(u), fv = getf(v);</span><br><span class="line">		t.Merge(t.rt[fu], t.rt[fv]);</span><br><span class="line">		f[fv] = fu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">char</span> opt[<span class="number">2</span>]; <span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, opt);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'B'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">int</span> fu = getf(u), fv = getf(v);</span><br><span class="line">			t.Merge(t.rt[fu], t.rt[fv]); f[fv] = fu;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">if</span> (v &gt; t.a[t.rt[getf(u)]].v) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, link[t.Query(t.rt[getf(u)], v)]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>动态开点</tag>
        <tag>线段树合并</tag>
        <tag>线段树二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC023D]go home</title>
    <url>/2019/12/06/%5BAGC023D%5Dgo%20home/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>数轴的整点上有一些人，一辆公交车从S开始载上并送这些人回家，方向取决于车上人的投票</p>
<p>所有的人都会让自己回家的时间最小，求公交车送完所有人的时间</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>不一定所有人都往自己的方向投票</strong></p>
<p>如果最左边的人小于最右边的人，那么不管怎样公交车都先到最右边，再到最左边（即左边的人一开始投右边）</p>
<p>直接合并，统计答案</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>p爆long long</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, s, x[maxn], dire;</span><br><span class="line">LL ans = <span class="number">0</span>, p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, x + i, p + i);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x[l] &gt;= s)&#123;</span><br><span class="line">            ans += <span class="number">1l</span>l * (x[r] - s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x[r] &lt;= s)&#123;</span><br><span class="line">            ans += <span class="number">1l</span>l * (s - x[l]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[l] &lt; p[r])&#123;</span><br><span class="line">            <span class="keyword">if</span> (dire != <span class="number">1</span>) dire = <span class="number">1</span>, ans += <span class="number">1l</span>l * (x[r] - x[l]);</span><br><span class="line">            p[r] += p[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p[l] &gt;= p[r])&#123;</span><br><span class="line">            <span class="keyword">if</span> (dire != <span class="number">-1</span>) dire = <span class="number">-1</span>, ans += <span class="number">1l</span>l * (x[r] - x[l]);</span><br><span class="line">            p[l] += p[r--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC023F]01 on tree</title>
    <url>/2019/12/06/%5BAGC023F%5D01%20on%20tree/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵权值为01的树，找到一个拓扑序列，使得权值序列中逆序对对数最少</p>
<p>求最小值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑两个拓扑序的合并，令$a_1,b_1,a_2,b_2$分别为序列1,2中01的个数</p>
<p>当$b_1\cdot a_2\leq a_1\cdot b_2$即$\frac{b_1}{a_1}\leq\frac{b_2}{a_2}$时，序列1在前面更优</p>
<p>满足排序性质，用堆维护</p>
<p>每次找最小的序列和父亲的序列合并一定最优，局部最优必定导致全局最优</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>1不能再合并，不要加进去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == f[x] ? x : f[x] = getf(f[x]);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b, id;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(A x)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1l</span>l * b * x.a &gt; <span class="number">1l</span>l * a * x.b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(A x)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a != x.a || b != x.b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;a[maxn]; LL ans = <span class="number">0</span>;</span><br><span class="line">priority_queue &lt;A&gt; q;</span><br><span class="line"><span class="keyword">int</span> n, anc[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, anc + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> val, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line">		f[i] = i;</span><br><span class="line">		<span class="keyword">if</span> (val == <span class="number">0</span>) a[i] = (A)&#123;<span class="number">1</span>, <span class="number">0</span>, i&#125;;</span><br><span class="line">		<span class="keyword">else</span> a[i] = (A)&#123;<span class="number">0</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) q.push(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		A t = q.top(); q.pop();</span><br><span class="line">		<span class="keyword">int</span> cur = getf(t.id);</span><br><span class="line">		<span class="keyword">if</span> (a[cur] != t) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> fa = getf(anc[cur]);</span><br><span class="line">		ans += <span class="number">1l</span>l * a[fa].b * a[cur].a;</span><br><span class="line">		a[fa].a += a[cur].a;</span><br><span class="line">		a[fa].b += a[cur].b;</span><br><span class="line">		f[getf(cur)] = f[getf(fa)];</span><br><span class="line">		<span class="keyword">if</span> (fa != <span class="number">1</span>) q.push(a[fa]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>树，贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[ZJOI2019]语言</title>
    <url>/2019/12/05/%5BZJOI2019%5D%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵无根树和树上的若干条链</p>
<p>求无序点对数，使得这两个点不重合且它们之间的路径至少被一条链包含</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>特别暴力的做法，对于每个节点开一棵权值线段树，统计权值不为0的个数</p>
<p>对于一条链，分别在$u$，$v$，$f_{lca(u,v)}$打1,1,-2标记，自底向上线段树合并即可</p>
<p>线段树动态开点+标记永久化，因为每个区间如果被加上一定会被减去</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>线段树中当前节点的区间若被操作区间覆盖，修改Min时也要修改tg</p>
<p>-2要打在lca的父亲上<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r, Min, tg, ls, rs;</span><br><span class="line">    &#125;a[maxn * <span class="number">400</span>];</span><br><span class="line">    <span class="keyword">int</span> rt[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r)&#123;</span><br><span class="line">            a[cur].Min += k;</span><br><span class="line">            a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">int</span> M = a[cur].l + a[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!a[cur].ls &amp;&amp; M &gt;= l)&#123;</span><br><span class="line">            a[++tot].l = a[cur].l; a[tot].r = M;</span><br><span class="line">            a[cur].ls = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[cur].rs &amp;&amp; M &lt; r)&#123;</span><br><span class="line">            a[++tot].l = M + <span class="number">1</span>; a[tot].r = a[cur].r;</span><br><span class="line">            a[cur].rs = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].ls) upd(a[cur].ls, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (a[cur].rs) upd(a[cur].rs, l, r, k);</span><br><span class="line">        a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cur) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">if</span> (!v) <span class="keyword">return</span> cur;</span><br><span class="line">        a[cur].Min += a[v].Min;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l != a[cur].r)</span><br><span class="line">        a[cur].ls = Merge(a[cur].ls, a[v].ls),</span><br><span class="line">        a[cur].rs = Merge(a[cur].rs, a[v].rs);</span><br><span class="line">        a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t; </span><br><span class="line"><span class="keyword">int</span> dep[maxn], f[maxn], sz[maxn], son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    dep[cur] = dep[fa] + <span class="number">1</span>; f[cur] = fa; sz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">            dfs1(v, cur);</span><br><span class="line">            <span class="keyword">if</span> (sz[v] &gt; sz[son[cur]]) son[cur] = v;</span><br><span class="line">            sz[cur] += sz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id[maxn], tdx = <span class="number">0</span>, top[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[cur] = topf; id[cur] = ++tdx;</span><br><span class="line">    <span class="keyword">if</span> (!son[cur]) <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[cur], topf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != f[cur] &amp;&amp; e[i].to != son[cur]) dfs2(e[i].to, e[i].to);</span><br><span class="line">&#125; LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">U</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, k;</span><br><span class="line">    U(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>, <span class="keyword">int</span> c = <span class="number">0</span>)&#123;</span><br><span class="line">        l = a; r = b; k = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="built_in">vector</span> &lt;U&gt; vec[maxn];</span><br><span class="line"><span class="keyword">int</span> n, Q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, cur); t.rt[cur] = t.Merge(t.rt[cur], t.rt[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[cur].size(); j++)&#123;</span><br><span class="line">        t.upd(t.rt[cur], vec[cur][j].l, vec[cur][j].r, vec[cur][j].k);</span><br><span class="line"><span class="comment">//        printf("::%d %d %d\n", vec[cur][j].l, vec[cur][j].r, vec[cur][j].k);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    if (cur == 5) printf("%d\n", t.a[t.rt[cur]].tg);</span></span><br><span class="line">    ans += t.a[t.rt[cur]].tg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;U&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    <span class="keyword">while</span> (top[u] != top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        tmp.push_back((U)&#123;id[top[v]], id[v], <span class="number">0</span>&#125;);</span><br><span class="line">        v = f[top[v]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">    tmp.push_back((U)&#123;id[u], id[v], <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addedge(u, v); addedge(v, u);</span><br><span class="line">    &#125; dfs1(<span class="number">1</span>, <span class="number">0</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        t.rt[i] = i, t.a[i].l = <span class="number">1</span>, t.a[i].r = n;</span><br><span class="line">        vec[i].push_back((U)&#123;id[i], id[i], <span class="number">1</span>&#125;);</span><br><span class="line">        vec[f[i]].push_back((U)&#123;id[i], id[i], <span class="number">-1</span>&#125;);</span><br><span class="line">    &#125; tot = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">int</span> t = split(u, v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp.size(); j++)&#123;</span><br><span class="line">            vec[u].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">1</span>&#125;);</span><br><span class="line">            vec[v].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">1</span>&#125;);</span><br><span class="line">            vec[f[t]].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">-2</span>&#125;);</span><br><span class="line"><span class="comment">//            printf("::%d %d\n", tmp[j].l, tmp[j].r);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans - n) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ZJOI</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>线段树</tag>
        <tag>标记永久化</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2019]Emiya家今天的饭</title>
    <url>/2019/11/22/%5BNOIP2019%5DEmiya%E5%AE%B6%E4%BB%8A%E5%A4%A9%E7%9A%84%E9%A5%AD/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出$n\cdot m$的矩阵，从中选出任意个数$(\geq 0)$的元素，使得每行最多只有1个，且每列的个数不超过总数的一半</p>
<p>求所有方案中元素的乘积的和，对$998244353$取模</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，合法的方案数等于所有方案减去不满足的方案数</p>
<p>对于不满足的情况，一定<strong>有且仅有</strong>一列的选择个数超过一半</p>
<p>若选了$x$道菜，其中某种食材用了$y$，条件变形一下得到：$2y+n-x\geq n$</p>
<p>枚举超过一半的那一列，令$f[j][k]$表示有j行取了数，目前$2y+n-x$为k的方案数</p>
<p>分为当前行不选；当前行选，不选选定的列；选当前行，选选定的列 进行Dp即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">105</span>][maxn], s[<span class="number">105</span>];</span><br><span class="line">LL ans = <span class="number">1</span>, f[<span class="number">105</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + j); s[i] = (s[i] + a[i][j]) % mo;</span><br><span class="line">			<span class="keyword">if</span> (j == m) ans = <span class="number">1l</span>l * ans * (s[i] + <span class="number">1</span>) % mo;</span><br><span class="line">		&#125; ans--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f); f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= (n &lt;&lt; <span class="number">1</span>); k++)&#123;</span><br><span class="line">				f[j][k] = (f[j][k] + <span class="number">1l</span>l * f[j - <span class="number">1</span>][k] * (s[j] + mo - a[j][i]) % mo) % mo;</span><br><span class="line">				f[j][k + <span class="number">1</span>] = (f[j][k + <span class="number">1</span>] + f[j - <span class="number">1</span>][k]) % mo;</span><br><span class="line">				f[j][k + <span class="number">2</span>] = (f[j][k + <span class="number">2</span>] + <span class="number">1l</span>l * f[j - <span class="number">1</span>][k] * a[j][i] % mo) % mo;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n + <span class="number">1</span>; j &lt;= (n &lt;&lt; <span class="number">1</span>); j++) ans = (ans + mo - f[n][j]) % mo;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NOIP</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Artical]NOIP2019考后总结</title>
    <url>/2019/11/21/%5BArtical%5DNoip2019%E8%80%83%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="98ffbf1662ba672fedde8ed2018e5c2fbb8bd3b3f3235a5829edfb0471ffc64f">aba5c7bcecb0e845494faab52ce2974a258b00f2a0905022f77e97008d2305c814e07851c06596df751d30371e46a840571759a48fc2cf1530f10f6554e3f8caa5b2c1095e89af71b2f188a6424ba1a2c82dcc6f4dfc2f30d94c343012e236b14ad12cc9fb0ea026283490c3422a8ecdfea93241d6a16b0bd8f0c126665d52743152bd621d8c1825e03c9281214bab0df7a11716accbc7d34388046e8494922a43b5516a482df51062eda763ea787171051be70951251c90e54dabe2aba81db4eefaa3068ebec7ef71cff7ff3cc23c3e3086b63536d39b813b448a0ba74f43aca4db537fe89ef9400bb6b01cbc15a042aec01a8f88a2f89476afc2e2012248cab9f1c3f7f8918bf2e500ef868078e03c30a6ccafa56c5f8a6f797e347940f06eba18ac9cebbb111763606ee2df6e3a60eb0581d15376f91136cb2ef3e659b9b99f5a83cf9aa4435fc8ee01cc4c341062caa64e4c8c41d16ea6ce562b681db84b779cc413c1166e5cb58a781273a5ea46a9dc50636f88e16b44ed839dce335a575b56d0353b65bc14f8ca45a77a2bb6e4a3bfe1375b06c6d2a966530efcd5ccd838fbc945e6bc63ba74197461fb205e516fea96df33ecfdd0a61b09dd565cfd1b55b46abee78d9c7c6f4ceb03733863a28694453caf3d81f2994f2642310aa615d7e3725fa463e3af4e44fd086c7da7107fb4ab934a3a0fdb232226f52843d11e5f750b8da97398d8691afc98b58362ba8bf536333b4887d31a8f0e83cf204485b714eb40abda61b79f1a71bcecf5ea2cee2f8eca8080a07e0099daa7792ba11b1d2d1e1c6a97c0a229444dc208d42559d11ebde97ae186fcc5279cb27abb39176912c6b83beff365d6432abe4986a76a282b0ef4c865632123bc4de143914c7d8ec7ed43fd8eecfb0f3ea15d544dccab5715f25a0ff65b5a2c3dc995b0aa5fa89a8cc7f34ef1409655e4f0781b78c842777eb43e7862b122ac646f6c6d399ccac5bb9fe9840479c54ea38809704abbfd9ca372816bc56d5d1b15ffec538a452ed0309dd93016ae98890fb005b67bd1f1b5f344ff7e740c7c53454989358eecf3ae237002452fc7dffdd8dde392f1c1858d82a1380d12b4dde7a8a0fa769b3549f93faa8e3759b229b553f328c4ac38f9b7de5482a6faf4502260d39a478afc2b5377f276c7a0a55d65238059ea84867ce015e456363120b1b0ad0fc6453ca5225852d67d3009b0e8c0ca8677f94cbf3f2304ad3f9a08115c562055a47d2fa9b904b20c6961f4798eec96aa0c5a6bbedb7a9c341a96d7fb82fb6073a19a9d95d85da97ceecb9381c14c1fc9537d70ed007a838345a5782020090747061609cc2c7d82cb10e70e0903bd9b3328a728ea037aa3a90a7b105efbc44173dadf7ed259a0cdfde09a8cbd8a610506aece9da5c390104cb1be1a5adf628aa16d940498287fcf7dc74e08db57dfb78b71c9980c501c48e2f4caec25b8ae1aebca3dd8de14d62642e91a0f4c4c8469ad8b5bee3a44bc27a78214cdfc239bb05ded8db6d962b6156fa45912e8794b9e9c34e6969a2283c067c78cf0fe53a7c6651316c930ab7a8da1097e9353eb9a7bef41c0b2b0d245afd8a3f2f3fd862175da7409b6793b84a7c12e2adbb8684af5bb6c627af090cad77e3d3b531bce21a4501b424026a3e0a594b7bcfc00c6e523f9c958d602e9903b0603f0db2f5d22d61645a494f6017b95733c6eca110019ef049daf7ce6e33aa2f3132591b7931db51b168da5486d6ad80e4277a3f739835ebe4ef73a42198db0050df58cee889e282419baf975c16efd99fbf0fe3194fd92ca493048477dad5dbfd1dfebe11362d7fda0634637598ad6caa35d22b76ead698c35b34a9017d68e7d4d899b42e09d7327eaeec975c5f7bc33f4351e38c42a796eae4008834c870eedba64302ada21dab58e1af748bb266ebc8ec31ab1ddd85b33a91436d77190f71493fb63d647b1ae543bd3660ca6c798759cd87b0d3b4acd834fbb348afada31e575fc250a5c9cbbd7c7963279f7b26d60b8469d419d0733303a353067162ef683ed1f5fbaba4f3fba73cb204a6b9a113524056f17e86ca6473d540f632d1d51cba4f7f64e8dda40bf9cf556850a345316461e10fa21640a2858e98fe022fbbefdbec7017a226752617f976b95b9d5b1a97a11fc0de17957c7e76b9ba36b113cf02af3b1619e8f8005428da5f14ad9a64b81f10e924855b5eeaadd1eb907cf3a8a00c5719103683f4ee697d32228f3654fb450cbb0e368b8b8af6b23acdf6ed2e6abecb3369abc4d75d2555e0b1b89d805d394607db4a627aaaf49a3b7ec70fcfb5d7bbbdc286bd3865e8f65faf659cc5d6a0f6b9998cd59f71f6017ec0700055320edb52011d7d707c11c8ca1fb8bea1fb0f122b746812f12f3347eff6eee97f185d1682acaa8a44bdb100080eb3b70e78f3d44903d98f2e87b674ef7938f7740c9b260114a39fdc712b17ad523ca767d7a7ce0439c21d4efd7908f20cb1a24fae9d8b1272c2bbbbd93747ee3ad914307e388fc5e47a6301f098be9da6ac098e8618d4b514ccf943045b70ceb9668ab3eab9905930fe6a677b194f50a88ee9b64174c23ea213d5ae05ee94d86c2a4850197518734723ab24d825d638abb849ddccc90e9e8ef5b38f9eca5897e7f1bfcd0c44e9ee53ed4ff5902570604b8b7a59920ff490ae3cdf0d93bf12c7493055219f2d70e4c9517b92958f1fbb154de1ca22dd4178c5bd3b11e28c2fd6abf93dbbfb64807273b78a1959b646b778f9e847fd7cb7c18d731074a36d1ff888a6f00d075283076a68b97200c94f243640b8ba1d77687a81312c2c189163519fb0a72dcc896bea747a2e0b3db9d345795414a32e1c4a0e89a39a3881f6bcbc6a94a4d52c6581e21fd992e190c69cf67bb8feaa9e6c5d5de066e93570a5b1c01192eb0ec99f471a093a4891808243cac86acc96740d5805bae9920a0e91dcb4c41fcbca03316e4d77598e58c923b2e7a00ae41a53898c9399a5bd75596fa84a94ebfa8a1a9381e28c330dc958f889f5802426a50a0a10f604faea5ebd04d567ee2d2cae78af46bd0ece802458c50aff2ee1c5f15f227567626f371216c3f8967a4a546337f64ff2c7f7b836bee9eb095b244a3981c102209fd491c782e776de0b617513ce95e1c5f3d88ab7c076e39e6d2fec6ae94f14aec26da674713cbd996d00121ae587151e9e36aa4267b57a97ee610a29b9ee01ef45d41675f72bf73587c090a75057d3116b3d7e58cab32a1a8ce3c49f987276bd7b363d2a5b24180990ae1aa096339329d9ddb87a275dd9c12be64d9a07389fd6b9769a969be41292c9efb33bbc4bda6a93a3b708107f3bd5896011b5c4a1ce1b49657d2285e312980677d7d4ed11aacfdb3dad4816fba8a36d3c5439417734620d40e080abe205daa2fc3b6ea7b0ea1878d71a012f89e9d9828164b3c7dfccc9001050f37af31e556e66b1f01aa03069569fd6d9dcc0104e265f9099b30240ddbdec8190b84dad28bfd27d9ee6a41362476bf6c6c311812eed1a0d8e6dfb670365a0107223b7b8c4a495f3aa074dc6de177ff27f22d2fd579a8eca395a3323eac03d8a3f68f6776c2a6d99f089fc9305875cb017e8bb12b73a9beba367e25d5692febee9d662fa17dfa4e63263416119b6e2672da96d5fd9a531e96ecb34cc355522f9053b31402d4fb457a32a59f2211b5712b9c11ec70cb02393dc55cd92b6ed8bfaa439fa17d27799fbbe6c3d3094aa4b1ff82fea2fe7304ef0ece1d1a694c59912a55730f5a902a6ee2729b142ee109dc0291db20e8ff2e1af3bae9c4619e23bd078405245339c3a27a0123899fb45fa0167d4512634314a98bbeaed5d5475fe15eb0be5f6619f2f4405c0f210d45a1d01ccabced6e623a81e6fad5a1ab1c5bdc17139c7d432a483149bcbb8a47c11c5f6acfd9032df548655343031b1e770bb45dfa003b7002351ede29d7b19b7f0b243da9178ad42d610fbd8ad1570ea78af74d7657fe0b8f9092d8adb7266669f085de8000f1c76dd53e0895eca6bc1bc8c8aa864fd075609459722273b516aa06b015a89a37cf0b913e3a5fa8823e3e7fde6187f0ecf901ecbad27d05df62012d6f45692feb23f02d7af9ac446f848affa5849cafef53d740e7872a3d9fafeb2d5c7e2561367d9b832e8b8f7391690f33913a81cd1c49b58016e4220c0ffd2ed73e9dff1cac2f359d6c5287e64c534384ef25738d9cf6931012b35b944b5662616ac335540c2a581f22f2d617a415096529564238e7dd8fae4b015bcfc6ab1e1c21860f74b27b27e2b00103a735819f4f379b5cf5d5bd124b2e3d9cf1fb8459e80ed6feeaee2e010dd45f8c9a0cc4b21d62fe8a3d8b13dd4fe79eef42caf951b449b15e0eee01822794a2ad5c7da170dd88ea4cc52c0a53744223b82a806e4cf170598c94b17ab54ce14d1ef30e70d4689896e8e4184aba0f5d16e772f5c931554b27fdde618ddf4acbe0bc570ab820fdc4d049b106fb78b24fc80e846d5245bb51752d2ac735f88b3ccdd1dd3dd0e1a27d834237abd983af13252aa13e773cb089a3470320250147a649acf970618bd29a64e0eb50bf449d98afcd845904e6c4c9bea9d4ad9fa6d61208c00d85a2721b6fa76cc619b06274ced2f8c7fac4fb18430ac244f993d4591aa20894b850d50a67e3c52a70869788dda171e7358f8956e94f2a9573166fcdb9a4b9d92d97db6fbde905fbc02ccb1d5f78de8f93b685d093c710f1d594e8ca1a93f6dfae47dc6d6faf017d393129ac2e1f9521cac57e3d56f9c1cd194ac6af38d8878bf32782871ba16428c350eb17294503107eed5bda4656573e8626ae43cff0be32bd246c423fe4838c1081dae9ab7bb8fe27778b7bd0ff06c2301c81a4fe36df79ba5175eeeb8f08a225b2c8995765c2e7679d4a65e71a4457d0e3cc2e718c6e7b19e71f1d5fa6546d49123ddbb4dd48be434c834910fec6c5646066e55d85d4555a395b43b1628982e907aa3d09ce9c293cfe0ed10191bb87a2feccf3ea5c23aa52994f36602cc5997fb3d5587b8048bdcaa6f1109d23587cf80c9fc229845a36a644d42cc92195846e985f71fbe676d30883a1b2fb853f896b6d11e4eefa4493f2eea7ce48ca4c9a34715f5cf27229ca7ba60f73c6b9a89526c309d42eff00bbe81b03f09c055cf797b1cada29662f0d41112e2e159b96d245675e1700f6f11ef2d3ef2c37950a91be398c046c87aa1e782b35c7a2f464ae6488d8fc340d47e3027204ca65617bcf0d716758c0cac36c8ac8ee3a9c147b0625c7c500</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>Artical</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2019]括号树</title>
    <url>/2019/11/21/%5BNOIP2019%5D%E6%8B%AC%E5%8F%B7%E6%A0%91/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一棵以$1$为根的树中，每个节点都有一个左括号或者右括号</p>
<p>令$F(x)$为从$1$到$x$的路径上组成的括号串中合法的连续子串的数量</p>
<p>求$ans=\oplus_{x=1}^n x\cdot F(x)$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑对于一个字符串如何计算，令f为以当前位为结尾的合法串个数，整个串的总数即为f的求和</p>
<p>dfs顺便用栈维护即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>前缀和要在进入下一层前处理好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn], f[maxn], sum[maxn];</span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s; LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">'('</span>) s.push(cur);</span><br><span class="line">	<span class="keyword">int</span> tmp = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">')'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s.empty())&#123;</span><br><span class="line">			f[cur] = f[fa[s.top()]] + <span class="number">1</span>;</span><br><span class="line">			tmp = s.top();</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; 	sum[cur] = f[cur] + sum[fa[cur]];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		dfs(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">'('</span> &amp;&amp; !s.empty()) s.pop(); </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (tmp != <span class="number">-1</span>) s.push(tmp);</span><br><span class="line">	ans ^= (<span class="number">1l</span>l * cur * sum[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, str + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, fa + i);</span><br><span class="line">		addedge(fa[i], i);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>树</tag>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF852E]Casinos and travel</title>
    <url>/2019/11/15/%5BCF852E%5DCasinos%20and%20travel/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，定义$f(t)$为以t为根，从根到叶子节点的所有链上白格子数为偶数，的黑白染色方案数</p>
<p>求$\sum_{i=1}^n f(i)$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先写个Dp，发现每一棵有根树的答案为：</p>
<p>令$x$为n-叶子节点的个数，则$f(t)=2^x$</p>
<p>$O(n)$求和即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>想到结论就好了<del>不会证也没事</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ind[maxn], n, c, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * x % mo;</span><br><span class="line">		x = <span class="number">1l</span>l * x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		ind[u]++, ind[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (ind[i] &gt; <span class="number">1</span>) ++c;</span><br><span class="line">	<span class="keyword">int</span> P = <span class="built_in">pow</span>(<span class="number">2</span>, c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (ind[i] == <span class="number">1</span>) ans = (ans + <span class="number">2l</span>l * P % mo) % mo;</span><br><span class="line">		<span class="keyword">else</span> ans = (ans + P) % mo;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF254C]Anagram</title>
    <url>/2019/11/15/%5BCF254C%5DAnagram/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>替换最少数量的字符，使得A中的每个大写字符个数都与B中相同</p>
<p>输出最少替换次数以及字典序最小的方案</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>完完全全<del>一道傻逼题</del>，考场脑子坏掉了</p>
<p>最少次数显然，输出方案就从后往前，替换字符更小或者不能再协调就替换，不然先不替换</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>犯了一堆神奇的错误，还是思路实现不清晰啊</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn]; <span class="keyword">int</span> n, cnt[<span class="number">26</span>], c[<span class="number">2</span>][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[a[i] - <span class="string">'A'</span>]++, cnt[b[i] - <span class="string">'A'</span>]--, c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]++;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>, x = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)&#123;</span><br><span class="line">		res += max(cnt[j], <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (cnt[j] &lt; <span class="number">0</span> &amp;&amp; x == <span class="number">-1</span>) x = j;</span><br><span class="line">		<span class="keyword">if</span> (cnt[j] &gt; <span class="number">0</span>) c[<span class="number">1</span>][j] = cnt[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[i] - <span class="string">'A'</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[i] - <span class="string">'A'</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] - <span class="string">'A'</span> &gt; x || c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>] == c[<span class="number">1</span>][a[i] - <span class="string">'A'</span>])&#123;</span><br><span class="line">				--cnt[a[i] - <span class="string">'A'</span>]; --c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]; --c[<span class="number">1</span>][a[i] - <span class="string">'A'</span>];</span><br><span class="line">				a[i] = x + <span class="string">'A'</span>;</span><br><span class="line">				++cnt[x];</span><br><span class="line">				<span class="keyword">while</span> (cnt[x] &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">25</span>) ++x;</span><br><span class="line">			&#125; <span class="keyword">else</span> c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title>[JOI2019]三级跳</title>
    <url>/2019/11/15/%5BJOI2019%5D%E4%B8%89%E7%BA%A7%E8%B7%B3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出${w_i}$，多次询问给出l，r，求满足$l\leq a&lt;b&lt;c\leq r$，$b-a\leq c-b$的$w_a+w_b+w_c$的最大值</p>
<p>$n，q\leq 5\cdot 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果一组ab可能合法，当且仅当ab中间不存在权值比$w_a$或者$w_b​$大的</p>
<p>可以用单调栈求出这些数对，对数是$O(n)$的</p>
<p>然后扫描线+线段树维护区间w+Max的最大值即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>注意扫描线要从后往前扫，因为从前往后的话最大值可能是从l前面跳过来的</p>
<p>从后往前扫容易控制边界</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn], n, Q;</span><br><span class="line"><span class="keyword">int</span> s[maxn], top = <span class="number">0</span>; </span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l, r, Max, v, lazy;</span><br><span class="line">	&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;a[cur].v = w[l]; <span class="keyword">return</span>;&#125; </span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		build(cur &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">		build(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">		a[cur].v = max(a[cur &lt;&lt; <span class="number">1</span>].v, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!a[cur].lazy) <span class="keyword">return</span>;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].lazy = max(a[cur &lt;&lt; <span class="number">1</span>].lazy, a[cur].lazy);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].Max = max(a[cur &lt;&lt; <span class="number">1</span>].Max, a[cur].lazy + a[cur &lt;&lt; <span class="number">1</span>].v);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy = max(a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy, a[cur].lazy);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max = max(a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max, a[cur].lazy + a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">		a[cur].lazy = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r)&#123;</span><br><span class="line">			a[cur].Max = max(a[cur].Max, a[cur].v + k);</span><br><span class="line">			a[cur].lazy = max(a[cur].lazy, k);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		upd(cur &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">		upd(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">		a[cur].Max = max(a[cur &lt;&lt; <span class="number">1</span>].Max, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r) <span class="keyword">return</span> a[cur].Max;</span><br><span class="line">		pushdown(cur); <span class="keyword">return</span> max(Query(cur &lt;&lt; <span class="number">1</span>, l, r), Query(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t; <span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">while</span> (top &amp;&amp; w[s[top]] &lt; w[i]) p[s[top--]].push_back(i);</span><br><span class="line">		p[s[top]].push_back(i); s[++top] = i;</span><br><span class="line"> 	&#125; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line"> 	<span class="keyword">for</span> (<span class="keyword">int</span> l, r, i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line"> 		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r); q[l].push_back(make_pair(r, i));</span><br><span class="line">	&#125; t.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p[i].size(); j++)&#123;</span><br><span class="line"><span class="comment">//			printf("%d: %d\n", i, p[i][j]);</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="number">2</span> * p[i][j] - i &lt;= n) t.upd(<span class="number">1</span>, <span class="number">2</span> * p[i][j] - i, n, w[i] + w[p[i][j]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].size(); j++)</span><br><span class="line">			ans[q[i][j].second] = t.Query(<span class="number">1</span>, i, q[i][j].first);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JOI</category>
      </categories>
      <tags>
        <tag>状态缩减</tag>
        <tag>线段树</tag>
        <tag>扫描线</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]LCA（ST表）</title>
    <url>/2019/11/14/%5B%E6%A8%A1%E6%9D%BF%5DLCA%EF%BC%88ST%E8%A1%A8%EF%BC%89/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求静态区间最小值即可</p>
<p>常数有点大，不吸氧可能会T，不过是真好写</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>更新Min的时候还有一个区间是Min[i+(1&lt;&lt;j)][j-1]，不用+1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Min[maxn &lt;&lt; <span class="number">1</span>][<span class="number">25</span>], tdx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> link[maxn], dep[maxn], x[maxn &lt;&lt; <span class="number">1</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	Min[++tdx][<span class="number">0</span>] = dep[cur];</span><br><span class="line">	x[tdx][<span class="number">0</span>] = cur;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">			dfs(v, cur);</span><br><span class="line">			Min[++tdx][<span class="number">0</span>] = dep[cur];</span><br><span class="line">			x[tdx][<span class="number">0</span>] = cur;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	link[cur] = tdx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">24</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= tdx; i++)</span><br><span class="line">			<span class="keyword">if</span> (Min[i][j - <span class="number">1</span>] &lt; Min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]) x[i][j] = x[i][j - <span class="number">1</span>], Min[i][j] = Min[i][j - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> x[i][j] = x[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>], Min[i][j] = Min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = (<span class="keyword">int</span>)log2(r - l + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (Min[l][k] &lt; Min[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]) <span class="keyword">return</span> x[l][k];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> x[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, Q, rt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;Q, &amp;rt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(rt, <span class="number">0</span>);</span><br><span class="line">	ins();</span><br><span class="line"><span class="comment">//	for (int i = 1; i &lt;= tdx; i++) printf("%d ", Min[i][0]); puts("");</span></span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">if</span> (link[u] &gt; link[v]) swap(u, v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Query(link[u], link[v]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]ST表</title>
    <url>/2019/11/14/%5B%E6%A8%A1%E6%9D%BF%5DST%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>倍增求区间Max，查询的时候分为两段，保证覆盖即可，重叠无妨</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn][<span class="number">21</span>], n, Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, Max[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) + i - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">			Max[i][j] = max(Max[i][j - <span class="number">1</span>], Max[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123; <span class="keyword">int</span> l, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="keyword">int</span> k = (<span class="keyword">int</span>)log2(r - l + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(Max[l][k], Max[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>[Artical]NOIP2019考前总结</title>
    <url>/2019/11/14/%5BArtical%5DNoip2019%E8%80%83%E5%89%8D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5c741beed7608de469a28f7c8ba0a47f120cfa9a9959f08679bb063d853a6ab3"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>Artical</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2016]天天爱跑步</title>
    <url>/2019/11/14/%5BNOIP2016%5D%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在树上有一些简单链，问每个点是多少条链的第\(w_j\)个点</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>把链分为上行的和下行的两条</p>
<p>在上行链上，造成贡献的必要条件是\(w_j+dep_j=dep_u\)，u为j子树中的点</p>
<p>在下行链上，造成贡献的必要条件是\(w_j-dep_j=l-dep_v\)，v为j子树中的点</p>
<p>dfs，顺便关于\(w_j+dep_j\)和\(w_j-dep[j]\)开桶统计即可</p>
<p>注意点1，当一条链两个端点的lca恰好在这条链有贡献，会被算两遍，要先减掉</p>
<p>注意点2，如果链的起点和终点都在子树中，lca以上就不能算贡献</p>
<p>因此，链的起点和终点的贡献要在lca处减掉</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>注意点1,2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">25</span>], dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	f[cur][<span class="number">0</span>] = fa; dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[cur]; i++)</span><br><span class="line">		f[cur][i] = f[f[cur][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">		<span class="keyword">if</span> (e[i].to != fa) dfs1(e[i].to, cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (dep[v] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[u]) v = f[v][i];</span><br><span class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];</span><br><span class="line">	<span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s[maxn], ds[maxn &lt;&lt; <span class="number">1</span>], dt[maxn &lt;&lt; <span class="number">2</span>], res[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; t[maxn], tt[maxn], ss[maxn]; <span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t1 = ds[w[cur] + dep[cur]], t2 = dt[w[cur] - dep[cur] + maxn];</span><br><span class="line">	ds[dep[cur]] += s[cur];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t[cur].size(); j++)</span><br><span class="line">		dt[t[cur][j] + maxn]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		dfs2(v, cur);</span><br><span class="line">	&#125;</span><br><span class="line">	res[cur] += ds[w[cur] + dep[cur]] - t1 + dt[w[cur] - dep[cur] + maxn] - t2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ss[cur].size(); j++)</span><br><span class="line">		ds[dep[ss[cur][j]]]--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tt[cur].size(); j++)</span><br><span class="line">		dt[tt[cur][j] + maxn]--;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125; dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//	printf("%d\n", LCA(2, 5));</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v); <span class="keyword">int</span> lca = LCA(u, v);</span><br><span class="line">		s[u]++; <span class="keyword">if</span> (dep[lca] + w[lca] == dep[u]) res[lca]--; </span><br><span class="line">		ss[lca].push_back(u);</span><br><span class="line">		t[v].push_back(dep[u] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">		tt[lca].push_back(dep[u] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">	&#125; dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NOIP</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>细节</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ781]天下大雨</title>
    <url>/2019/11/13/%5BSOJ718%5D%E5%A4%A9%E4%B8%8B%E5%A4%A7%E9%9B%A8/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="58d4ec37fa6997648339d7f4de89adcac204922a5ff8d9fd1e1e2a7dace263e5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ684]降雨量</title>
    <url>/2019/11/13/%5BSOJ684%5D%E9%99%8D%E9%9B%A8%E9%87%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dd4545d98fd43c4d9a342a5cd2109bd6d1ec7b2ae6f91ed35e7c2ebf73aa0660"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>set</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ683]蜥蜴</title>
    <url>/2019/11/13/%5BSOJ683%5D%E8%9C%A5%E8%9C%B4/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9f6a1c6f404603baad97c867c5f394987065db76abfed47aa83e749eaf47382b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC034E]Complete Compress</title>
    <url>/2019/11/12/%5BAGC034E%5DComplete%20Compress/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>树上有一些碎片，每次可以选择两个距离大于1的碎片在它们的最短路径上分别靠近一格，最终使得它们聚在任意一点</p>
<p>求最小的步数或告知不可能</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>对于一整棵树，如果根节点的所有子节点到它的距离和为偶数</p>
<p>且子树中到根距离和最大值不大于这棵整棵树到根的距离和的1/2，就是可行的</p>
<p><strong>注：等价于这个问题，有{\(a_i\)}，每次选择两个数各减去1，使最终和最小</strong></p>
<p><strong>如果\(2Max&gt;sum\)，最少距离和为\(2Max-sum\)，否则与原sum的奇偶性相同（0或1）</strong></p>
<p>因此每次要递归地尽量把到根距离和最大的子树的和变得最小</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>真的是做了整整一个晚上<del>机房好吵啊</del></p>
<p>用sdep[v]算到根的距离和没有考虑v是否也对距离和有贡献（s[v]==‘1’）<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], sz[maxn], sdep[maxn], sum; <span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	sum += (dep[cur] - <span class="number">1</span>) * (s[cur] == <span class="string">'1'</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">			dfs1(v, cur);</span><br><span class="line">			sz[cur] += sz[v] + (s[v] == <span class="string">'1'</span>);</span><br><span class="line">			sdep[cur] += sdep[v] + sz[v] + (s[v] == <span class="string">'1'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> link = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (sdep[v] + sz[v] + (s[v] == <span class="string">'1'</span>) &gt; sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>) || link == <span class="number">0</span>) link = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (link == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	dfs2(link, cur); sdep[cur] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">		<span class="keyword">if</span> (e[i].to != fa) sdep[cur] += sdep[e[i].to] + sz[e[i].to] + (s[e[i].to] == <span class="string">'1'</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2l</span>l * (sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>)) &gt; sdep[cur]) sdep[cur] = <span class="number">2l</span>l * (sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>)) - sdep[cur];</span><br><span class="line">	<span class="keyword">else</span> sdep[cur] = sdep[cur] &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, ans = INF;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%s"</span>, &amp;n, s + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> rt = <span class="number">1</span>; rt &lt;= n; rt++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); <span class="built_in">memset</span>(sz, <span class="number">0</span>, <span class="keyword">sizeof</span> sz); sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(sdep, <span class="number">0</span>, <span class="keyword">sizeof</span> sdep);</span><br><span class="line">		dfs1(rt, <span class="number">0</span>); <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		dfs2(rt, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (sdep[rt] == <span class="number">0</span>) ans = min(ans, sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans == INF) ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>贪心</tag>
        <tag>递归</tag>
        <tag>调试很久</tag>
      </tags>
  </entry>
  <entry>
    <title>[HNOI2012]矿场搭建</title>
    <url>/2019/11/12/%5BHNOI2012%5D%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在无向联通图中设置一些庇护所，使得任何1个点被删掉之后（同时在该地的庇护所也失效），所有点（包括删掉的这个点）都能到达至少一个庇护所</p>
<p>求最小的庇护所数及最优的方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>把所有的割点求出来，把这个图分为一些联通块</p>
<p>如果联通块里面割点个数为0，需要建两个，方案数为\(C_{cnt}^2\)</p>
<p>如果联通块里面割点个数为1，需要在除割点外建1个，方案数为\(cnt-1\)</p>
<p>如果联通块里面割点个数大于1，不论怎样都可以跑到其他联通块中，不用建</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>没写Case</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, _cnt, tdx;</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn];</span><br><span class="line"><span class="keyword">bool</span> cut[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	low[cur] = dfn[cur] = ++tdx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (dfn[v]) low[cur] = min(low[cur], dfn[v]);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			Tarjan(v); low[cur] = min(low[cur], low[v]);</span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt;= dfn[cur] &amp;&amp; cur != <span class="number">1</span>) cut[cur] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (cur == <span class="number">1</span>) ++_cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cur == <span class="number">1</span>) cut[cur] = (_cnt &gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">LL ans; <span class="keyword">int</span> Min, c, t, Col, vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	vis[cur] = Col;</span><br><span class="line">	++t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (!vis[v] &amp;&amp; !cut[v]) dfs(v, cur);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cut[v] &amp;&amp; vis[v] != Col) ++c, vis[v] = Col;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	<span class="keyword">while</span> (m != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">0</span>; ans = <span class="number">1l</span>l, Min = <span class="number">0</span>; Col = <span class="number">0</span>; n = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn); <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low); _cnt = <span class="number">0</span>; tdx = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span> cut); <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			addedge(u, v);</span><br><span class="line">			addedge(v, u);</span><br><span class="line">			n = max(n, max(u, v));</span><br><span class="line">		&#125;</span><br><span class="line">		Tarjan(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (!cut[i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">				c = <span class="number">0</span>; t = <span class="number">0</span>; ++Col;</span><br><span class="line">				dfs(i, <span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span> (c == <span class="number">0</span>) ans *= <span class="number">1l</span>l * (t - <span class="number">1</span>) * t / <span class="number">2</span>, Min += <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">if</span> (c == <span class="number">1</span>) ans *= t, Min++;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d %lld\n"</span>, ++T, Min, ans);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>割点</tag>
        <tag>分类讨论</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ689]数字</title>
    <url>/2019/11/11/%5BSOJ689%5D%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="de9b2db085a7dc49b7147f1cba5ef9eeebf287d79bc0f4714761ab76b66f840b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[APIO2009]采油区域</title>
    <url>/2019/11/11/%5BAPIO2009%5D%E9%87%87%E6%B2%B9%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<p>在nm的非负权值网格中放3个k*k的不重叠正方形，求3个正方形的权值和最大值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p><del>题解里说，过一个疯一个呢，我看没有</del></p>
<p>在矩形里放3个一共有6种情况</p>
<p>处理出对于每个点而言左上左下右上右下的二维前缀和与k*k的正方形的权值和</p>
<p>转移显然</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一发过去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1505</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL s[maxn][maxn], a[<span class="number">4</span>][maxn][maxn], f[maxn][maxn], x[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, x[i] + j);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + x[i][j];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++)</span><br><span class="line">			f[i][j] = s[i][j] - s[i - k][j] - s[i][j - k] + s[i - k][j - k];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			a[<span class="number">0</span>][i][j] = max(max(a[<span class="number">0</span>][i - <span class="number">1</span>][j], a[<span class="number">0</span>][i][j - <span class="number">1</span>]), f[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			a[<span class="number">1</span>][i][j] = max(max(a[<span class="number">1</span>][i + <span class="number">1</span>][j], a[<span class="number">1</span>][i][j - <span class="number">1</span>]), f[i + k - <span class="number">1</span>][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">			a[<span class="number">2</span>][i][j] = max(max(a[<span class="number">2</span>][i - <span class="number">1</span>][j], a[<span class="number">2</span>][i][j + <span class="number">1</span>]), f[i][j + k - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">			a[<span class="number">3</span>][i][j] = max(max(a[<span class="number">3</span>][i + <span class="number">1</span>][j], a[<span class="number">3</span>][i][j + <span class="number">1</span>]), f[i + k - <span class="number">1</span>][j + k - <span class="number">1</span>]);</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i][j] + a[<span class="number">1</span>][i + <span class="number">1</span>][j] + a[<span class="number">2</span>][n][j + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][n][j] + a[<span class="number">2</span>][i][j + <span class="number">1</span>] + a[<span class="number">3</span>][i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">1</span>][i + <span class="number">1</span>][j] + a[<span class="number">3</span>][i + <span class="number">1</span>][j + <span class="number">1</span>] + a[<span class="number">0</span>][i][m]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i][j] + a[<span class="number">2</span>][i][j + <span class="number">1</span>] + a[<span class="number">3</span>][i + <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][n][j - k] + a[<span class="number">2</span>][n][j + <span class="number">1</span>] + f[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i - k][m] + a[<span class="number">3</span>][i + <span class="number">1</span>][<span class="number">1</span>] + f[i][j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>APIO</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>[Usage]1</title>
    <url>/2019/11/11/%5BUsage%5D1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>usage</category>
      </categories>
      <tags>
        <tag>usage</tag>
      </tags>
  </entry>
  <entry>
    <title>[CTSC2008]祭祀</title>
    <url>/2019/11/08/%5BCTSC2008%5D%E7%A5%AD%E7%A5%80/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求有向图中最大的集合使得集合中的点两两不可到达</p>
<p>求集合的大小，输出1种可行的构造方案，并输出每个点能不能在点集中</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>第一问：由Diliworth定理，最长反链的长度=最小链覆盖的数量</p>
<p>本来是没有后两问的<del>哪个毒瘤写的spj</del></p>
<p>第二问：就是求二分图的最大独立集</p>
<p>第三问：把一个点以及和它相连的边和点都删掉，如果最小链覆盖-1，则可以</p>
<h3 id="关于第二问的构造方案"><a href="#关于第二问的构造方案" class="headerlink" title="关于第二问的构造方案"></a>关于第二问的构造方案</h3><p>首先不能直接选覆盖链的头或尾来构造，反例显然</p>
<p>这个问题等价于二分图的最大独立集的问题</p>
<p>最大独立集一定等于最小点覆盖的补集：1.它一定是最大的 2.该补集中一定没有连边，如果有的话不满足最小点覆盖</p>
<p>考虑如何求二分图的最小点覆盖：从左边的任何一个未匹配点开始，未匹配边-&gt;匹配边…，标记经过的所有点</p>
<p>左侧标记的点和右侧未标记的点就是最小点覆盖，如果i和i+n都在最大独立集里，就加入反链</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>不会构造方案<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f);</span><br><span class="line">	addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn], T;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">	q.push(<span class="number">0</span>); <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(e[i].to, min(Max, e[i].f));</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	maxflow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(<span class="number">0</span>, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> link[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				link[i][j] |= (link[i][k] &amp; link[k][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) link[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (vis[cur]) <span class="keyword">return</span>;</span><br><span class="line">	vis[cur] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (cur &lt;= n)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (e[i].f == <span class="number">0</span> &amp;&amp; e[i].to != <span class="number">0</span>) dfs1(e[i].to);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cur &gt; n)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (e[i].f == <span class="number">0</span> &amp;&amp; e[i].to != T) dfs1(e[i].to);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">int</span> ex[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		link[u][v] = <span class="number">1</span>;</span><br><span class="line">	&#125; T = n &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; Floyd();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(<span class="number">0</span>, i, <span class="number">1</span>), ex[i] = tot - <span class="number">1</span>, ins(i + n, T, <span class="number">1</span>), ex[i + n] = tot - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span> (link[i][j]) ins(i, j + n, <span class="number">1</span>);</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - maxflow);</span><br><span class="line">	<span class="keyword">int</span> tmp = n - maxflow;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (e[ex[i + n]].f != <span class="number">0</span>) dfs1(i + n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, (!vis[i] &amp; vis[i + n]));</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">1</span>; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (i != p &amp;&amp; !link[i][p] &amp;&amp; !link[p][i]) ins(<span class="number">0</span>, i, <span class="number">1</span>), ins(i + n, T, <span class="number">1</span>), ++cnt;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">if</span> (i != p &amp;&amp; j != p &amp;&amp; link[i][j]) ins(i, j + n, <span class="number">1</span>);</span><br><span class="line">		Dinic();</span><br><span class="line">		<span class="keyword">if</span> (cnt - maxflow == tmp - <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">'1'</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">	&#125; <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTSC</category>
      </categories>
      <tags>
        <tag>调试很久</tag>
        <tag>网络流</tag>
        <tag>图论</tag>
        <tag>构造</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
</search>
