<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[置顶][Artical]思维问题</title>
    <url>/2100/01/01/%5B%E7%BD%AE%E9%A1%B6%5D%5BArtical%5D%E6%80%9D%E7%BB%B4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="眼睛"><a href="#眼睛" class="headerlink" title="眼睛"></a>眼睛</h3><p>在一个遥远的村庄中，有100个蓝眼睛的人和900个黑眼睛的人，他们都绝顶聪明并严格遵守规则</p>
<p>村子里没有任何反光的物件，也不准以任何方式讨论眼睛的颜色，但村中人都知道村子里有<strong>多种</strong>颜色的眼睛</p>
<p>村子里有一个奇怪的规定，如果任何人知道了自己眼睛的颜色，必须在正午12：00到广场上自杀</p>
<p>注意，所有人要在自杀开始前决定自己是否自杀，在自杀结束后才能知道有几个人自杀，也就是说可以认为自杀<strong>瞬间结束</strong>并且<strong>只能在正午12：00进行</strong></p>
<p>村里多年相安无事，一天，村里来了一个旅者，他不知道村里的规矩，随口说：“你们村里有蓝眼睛的人哎！”</p>
<p>会发生什么？</p>
<h3 id="分赃"><a href="#分赃" class="headerlink" title="分赃"></a>分赃</h3><p>你是海盗A，你还有4个同伙，分别为BCDE</p>
<p>你们有一天抢到了100个金币<strong>（金币最小计数单位是1个）</strong>，要进行分赃</p>
<p>分赃的规则如下：按照ABCDE的顺序依次提出分赃的方案，如果一个人提出的方案没有超过半数的<strong>活人</strong>认同，那么就把他丢下海去喂鲨鱼</p>
<p>如果所有的海盗都绝顶聪明，绝对贪婪和残暴；换句话说，他们的第一目标是保命，第二目标是拿钱，第三目标是杀死尽可能多的人，并会按照最佳策略行动</p>
<p>你要提出方案了，怎样才能拿到最多的金币呢？</p>
]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>Artical</tag>
      </tags>
  </entry>
  <entry>
    <title>[置顶][Artical]短文随感</title>
    <url>/2100/01/01/%5B%E7%BD%AE%E9%A1%B6%5D%5BArtical%5D%E7%9F%AD%E6%96%87%E9%9A%8F%E6%84%9F/</url>
    <content><![CDATA[<h2 id="尊严"><a href="#尊严" class="headerlink" title="尊严"></a>尊严</h2><h6 id="读者2019-十二月上-卷首语-余秋雨"><a href="#读者2019-十二月上-卷首语-余秋雨" class="headerlink" title="读者2019 十二月上 卷首语 余秋雨"></a><em>读者2019 十二月上 卷首语 余秋雨</em></h6><p>第一，尊严，主要产生于以弱对强，以小对大，而不是反过来；<br>第二，尊严，主要产生于平静的自述，而不是声辩；<br>第三，尊严，主要产生于拒绝，而不是扩张</p>
<h2 id="没有归还的一天"><a href="#没有归还的一天" class="headerlink" title="没有归还的一天"></a>没有归还的一天</h2><h6 id="读者2019-十二月上-意-帕皮尼"><a href="#读者2019-十二月上-意-帕皮尼" class="headerlink" title="读者2019 十二月上 [意]帕皮尼"></a><em>读者2019 十二月上 [意]帕皮尼</em></h6><p>将自己的青春放到以后去花费，随之而来的代价是每次一个月时间的等待，碰到这样的机会看似幸运，实则是更深的不幸。你可以在老年的时候得到瞬间的无比欢悦，可是愉悦过后是无可救药的更深的绝望</p>
<p>这个交换的可怕之处就在于，你哪怕在以后花费青春的时候，也无可避免地想到自己身处老年，而当自己还拥有青春的时候就会觉得老年无比可怕；一个月时间的等待，更加使得老年的乐趣烟消云散；最终没有归还的一天，老妇人在镜前死去，是这个悲剧的集中体现，以小见大折射出老妇人绝望的老年生活</p>
<p>作者意在告诉我们，要融入当下，接纳自己的全部</p>
<h2 id="完美的生活"><a href="#完美的生活" class="headerlink" title="完美的生活"></a>完美的生活</h2><h6 id="读者2019-十二月上-日-星新一"><a href="#读者2019-十二月上-日-星新一" class="headerlink" title="读者2019 十二月上 [日]星新一"></a><em>读者2019 十二月上 [日]星新一</em></h6><p>警告过度智能化会导致人与人之间的冷漠</p>
<h2 id="格列佛游记"><a href="#格列佛游记" class="headerlink" title="格列佛游记"></a>格列佛游记</h2><h6 id="无法反驳的讽刺怎样养成"><a href="#无法反驳的讽刺怎样养成" class="headerlink" title="无法反驳的讽刺怎样养成"></a><em>无法反驳的讽刺怎样养成</em></h6><p>在巨人国游记中，作者借巨人之口对一切他想批判的东西发表不遗余力的批判，而在书中具有自我性质的“我”则站在和现实中的作者不同的一边，为这些事情竭力辩护；然而这样的辩护又充斥着无力感——这由人物体型大小的设计决定。在这里，正义好像化身为顶天立地的巨人，让那些小人的无力、邪恶、软弱充分暴露。</p>
<p>最巧妙的地方在于，书中的“我”经历了这些最终的论断是：“如果把生活在这么偏远地方的一位君王的善恶观提出来作为全人类的标准，那真是叫人难以忍受了。”作者明明站在巨人的一边，但在书中又化身为“我”，处处有刺，让反驳的人无从下口。</p>
]]></content>
      <categories>
        <category>Artical</category>
      </categories>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/02/26/test/</url>
    <content><![CDATA[<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3>]]></content>
  </entry>
  <entry>
    <title>[SOJ840]小γ的使命</title>
    <url>/2020/02/26/%5BSOJ840%5D%E5%B0%8F%CE%B3%E7%9A%84%E4%BD%BF%E5%91%BD/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="a5939291d35e39279fd4c67c656558599ddef0e2d592875fd0bd35eb65aac124"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>线段树</tag>
        <tag>向量</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title>[ARC080F]Prime Flip</title>
    <url>/2020/02/25/%5BARC080F%5DPrime%20Flip/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出01序列，其中1的个数不超过100</p>
<p>每次翻转长度为奇质数的序列</p>
<p>问最小的步数使得序列全为0</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先差分，所有为1的位置两两匹配</p>
<p>由于长度只能为奇数，按照位置的奇偶分类，二分图匹配</p>
<p>一开始只连质数的边（奇质数1步），剩下的奇偶性相同偶数2步，再剩下的奇偶性不同要3步</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>没必要写最小费用最大流的好吧</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxP = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p; <span class="keyword">bool</span> isp[maxP + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install</span><span class="params">()</span></span>&#123;</span><br><span class="line">	isp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxP; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (!isp[i]) p.push_back(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.size() &amp;&amp; i * p[j] &lt;= maxP; j++)&#123;</span><br><span class="line">			isp[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn * maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mat[maxn]; <span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (mat[v] == <span class="number">-1</span> || dfs(mat[v]))&#123;</span><br><span class="line">			mat[v] = cur; mat[cur] = v;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; x[<span class="number">2</span>]; <span class="keyword">int</span> n, c[maxP + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	install();</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a); c[a]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxP + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (c[i] != c[i - <span class="number">1</span>]) x[i &amp; <span class="number">1</span>].push_back(i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x[<span class="number">0</span>].size(); i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x[<span class="number">1</span>].size(); j++)</span><br><span class="line">			<span class="keyword">if</span> (!isp[<span class="built_in">abs</span>(x[<span class="number">1</span>][j] - x[<span class="number">0</span>][i])]) addedge(i, j + x[<span class="number">0</span>].size());</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(mat, <span class="number">-1</span>, <span class="keyword">sizeof</span> mat);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x[<span class="number">0</span>].size() + x[<span class="number">1</span>].size(); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (mat[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">			flow += dfs(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, flow + (x[<span class="number">0</span>].size() - flow) / <span class="number">2</span> * <span class="number">2</span> + (x[<span class="number">1</span>].size() - flow) / <span class="number">2</span> * <span class="number">2</span> + (x[<span class="number">0</span>].size() - flow) % <span class="number">2</span> * <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>差分</tag>
        <tag>线性筛</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>[国家集训队]人员雇佣</title>
    <url>/2020/02/24/%5B%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F%5D%E4%BA%BA%E5%91%98%E9%9B%87%E4%BD%A3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有n个人，每个人都可以选择雇佣或不雇佣，雇佣需要$\{A_i\}$</p>
<p>如果两个人都被雇佣则会产生$E_{i,j}$的贡献，若只有一人被雇佣则产生$-E_{i,j}$的贡献</p>
<p>问最大收益</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>$<S,x,A_x>,<i,j,E_{i,j}>,<x,T,\sum E_x>$</p>
<p>最小割模型，一个人要不付给他钱要不放弃收益</p>
<p>当且仅当其中一人被雇佣，中间的边要割</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt; LL f;</span><br><span class="line">&#125;e[maxn * maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[e[i].to] == <span class="number">0</span>)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (dep[T] != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, LL Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	LL flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to; now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			LL tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			e[i].f -= tmp; e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">			<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line">LL maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs()) maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n; LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">		ins(S, i, a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		LL s = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> e, j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;e); ans += e; s += e;</span><br><span class="line">			ins(i, j, e * <span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		ins(i, T, s);</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans - maxflow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>国家集训队</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>[十二省联考2019]异或粽子</title>
    <url>/2020/02/20/%5B%E5%8D%81%E4%BA%8C%E7%9C%81%E8%81%94%E8%80%832019%5D%E5%BC%82%E6%88%96%E7%B2%BD%E5%AD%90/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求序列$\{a_i\}$中连续异或和的前k大的和</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>前缀和，每次在堆里找最大的分裂</p>
<p>用可持久化Trie维护</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>Trie边界没弄好，写挂了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> son[<span class="number">2</span>], v, tim;</span><br><span class="line">		A()&#123;</span><br><span class="line">			tim = <span class="number">-1</span>;</span><br><span class="line">			v = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;a[maxn * <span class="number">50</span>];</span><br><span class="line">	<span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL x, <span class="keyword">int</span> dep, <span class="keyword">int</span> tim)</span></span>&#123;</span><br><span class="line">		a[v] = a[u]; a[v].v++;</span><br><span class="line">		<span class="keyword">if</span> (dep &lt; <span class="number">0</span>)&#123; a[v].tim = tim; <span class="keyword">return</span>; &#125;</span><br><span class="line">		<span class="keyword">int</span> d = (x &gt;&gt; (<span class="number">1l</span>l * dep)) &amp; <span class="number">1l</span>l;</span><br><span class="line">		insert(a[u].son[d], a[v].son[d] = ++tot, x, dep - <span class="number">1</span>, tim);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dep, LL x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (dep &lt; <span class="number">0</span>) <span class="keyword">return</span> a[v].tim;</span><br><span class="line">		<span class="keyword">int</span> d = (x &gt;&gt; (<span class="number">1l</span>l * dep)) &amp; <span class="number">1l</span>l;</span><br><span class="line">		<span class="keyword">if</span> (a[a[v].son[d ^ <span class="number">1</span>]].v - a[a[u].son[d ^ <span class="number">1</span>]].v != <span class="number">0</span>) <span class="keyword">return</span> find(a[u].son[d ^ <span class="number">1</span>], a[v].son[d ^ <span class="number">1</span>], dep - <span class="number">1</span>, x);</span><br><span class="line">		<span class="keyword">return</span> find(a[u].son[d], a[v].son[d], dep - <span class="number">1</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t; <span class="keyword">int</span> rt[maxn];</span><br><span class="line"><span class="keyword">int</span> n, k; LL a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> s, l, r, pos;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(A x)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (a[s] ^ a[pos]) &lt; (a[x.s] ^ a[x.pos]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;; priority_queue &lt;A&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("17.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k); t.insert(<span class="number">0</span>, rt[<span class="number">0</span>] = ++t.tot, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i); a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line">		t.insert(rt[i - <span class="number">1</span>], rt[i] = ++t.tot, a[i], <span class="number">32</span>, i);</span><br><span class="line">	&#125; LL res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		q.push(A&#123;i - <span class="number">1</span>, i, n, t.find(rt[i - <span class="number">1</span>], rt[n], <span class="number">32</span>, a[i - <span class="number">1</span>])&#125;);</span><br><span class="line">	<span class="keyword">while</span> (k--)&#123;</span><br><span class="line">		A now = q.top(); q.pop();</span><br><span class="line">		res += (a[now.s] ^ a[now.pos]);</span><br><span class="line">		<span class="keyword">if</span> (now.l &lt; now.pos) q.push(A&#123;now.s, now.l, now.pos - <span class="number">1</span>, t.find(rt[now.l - <span class="number">1</span>], rt[now.pos - <span class="number">1</span>], <span class="number">32</span>, a[now.s])&#125;);</span><br><span class="line">		<span class="keyword">if</span> (now.pos &lt; now.r) q.push(A&#123;now.s, now.pos + <span class="number">1</span>, now.r, t.find(rt[now.pos], rt[now.r], <span class="number">32</span>, a[now.s])&#125;);</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>十二省联考</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>堆</tag>
        <tag>可持久化</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]可持久化Trie</title>
    <url>/2020/02/20/%5B%E6%A8%A1%E6%9D%BF%5D%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96Trie/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于序列$\{a_i\}$，支持以下操作：</p>
<p>1.在序列后添加一个数$x$</p>
<p>2.给出$l,r,x$，求出一个$p\in[l,r]$，使得$\oplus_{p\leq i\leq n} a_i\space xor\space x$最大</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>前缀和，求$a_{l-2}$到$a_{r-1}$异或$x\space xor\space a_{cnt}$的max</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>边界条件没弄好，要先从a[u]继承</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> son[<span class="number">2</span>], v, tim;</span><br><span class="line">		A()&#123;tim = <span class="number">-1</span>; v = <span class="number">0</span>;&#125;</span><br><span class="line">	&#125;a[maxn * <span class="number">30</span>]; <span class="keyword">int</span> tot = <span class="number">0</span>; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> x, <span class="keyword">int</span> dep, <span class="keyword">int</span> tim)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (dep == <span class="number">0</span>)&#123;</span><br><span class="line">			a[v].v = a[u].v + <span class="number">1</span>;</span><br><span class="line">			a[v].tim = tim;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[v] = a[u]; a[v].v++;</span><br><span class="line">		<span class="keyword">int</span> d = (x &gt;&gt; (dep - <span class="number">1</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">		insert(a[u].son[d], a[v].son[d] = ++tot, x, dep - <span class="number">1</span>, tim);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> dep, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[v].tim != <span class="number">-1</span>) <span class="keyword">return</span> a[v].tim;</span><br><span class="line">		<span class="keyword">int</span> d = (x &gt;&gt; (dep - <span class="number">1</span>)) &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[a[v].son[d ^ <span class="number">1</span>]].v - a[a[u].son[d ^ <span class="number">1</span>]].v != <span class="number">0</span>) <span class="keyword">return</span> find(a[u].son[d ^ <span class="number">1</span>], a[v].son[d ^ <span class="number">1</span>], dep - <span class="number">1</span>, x);</span><br><span class="line">		<span class="keyword">return</span> find(a[u].son[d], a[v].son[d], dep - <span class="number">1</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="keyword">int</span> a[maxn], rt[maxn], n, Q, cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q); t.insert(<span class="number">0</span>, rt[<span class="number">0</span>] = ++t.tot, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i); a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line">		t.insert(rt[i - <span class="number">1</span>], rt[i] = ++t.tot, a[i], <span class="number">20</span>, i);</span><br><span class="line">	&#125; cnt = n;</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">char</span> opt[<span class="number">5</span>]; <span class="keyword">int</span> l, r, x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, opt);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">			t.insert(rt[cnt], rt[cnt + <span class="number">1</span>] = ++t.tot, x, <span class="number">20</span>, cnt + <span class="number">1</span>);</span><br><span class="line">			a[cnt + <span class="number">1</span>] = x ^ a[cnt]; ++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">			<span class="keyword">int</span> pos = t.find(rt[min(<span class="number">0</span>, l - <span class="number">2</span>)], rt[r - <span class="number">1</span>], <span class="number">20</span>, x ^ a[cnt]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (a[pos] ^ x ^ a[cnt]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>可持久化</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC005D]K Perm Counting</title>
    <url>/2020/02/17/%5BAGC005D%5DK%20Perm%20Counting/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求所有n阶排列中，满足$\forall |i-a_i|\not=k$的排列数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>转变为容斥问题，可以发现题目等价于二分图</p>
<p>现在要解决的就是二分图匹大小为$k$的方案数</p>
<p>猛然发现二分图由一些链构成，那么每条链分开来Dp，最后再卷积合并即可</p>
<p><strong>插播，可以不Dp，就是$C_{i-j}^{j}$，把j个点先取出来再接回去​</strong></p>
<p>$ans=\sum_{i=0}^{n} (-1)^{i}\cdot g(i)\cdot (n-i)!​$</p>
<p>FFT什么的就懒得写了</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>算ans的时候没加mo导致爆负</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">924844033</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn][<span class="number">2</span>], g[<span class="number">2</span>][maxn], n, k;</span><br><span class="line"><span class="keyword">int</span> fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k); fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mo;</span><br><span class="line">	f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / k; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i / <span class="number">2</span>; j++)&#123;</span><br><span class="line">			f[i + <span class="number">1</span>][j][<span class="number">0</span>] = (f[i][j][<span class="number">1</span>] + f[i][j][<span class="number">0</span>]) % mo;</span><br><span class="line">			f[i + <span class="number">1</span>][j + <span class="number">1</span>][<span class="number">1</span>] = f[i][j][<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; g[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//	printf("%d\n", (f[n / k + 1][5][0] + f[n / k + 1][5][1]));</span></span><br><span class="line">	<span class="keyword">int</span> T = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s &lt;= k; s++)&#123;</span><br><span class="line">		<span class="keyword">int</span> len = (n - s) / k + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= len / <span class="number">2</span>; j++)</span><br><span class="line">				g[T ^ <span class="number">1</span>][i + j] = (g[T ^ <span class="number">1</span>][i + j] + <span class="number">1l</span>l * g[T][i] * (f[len][j][<span class="number">0</span>] + f[len][j][<span class="number">1</span>]) % mo) % mo;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++) g[T][i] = <span class="number">0</span>; T ^= <span class="number">1</span>;</span><br><span class="line">		cnt += len / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= len / <span class="number">2</span>; j++)</span><br><span class="line">				g[T ^ <span class="number">1</span>][i + j] = (g[T ^ <span class="number">1</span>][i + j] + <span class="number">1l</span>l * g[T][i] * (f[len][j][<span class="number">0</span>] + f[len][j][<span class="number">1</span>]) % mo) % mo;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++) g[T][i] = <span class="number">0</span>; T ^= <span class="number">1</span>;</span><br><span class="line">		cnt += len / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		ans = (ans + mo + ((i &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>) * <span class="number">1l</span>l * g[T][i] % mo * fac[n - i] % mo) % mo;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC002F]Leftmost Ball</title>
    <url>/2020/02/14/%5BAGC002F%5DLeftmost%20Ball/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$n$种颜色每种各$k$个球排列，每种颜色最左边的球染成白色，问不同颜色序列数</p>
<p>$n,k\leq 2000$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题目的idea就是把每种颜色的后k-1个球一起算</p>
<p>令$f_{i,j}$为已经出现了i种颜色，有j个白球的方案，容易知道$i\leq j$</p>
<p>下一个放白球：$f_{i,j}+=f_{i,j-1}$</p>
<p>下一个放别的颜色：$f_{i,j}+=f_{i-1,j}\cdot (n-i+1)\cdot S​$</p>
<p>我们来看在$f_{i-1,j}$的时候后面还有几个位置：$n\cdot k-(i-1)\cdot (k-1)-j$,那么$S=C_{pos-1}^{k-1}$</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>算位置i没-1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL f[<span class="number">2005</span>][<span class="number">2005</span>], fac[maxn], inv[maxn];</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span> || m == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n] * inv[n - m] % mo * inv[m] % mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	LL res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % mo;</span><br><span class="line">		x = x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, k; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * k; i++) fac[i] = fac[i - <span class="number">1</span>] * i % mo;</span><br><span class="line">	inv[n * k] = <span class="built_in">pow</span>(fac[n * k], mo - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n * k - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mo;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) f[i][j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (j != <span class="number">0</span>) f[i][j] = (f[i][j] + f[i][j - <span class="number">1</span>]) % mo;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span>) f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j] * (n - i + <span class="number">1</span>) % mo * C(n * k - (i - <span class="number">1</span>) * (k - <span class="number">1</span>) - j - <span class="number">1</span>, k - <span class="number">2</span>) % mo) % mo;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n][n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC002E]Candy Piles</title>
    <url>/2020/02/13/%5BAGC002E%5DCandy%20Piles/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n$堆糖果$\{a_i\}$，每次可以吃掉一颗或者把最多的一堆吃完，问先手的胜负</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>把糖果排列成这样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100000000000</span><br><span class="line">111000000000</span><br><span class="line">001100000</span><br><span class="line">0001</span><br><span class="line">000</span><br></pre></td></tr></table></figure></p>
<p>行动被描述为一条折线，往下是吃完一堆，往右是吃一颗</p>
<p>然后会发现左上-右下对角线上胜负态相同</p>
<p>找到对角线上离边界最近的，若与其中一条边界相距距离为奇数则必胜</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">	sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &gt; a[i + <span class="number">1</span>])&#123;</span><br><span class="line">			<span class="keyword">int</span> ans = <span class="number">0</span>, j = i;</span><br><span class="line">			<span class="keyword">while</span> (a[j + <span class="number">1</span>] == i) ++j;</span><br><span class="line">			ans = ((a[i] - i) &amp; <span class="number">1</span>) | ((j - i) &amp; <span class="number">1</span>); </span><br><span class="line">			<span class="keyword">if</span> (ans) <span class="built_in">puts</span>(<span class="string">"First"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Second"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>博弈论</tag>
        <tag>杨氏图</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC002D]Stamp Rally</title>
    <url>/2020/02/13/%5BAGC002D%5DStamp%20Rally/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在无向图中，Q次询问从x,y出发到达恰好z个点经过的边编号的最大值的Min</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最大值最小，显然二分</p>
<p>分开二分太慢了，我们就一起二分</p>
<p>用堆会有两个log，过不去</p>
<p>可以在push的时候保证有序，同一深度的从左到右处理</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>开始用堆T掉</p>
<p>ask里面可能有些询问先退出，因此不能用askl确定位置</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Q, u[maxn], v[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn], sz[maxn], x[maxn], y[maxn], z[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> f[x] == x ? x : f[x] = getf(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum[maxn], ans[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l, r, askl, askr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span> &lt;A&gt; vec[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ask[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> sz[getf(x[id])] + (getf(x[id]) != getf(y[id])) * sz[getf(y[id])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, u + i, v + i);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, x + i, y + i, z + i);</span><br><span class="line">		ans[i] = INF; ask[<span class="number">0</span>].push_back(i);</span><br><span class="line">	&#125; vec[<span class="number">0</span>].push_back(A&#123;<span class="number">1</span>, m, <span class="number">0</span>, Q&#125;);</span><br><span class="line">	<span class="keyword">int</span> now, D = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!vec[D].empty())&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = i, sz[i] = <span class="number">1</span>; now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[D].size(); j++)&#123;</span><br><span class="line">			A cur = vec[D][j]; <span class="keyword">int</span> mid = cur.l + cur.r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (cur.l == cur.r)&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = cur.askl; i &lt; cur.askr; i++)&#123;</span><br><span class="line"><span class="comment">//					if (mid == 5) printf("!%d\n", ask[D][i]);</span></span><br><span class="line">					ans[ask[D][i]] = min(ans[ask[D][i]], cur.l);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = now + <span class="number">1</span>; i &lt;= mid; i++)&#123;</span><br><span class="line">				<span class="keyword">if</span> (sz[u[i]] &gt; sz[v[i]]) swap(u[i], v[i]); </span><br><span class="line">				<span class="keyword">if</span> (getf(u[i]) != getf(v[i]))</span><br><span class="line">					sz[getf(v[i])] += sz[getf(u[i])],</span><br><span class="line">					f[getf(u[i])] = getf(v[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			now = mid;</span><br><span class="line">			<span class="keyword">int</span> cnt[<span class="number">2</span>]; cnt[<span class="number">0</span>] = <span class="number">0</span>, cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = cur.askl; i &lt; cur.askr; i++)</span><br><span class="line">				<span class="keyword">if</span> (calc(ask[D][i]) &gt;= z[ask[D][i]])&#123;</span><br><span class="line">					ask[D ^ <span class="number">1</span>].push_back(ask[D][i]), ++cnt[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//					if (ask[D][i] == 5) puts("(1)");</span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span> (cnt[<span class="number">0</span>] &gt; <span class="number">0</span>) vec[D ^ <span class="number">1</span>].push_back(A&#123;cur.l, mid, ask[D ^ <span class="number">1</span>].size() - cnt[<span class="number">0</span>], ask[D ^ <span class="number">1</span>].size()&#125;);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = cur.askl; i &lt; cur.askr; i++)</span><br><span class="line">				<span class="keyword">if</span> (calc(ask[D][i]) &lt; z[ask[D][i]])&#123;</span><br><span class="line">					ask[D ^ <span class="number">1</span>].push_back(ask[D][i]), ++cnt[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//					if (ask[D][i] == 5) puts("(2)"), printf("(())%d\n", ask[D ^ 1].size());</span></span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span> (cnt[<span class="number">1</span>] &gt; <span class="number">0</span>) vec[D ^ <span class="number">1</span>].push_back(A&#123;mid + <span class="number">1</span>, cur.r, ask[D ^ <span class="number">1</span>].size() - cnt[<span class="number">1</span>], ask[D ^ <span class="number">1</span>].size()&#125;); </span><br><span class="line">		&#125;</span><br><span class="line">		vec[D].clear(); ask[D].clear(); D ^= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
        <tag>idea</tag>
        <tag>整体二分</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC003F]Fraction of Fractal</title>
    <url>/2020/02/12/%5BAGC003F%5DFraction%20of%20Fractal/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出n*m的网格，求其k级分形后的联通快个数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>神仙题</p>
<p>发现分形之后连通性与上下左右重复的黑块个数有关，设为$cnt_{0/1}$，设原网格中黑格有$v$个</p>
<p>如果两个都大于0，那么答案就是1；如果两个都是0，那么答案就是$v^{k-1}$</p>
<p>若只有其中一个大于0，设其为$cnt$，对应方向上相邻的黑格对数为$lnk$</p>
<p>把整个原网格看做一个点，最终看成一个图，那么这个图一定由一些同方向的链构成，$ans=|V|-|E|$</p>
<p>递推式</p>
<script type="math/tex; mode=display">
\begin{align}
&V_k=V_{k-1}\cdot v, V_1 = 1\\
&E_k=E_{k-1}\cdot v（大方块之间） + V^{k-1}\cdot lnk(大方块内部), E_1 = 0
\end{align}</script><p>手动求通项即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> LL mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, cnt[<span class="number">2</span>], lnk[<span class="number">2</span>], V;</span><br><span class="line"><span class="keyword">char</span> str[maxn][maxn]; LL k;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x, LL t)</span></span>&#123;</span><br><span class="line">	LL res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = res * x % mo;</span><br><span class="line">		x = x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (str[i][<span class="number">1</span>] == <span class="string">'#'</span> &amp;&amp; str[i][m] == <span class="string">'#'</span>) cnt[<span class="number">0</span>]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		<span class="keyword">if</span> (str[<span class="number">1</span>][j] == <span class="string">'#'</span> &amp;&amp; str[n][j] == <span class="string">'#'</span>) cnt[<span class="number">1</span>]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			V += (str[i][j] == <span class="string">'#'</span>); </span><br><span class="line">			<span class="keyword">if</span> (str[i][j] == <span class="string">'#'</span> &amp;&amp; str[i][j + <span class="number">1</span>] == <span class="string">'#'</span>) lnk[<span class="number">0</span>]++;</span><br><span class="line">			<span class="keyword">if</span> (str[i][j] == <span class="string">'#'</span> &amp;&amp; str[i + <span class="number">1</span>][j] == <span class="string">'#'</span>) lnk[<span class="number">1</span>]++;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt[<span class="number">0</span>] == <span class="number">0</span> &amp;&amp; cnt[<span class="number">1</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="built_in">pow</span>(V, k - <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt[<span class="number">0</span>] &gt; <span class="number">0</span> &amp;&amp; cnt[<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt[<span class="number">0</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		LL ans = <span class="built_in">pow</span>(V, k - <span class="number">1</span>) - <span class="number">1l</span>l * lnk[<span class="number">0</span>] * (<span class="built_in">pow</span>(V, k - <span class="number">1</span>) - <span class="built_in">pow</span>(cnt[<span class="number">0</span>], k - <span class="number">1</span>)) % mo * <span class="built_in">pow</span>(V - cnt[<span class="number">0</span>], mo - <span class="number">2</span>) % mo;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans + mo) % mo);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt[<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		LL ans = <span class="built_in">pow</span>(V, k - <span class="number">1</span>) - <span class="number">1l</span>l * lnk[<span class="number">1</span>] * (<span class="built_in">pow</span>(V, k - <span class="number">1</span>) - <span class="built_in">pow</span>(cnt[<span class="number">1</span>], k - <span class="number">1</span>)) % mo * <span class="built_in">pow</span>(V - cnt[<span class="number">1</span>], mo - <span class="number">2</span>) % mo;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans + mo) % mo);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>数学</tag>
        <tag>线性递推</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC003E]Sequential operations on Sequence</title>
    <url>/2020/02/12/%5BAGC003E%5DSequential%20operations%20on%20Sequence/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>把序列S无限次复制，再取前$q_i$位，形成新的S</p>
<p>如此操作Q次，原序列是1~n，问最终每种数字在序列中出现的次数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑倒回去操作，$k_i​$表示第i次操作后的序列在最终序列中的完整出现次数</p>
<p>k很好维护，考虑维护每次操作多余的部分，分散到之前的序列的k上，长度小的序列一定是它的前缀</p>
<p>当长度小于n的时候直接差分加答案即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>work里没用LL</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>; </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL a[maxn], k[maxn], res[maxn]; <span class="keyword">int</span> n, Q, cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL x, LL v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt;= a[<span class="number">1</span>])&#123;</span><br><span class="line">		res[<span class="number">1</span>] += v;</span><br><span class="line">		res[x + <span class="number">1</span>] -= v;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> t = upper_bound(a + <span class="number">1</span>, a + cnt + <span class="number">1</span>, x) - a;</span><br><span class="line">	k[t - <span class="number">1</span>] += v * (x / a[t - <span class="number">1</span>]);</span><br><span class="line">	work(x % a[t - <span class="number">1</span>], v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">	a[cnt = <span class="number">1</span>] = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">		LL x; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</span><br><span class="line">		<span class="keyword">while</span> (cnt &gt; <span class="number">0</span> &amp;&amp; a[cnt] &gt;= x) cnt--;</span><br><span class="line">		a[++cnt] = x;</span><br><span class="line">	&#125;</span><br><span class="line">	k[cnt] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt; i &gt;= <span class="number">2</span>; i--)&#123;</span><br><span class="line">		k[i - <span class="number">1</span>] += k[i] * (a[i] / a[i - <span class="number">1</span>]);</span><br><span class="line">		work(a[i] % a[i - <span class="number">1</span>], k[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	res[<span class="number">0</span>] = k[<span class="number">1</span>];</span><br><span class="line">	res[a[<span class="number">1</span>] + <span class="number">1</span>] -= k[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		res[i] += res[i - <span class="number">1</span>];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld "</span>, res[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC003D]Anticube</title>
    <url>/2020/02/08/%5BAGC003D%5DAnticube/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n$个数中选出$Max$个数，使得它们任意两个相乘不为立方数</p>
<p>求$Max$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>在本题中，$a_i=p_1^{k_1}\cdots p_x^{k_x}$和$a_i=p_1^{k_1\space mod\space 3}\cdots p_x^{k_x\space mod\space 3}$等价</p>
<p>令$b_i=\frac{p_1^{3}\cdots p_x^3}{a_i}$</p>
<p>发现冲突一定是互相的，当有冲突，取较多的，本身是立方数的分开考虑</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxP = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL a[maxn], b[maxn]; <span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">map</span> &lt;LL, <span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="built_in">vector</span> &lt;LL&gt; p;</span><br><span class="line"><span class="keyword">bool</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxP; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (!f[i]) p.push_back(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.size() &amp;&amp; i * p[j] &lt;= maxP; j++)&#123;</span><br><span class="line">			f[i * p[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">split</span><span class="params">(LL &amp;x)</span></span>&#123;</span><br><span class="line">	LL res1 = <span class="number">1</span>, res2 = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.size(); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (x % p[i] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (x % p[i] == <span class="number">0</span>) ++cnt, x /= p[i];</span><br><span class="line">		cnt %= <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">2</span>) res1 = res1 * p[i] * p[i], res2 = res2 * p[i];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>) res1 = res1 * p[i], res2 = res2 * p[i] * p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x != <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ((LL)<span class="built_in">sqrt</span>(x) * (LL)<span class="built_in">sqrt</span>(x) == x) res1 *= x, res2 *= (LL)<span class="built_in">sqrt</span>(x);</span><br><span class="line">		<span class="keyword">else</span> res1 *= x, res2 *= x * x;</span><br><span class="line">	&#125;</span><br><span class="line">	x = res1;</span><br><span class="line">	<span class="keyword">return</span> res2;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); install();</span><br><span class="line"><span class="comment">//	for (int i = 0; i &lt; 20; i++) printf("%d\n", p[i]);</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">		b[i] = split(a[i]);</span><br><span class="line">		m[a[i]]++;</span><br><span class="line">	&#125; <span class="keyword">int</span> ans = (m[<span class="number">1</span>] != <span class="number">0</span>); m[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (m[b[i]] != <span class="number">0</span>) ans += max(m[a[i]], m[b[i]]), m[a[i]] = <span class="number">0</span>, m[b[i]] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> ans += m[a[i]], m[a[i]] = <span class="number">0</span>;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC004F]Namori</title>
    <url>/2020/02/08/%5BAGC004F%5DNamori/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树或基环树，开始每个节点都是白色</p>
<p>每次可以选择相连的颜色相同的节点反转颜色，求最小次数，使得节点全黑</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑树，分深度奇偶考虑，等价地认为深度奇数上有一个球，偶数上有一个洞</p>
<p>令那么$s_u$为子树中球/洞的个数，那么$ans=\sum|s_i|$，若根节点s不为0则无解</p>
<p>对于基环树，把一条边放到最后考虑，顺序没关系，随便断开一条边</p>
<p>对于奇环，两个点深度奇偶相同，一起变颜色可以多出两个球/洞</p>
<p>对于偶环，两个点深度就不同，深度小的一个点$(设为cv)$可以把球给另外一个点，绕一圈再回来还给它，那么环上的点(cv除外)可以加或减同一个数，要使$\sum |s_i-k|$最小，显然k是这些数的中位数时最优</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>sf变量混淆</p>
<p>(dep[cu]-dep[cv])%2没加括号</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s[maxn], dep[maxn], f[maxn]; <span class="keyword">int</span> cu, cv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	f[cur] = fa;</span><br><span class="line">	<span class="keyword">if</span> (dep[cur] &amp; <span class="number">1</span>) s[cur] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> s[cur] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">			<span class="keyword">if</span> (dep[v])&#123;</span><br><span class="line">				<span class="keyword">if</span> (cu == <span class="number">0</span>) cu = cur, cv = v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> dfs(v, cur), s[cur] += s[v];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">1</span>] != <span class="number">0</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans += <span class="built_in">abs</span>(s[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">1</span>] % <span class="number">2</span> != <span class="number">0</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">	<span class="keyword">int</span> t = -s[<span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="built_in">abs</span>(t);</span><br><span class="line">	<span class="keyword">for</span> (; cu; cu = f[cu]) s[cu] += t;</span><br><span class="line">	<span class="keyword">for</span> (; cv; cv = f[cv]) s[cv] += t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans += <span class="built_in">abs</span>(s[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work3</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">1</span>] != <span class="number">0</span>)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">	<span class="keyword">for</span> (; cu != cv; cu = f[cu]) dep[cu] = <span class="number">0</span>, v.push_back(s[cu]);</span><br><span class="line">	sort(v.begin(), v.end());</span><br><span class="line">	<span class="keyword">int</span> mid = v[(v.size() - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="built_in">abs</span>(mid);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (dep[i] != <span class="number">0</span>) ans += <span class="built_in">abs</span>(s[i]);</span><br><span class="line">		<span class="keyword">else</span> ans += <span class="built_in">abs</span>(s[i] - mid);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125; dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (m == n - <span class="number">1</span>) work1();</span><br><span class="line">	<span class="keyword">if</span> ((dep[cu] - dep[cv]) % <span class="number">2</span> == <span class="number">0</span>) work2();</span><br><span class="line">	work3();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC004E]Salvage Robots</title>
    <url>/2020/02/07/%5BAGC004E%5DSalvage%20Robots/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>n*m的方阵中有一些机器人和一个出口</p>
<p>命令所有机器人向同一个方向移动，出界则死，进出口则活，问最多就出几个机器人</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>转化为整个方阵的行动，如果知道方阵已经向四个方向移动的格数，就可以知道哪些机器人死了</p>
<p>动态规划，每次加一列或者一行</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一开始在想前缀和，但是救活的不一定是一个矩形，很可能是很多个矩形拼起来</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ex, ey; <span class="keyword">char</span> str[maxn][maxn]; </span><br><span class="line"><span class="keyword">short</span> f[maxn][maxn][maxn][maxn], p[maxn][maxn], q[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">max</span><span class="params">(<span class="keyword">short</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> y;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("1.in", "r", stdin);</span></span><br><span class="line"><span class="comment">//	freopen("1.out", "w", stdout);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			p[i][j] = p[i][j - <span class="number">1</span>]; q[i][j] = q[i - <span class="number">1</span>][j];</span><br><span class="line">			<span class="keyword">if</span> (str[i][j] == <span class="string">'E'</span>) ex = i, ey = j;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (str[i][j] == <span class="string">'o'</span>) p[i][j]++, q[i][j]++;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ex - <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= ey - <span class="number">1</span>; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n - ex; x++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= m - ey; y++)&#123;</span><br><span class="line">					<span class="keyword">int</span> L = max(ex - i, x + <span class="number">1</span>), R = min(n - i, ex + x);</span><br><span class="line">					<span class="keyword">if</span> (L &lt;= R)&#123;</span><br><span class="line">						f[i][j + <span class="number">1</span>][x][y] = max(f[i][j + <span class="number">1</span>][x][y], f[i][j][x][y] + (ey - j - <span class="number">1</span> &gt;= y + <span class="number">1</span>) * (q[R][ey - j - <span class="number">1</span>] - q[L - <span class="number">1</span>][ey - j - <span class="number">1</span>]));</span><br><span class="line">						f[i][j][x][y + <span class="number">1</span>] = max(f[i][j][x][y + <span class="number">1</span>], f[i][j][x][y] + (m - j &gt;= ey + y + <span class="number">1</span>) * (q[R][ey + y + <span class="number">1</span>] - q[L - <span class="number">1</span>][ey + y + <span class="number">1</span>]));</span><br><span class="line">					&#125;</span><br><span class="line">					L = max(ey - j, y + <span class="number">1</span>), R = min(m - j, ey + y);</span><br><span class="line">					<span class="keyword">if</span> (L &lt;= R)&#123;</span><br><span class="line">						f[i + <span class="number">1</span>][j][x][y] = max(f[i + <span class="number">1</span>][j][x][y], f[i][j][x][y] + (ex - i - <span class="number">1</span> &gt;= x + <span class="number">1</span>) * (p[ex - i - <span class="number">1</span>][R] - p[ex - i - <span class="number">1</span>][L - <span class="number">1</span>]));</span><br><span class="line">						f[i][j][x + <span class="number">1</span>][y] = max(f[i][j][x + <span class="number">1</span>][y], f[i][j][x][y] + (n - i &gt;= ex + x + <span class="number">1</span>) * (p[ex + x + <span class="number">1</span>][R] - p[ex + x + <span class="number">1</span>][L - <span class="number">1</span>]));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[ex - <span class="number">1</span>][ey - <span class="number">1</span>][n - ex][m - ey]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>动态规划Dp</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC004D]Teleporter</title>
    <url>/2020/02/05/%5BAGC004D%5DTeleporter/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每个点有一条出边，保证所有点都能到1</p>
<p>修改Min条边的终点，使得每个点都存在到1的长度为$k$的路径</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>1必须连1自己</p>
<p>自下而上dep到k的时候就挂到1上</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>挂上去的时候dep=-1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn], dep[maxn], n, k, ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		dfs(v, cur);</span><br><span class="line">		dep[cur] = max(dep[cur], dep[v] + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (fa != <span class="number">1</span> &amp;&amp; dep[cur] == k - <span class="number">1</span> &amp;&amp; cur != <span class="number">1</span>) dep[cur] = <span class="number">-1</span>, ++ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, a + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] != <span class="number">1</span>) a[<span class="number">1</span>] = <span class="number">1</span>, ++ans;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">		addedge(a[i], i);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[Artical]Dilworth定理</title>
    <url>/2020/02/04/%5BArtical%5DDilworth%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h3 id="关于Dilworth定理的证明"><a href="#关于Dilworth定理的证明" class="headerlink" title="关于Dilworth定理的证明"></a>关于Dilworth定理的证明</h3><p>Dilworth定理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于一个DAG而言，最小链覆盖的数量=最长反链的长度</span><br></pre></td></tr></table></figure></p>
<p>设$G=(V,E)$，最长反链长度=$k$，$|V|=n$</p>
<p>设最小链覆盖中划分为$S_C=\{C_1\dots C_k\}$这k条互不相交的链，$C_i$中的元素为$\{a_{i,j}\}​$</p>
<p>设最长反链有$r​$条为$S_A=\{A_1\dots A_r\}​$，且$A_i​$中的元素为$\{b_{i,j}\}​$</p>
<h4 id="第一步，证明-k-leq-S-C"><a href="#第一步，证明-k-leq-S-C" class="headerlink" title="第一步，证明$k\leq|S_C|$"></a>第一步，证明$k\leq|S_C|$</h4><p>根据最小链覆盖的性质，$\forall_{C_i\in S_C,C_j\in S_C,i\not =j},存在 a_{i,x}与a_{j,y}不可比(*)$，不然这两条链完全可以合并，不符合最小链覆盖的定义</p>
<p>如果$k&gt;|S_C|​$，那么根据抽屉原理，总会有两个一条反链中的元素处在同一条链中，二者可比，与假设不符</p>
<p>因此$k\leq|S_C|$</p>
<h4 id="第二步，证明-k-S-C"><a href="#第二步，证明-k-S-C" class="headerlink" title="第二步，证明$k= |S_C|$"></a>第二步，证明$k= |S_C|$</h4><p>(1)当$|V|=0​$和$|V|=1​$的时候命题显然成立；</p>
<p>(2)设当$|V|&lt;n$时命题均成立；</p>
<p>(3)只需证明当$|V|=n$时命题成立即可</p>
<p>由于$G$是DAG，那么一定有一个极大元，设为$X$；考虑$G’=G-X​$，其他定义同上</p>
<h5 id="3-1-证明-S-C’-leq-S-C-leq-S-C’-1"><a href="#3-1-证明-S-C’-leq-S-C-leq-S-C’-1" class="headerlink" title="3.1 证明$|S_C’|\leq |S_C|\leq |S_C’|+1$"></a>3.1 证明$|S_C’|\leq |S_C|\leq |S_C’|+1$</h5><p>显然，$|S_C|\geq |S_C’|$，由于$X$是极大元，不可能把两条链合并；</p>
<p>并且$|S_C|\leq |S_C’|+1$，把$X$单独成链，就是一种一定可行构造方案，其他的方案均不是最小</p>
<h5 id="3-2-证明当-V-n-命题成立"><a href="#3-2-证明当-V-n-命题成立" class="headerlink" title="3.2 证明当$|V|=n$命题成立"></a>3.2 证明当$|V|=n$命题成立</h5><p>令$B=\{maxC’_1,maxC’_2,\dots,maxC’_{k’}\}$，$B$一定是反链，若其中两个元素可比，则与(*)相悖</p>
<p>1‘ 如果$B​$中的元素和$X​$都不可比，那么$k=k’+1​$，又因为$k=k’+1=|S_C’|+1\leq|S_C|,|S_C|\leq |S_C’|+1​$，故$|S_C|=|S’_C|+1​$，$|S_C| =k​$成立</p>
<p>2’ 如果$B​$中有元素和$X​$可比，设其中之一为$b_i​$，那么$C’_i\bigcup X​$是一条链，（$b_i​$是max了），$G’-C’_i​$的最小链覆盖变为$k’-1​$，由前文的假设，最长反链也是$k’-1​$</p>
<p><strong>说明</strong>：如果$G’-C’_i$能构造出更小的方案，那么$G’$一定也有更好方案</p>
<p>对于$G $，最小链覆盖由那$k’-1$条链加上$(C’_i\bigcup X)$这条链共$k’ $条链的方案一定可行，又因为$|S_C|\geq |S_C’|=k’$，故$|S_C|=k’​$</p>
<p>原来$G’$中的长度为$k’$的反链仍然成立，又因为$k\leq |S_C|=k’$，这就是$G$中最长的反链，即$k=k’$，此时$|S_C|=k​$也成立</p>
<p>综上，当$|V|=n​$时命题成立</p>
<h4 id="综上，命题成立"><a href="#综上，命题成立" class="headerlink" title="综上，命题成立"></a>综上，命题成立</h4>]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>Artical</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[POI2010]MOS-Bridges</title>
    <url>/2020/02/03/%5BPOI2010%5DMOS-Bridges/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在无向联通图中，每条无向边正向和反向权值不同，将其全部定向，使得存在从1开始的欧拉回路</p>
<p>求该回路上边权最大值的最小值，输出方案</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>二分答案转化为判定性问题</p>
<p>先贪心地定向，按照较小的来，然后调整反向边，使这个图符合度数限制，网络流判定（把度数给别人）</p>
<p>输出方案的时候，同一次遍历中，晚遍历的边晚访问；不同次的遍历中，晚遍历的边早访问</p>
<p>两个deque维护即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>输出方案挂了好几次，一开始没有考虑两种情况</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">2001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">4</span>]; <span class="keyword">int</span> now[maxn], head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (dep[v] == <span class="number">0</span> &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				dep[v] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			flow += tmp;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	maxflow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (bfs()) maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, u[maxn], v[maxn], a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> Min = INF, Max = <span class="number">0</span>, dex[maxn], last[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dex, <span class="number">0</span>, <span class="keyword">sizeof</span> dex);</span><br><span class="line">	tot = <span class="number">1</span>; <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; mid &amp;&amp; b[i] &gt; mid) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &lt;= mid) dex[u[i]]--, dex[v[i]]++;</span><br><span class="line">		<span class="keyword">if</span> (b[i] &lt;= mid) ins(v[i], u[i], <span class="number">1</span>), last[i] = tot - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> last[i] = <span class="number">0</span>;</span><br><span class="line">	&#125; <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (dex[i] &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (dex[i] &gt; <span class="number">0</span>) ins(S, i, dex[i] &gt;&gt; <span class="number">1</span>), sum += dex[i];</span><br><span class="line">		<span class="keyword">else</span> ins(i, T, (-dex[i]) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="keyword">return</span> maxflow == (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> SPJ&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> to, nxt;</span><br><span class="line">	&#125;e[::maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> head[maxn], dex[maxn], tot = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">		head[u] = tot; ++dex[u]; ++dex[v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> vis[maxn];</span><br><span class="line">	<span class="built_in">deque</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v[maxn], t[maxn];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (dex[cur] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">		dex[cur]--;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!vis[i])&#123;</span><br><span class="line">				vis[i] = <span class="number">1</span>; t[cur].push_back(make_pair(i,e[i].to));</span><br><span class="line">				dex[e[i].to]--; dfs(e[i].to);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ::n; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (dex[i] != <span class="number">0</span>) dfs(i);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">while</span> (!t[j].empty())&#123;</span><br><span class="line"><span class="comment">//					if (j == 2) printf("%d\n", t[j].back().first);</span></span><br><span class="line">					v[j].push_front(t[j].back()), t[j].pop_back();</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (!v[cur].empty())&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>, v[cur].front().first); <span class="keyword">int</span> tmp = v[cur].front().second;</span><br><span class="line">			v[cur].pop_front(); cur = tmp;</span><br><span class="line">		&#125; <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, u + i, v + i, a + i, b + i);</span><br><span class="line">		Min = min(Min, min(a[i], b[i])); Max = max(Max, max(a[i], b[i]));</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; b[i]) swap(u[i], v[i]), swap(a[i], b[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> l = Min, r = Max, ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (check(mid))&#123;</span><br><span class="line">			ans = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">memset</span>(SPJ::head, <span class="number">0</span>, <span class="keyword">sizeof</span> SPJ::head); SPJ::tot = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">memset</span>(SPJ::dex, <span class="number">0</span>, <span class="keyword">sizeof</span> SPJ::dex); </span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">				<span class="keyword">if</span> (last[i] != <span class="number">0</span> &amp;&amp; e[last[i]].f == <span class="number">0</span>) SPJ::addedge(v[i], u[i]);</span><br><span class="line">				<span class="keyword">else</span> SPJ::addedge(u[i], v[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"NIE"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">if</span> (ans != <span class="number">-1</span>) SPJ::solve();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">1 2 1 100</span></span><br><span class="line"><span class="comment">2 3 1 100</span></span><br><span class="line"><span class="comment">3 1 1 100</span></span><br><span class="line"><span class="comment">2 4 1 100</span></span><br><span class="line"><span class="comment">4 5 1 100</span></span><br><span class="line"><span class="comment">5 2 1 100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POI</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>图论</tag>
        <tag>网络流</tag>
        <tag>构造</tag>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title>[HNOI2007]紧急疏散</title>
    <url>/2020/02/02/%5BHNOI2007%5D%E7%B4%A7%E6%80%A5%E7%96%8F%E6%95%A3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n*m$的矩阵内有空地、墙和门</p>
<p>初始时空地均站有一人；门一个时刻只能疏散一人；墙不能走</p>
<p>每个时刻人可以往上下左右四个方向动，问最小时间</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>按照时间分层建图</p>
<p>门-&gt;T的边每次流量是1，空地-&gt;门不用控制，相当于在门里等着<strong>升天</strong></p>
<p>枚举答案，直接在残余网络上跑</p>
<p>最坏情况下时间是400，超过就是不可能</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>没加当前弧</p>
<p>数组小了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(i, j) ((i - 1) * m + j)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P ((tim - 1) * N)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">80005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">80001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">4</span>]; <span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>; <span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[e[i].to] == <span class="number">0</span>)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to; now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			flow += tmp;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, N, cnt; <span class="keyword">char</span> g[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("1.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); N = n * m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, g[i] + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (g[i][j] == <span class="string">'.'</span>) ins(S, ID(i, j), <span class="number">1</span>), ++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">int</span> tim = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (++tim)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">'X'</span>) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] != <span class="string">'D'</span>)&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)&#123;</span><br><span class="line">						<span class="keyword">int</span> tx = i + dx[k], ty = j + dy[k];</span><br><span class="line">						<span class="keyword">if</span> (tx &lt; <span class="number">1</span> || tx &gt; n || ty &lt; <span class="number">1</span> || ty &gt; m || g[tx][ty] == <span class="string">'X'</span>) <span class="keyword">continue</span>;</span><br><span class="line">						ins(ID(i, j) + P, ID(tx, ty) + tim * N, INF);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (g[i][j] == <span class="string">'D'</span>) ins(ID(i, j) + tim * N, T, <span class="number">1</span>);</span><br><span class="line">				ins(ID(i, j) + P, ID(i, j) + tim * N, INF);</span><br><span class="line">			&#125;</span><br><span class="line">		Dinic();</span><br><span class="line">		<span class="keyword">if</span> (maxflow == cnt) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (tim &gt; <span class="number">400</span>)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tim);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
        <tag>时间分层</tag>
      </tags>
  </entry>
  <entry>
    <title>[TJOI2015]组合数学</title>
    <url>/2020/02/02/%5BTJOI2015%5D%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n*m$的网格中每个格子有一些财宝，每次从左上向右下行走，经过的时候如果格子中有财宝则可以捡起一个</p>
<p>问最小次数，捡完所有财宝</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果把矩阵看成图，显然是个DAG，答案就是最小链覆盖</p>
<p>考虑<strong><em>Dilworth</em></strong>，最小链覆盖=最长反链</p>
<p>反链一定从左下-&gt;右上，Dp即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>最后要输出Max，可以不经过(1,m)的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T, a[maxn][maxn], n, m;</span><br><span class="line">LL f[maxn][maxn], Max[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + j);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">				f[i][j] = Max[i + <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">				Max[i][j] = max(max(Max[i + <span class="number">1</span>][j], Max[i][j - <span class="number">1</span>]), f[i][j]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Max[<span class="number">1</span>][m]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TJOI</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>动态规划Dp</tag>
        <tag>网络流</tag>
        <tag>Dilworth</tag>
      </tags>
  </entry>
  <entry>
    <title>[BZOJ2406]矩阵</title>
    <url>/2020/02/01/%5BBZOJ2406%5D%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n*m$矩阵$\mathbb{A}$，求$\mathbb{B}$，$b_{i,j}\in[L,R]$，使得$max_{j=1}^{m}\{|\sum_{i=1}^{n}(a_{i,j}-b_{i,j})|\}$和$max_{i=1}^{n}\{|\sum_{j=1}^{m}(a_{i,j}-b_{i,j})|\}$中的max最小</p>
<p>输出这个最小值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>最大值最小化，按照套路是二分答案，现在变成可行性问题</p>
<p>给每一行每一列建一个节点，每一行的取值显然在$[suml_{i}-mid,suml_i+mid]$之间，分给m列的时候值又在$[L,R]​$之间，每一列也有与行类似的取值范围，容易想到建两层的网络图，转化为有源汇有上下界的可行流判定问题</p>
<p><img src="https://i.loli.net/2020/02/01/PpZdSgWq6ONFV1I.jpg" alt=""></p>
<p>超级源点和汇点流满就是可行</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br></pre></td></tr></table></figure>
<p>把这句话放到if外面大概慢了100倍，求解</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SS = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TT = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> d[<span class="number">405</span>], head[<span class="number">405</span>], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	d[u] -= l; d[v] += l;</span><br><span class="line">	addedge(u, v, r - l); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[<span class="number">405</span>], now[<span class="number">405</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(SS);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[SS] = <span class="number">1</span>; <span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == <span class="number">0</span>)&#123;</span><br><span class="line">				dep[v] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[TT] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == TT) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		now[cur] = i;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			flow += tmp;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	maxflow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (bfs()) maxflow += dfs(SS, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, l[<span class="number">205</span>], c[<span class="number">205</span>], L, R;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid)</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">	<span class="keyword">int</span> S = <span class="number">0</span>, T = n + m + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		ins(S, i, l[i] - mid, l[i] + mid);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) ins(i, j + n, L, R);</span><br><span class="line">	&#125; <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ins(i + n, T, c[i] - mid, c[i] + mid);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (d[i] &gt; <span class="number">0</span>) sum += d[i], addedge(SS, i, d[i]), addedge(i, SS, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (d[i] &lt; <span class="number">0</span>) addedge(i, TT, -d[i]), addedge(TT, i, <span class="number">0</span>);</span><br><span class="line">	addedge(T, S, INF);</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="keyword">return</span> maxflow == sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a, j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">			l[i] += a; c[j] += a;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">4e5</span>, ans;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (check(mid)) ans = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
        <tag>网络流</tag>
        <tag>上下界网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]试题库问题</title>
    <url>/2020/02/01/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E8%AF%95%E9%A2%98%E5%BA%93%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每一道题目可以属于不同知识点（只能选择一个），选出$m$道题目组成试卷，使得每个知识点都恰好达到要求的题目数，求一组方案</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>网络流建两层的图，最后看中间边的流量</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>没有判last!=0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">20004</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == <span class="number">0</span>)&#123;</span><br><span class="line">				dep[v] = dep[cur] + <span class="number">1</span>; q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			flow += tmp;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k, n, last[<span class="number">2005</span>][<span class="number">25</span>], H = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("2.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;k, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> h, i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h);</span><br><span class="line">		ins(i + n, T, h); H += h;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		ins(S, i, <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> v, j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v); ins(i, v + n, <span class="number">1</span>); last[i][v] = tot - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="keyword">if</span> (maxflow &lt; H) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//		printf("flow = %d\n", maxflow);</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d:"</span>, i);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">if</span> (e[last[j][i]].f == <span class="number">0</span> &amp;&amp; last[j][i] != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" %d"</span>, j);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]软件补丁问题</title>
    <url>/2020/02/01/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E8%BD%AF%E4%BB%B6%E8%A1%A5%E4%B8%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>电脑一开始有$n$个病毒，现在有$m$个补丁可以使用</p>
<p>每个补丁只有在当前电脑包含某些病毒并不包含某些病毒时才能生效，它会消除某些错误并带入新的错误</p>
<p>每个补丁有消耗的时间，求最小时间消除所有病毒</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>病毒数量很小$(n\leq 20)$，直接把病毒有无装压，作为图中节点；补丁视为边，炮最短路即可</p>
<p>你问我为什么这题在网络流24题里？</p>
<p><img src="https://i.loli.net/2020/02/01/h5CelX2fFRMd6zj.jpg" alt=""></p>
<p><em>夫妻肺片里应该没有二位吧</em></p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>priority_queue 默认大根</p>
<p>vis数组开小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, b[<span class="number">2</span>][<span class="number">105</span>], f[<span class="number">2</span>][<span class="number">105</span>], t[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">25</span>]; <span class="keyword">int</span> dis[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>)]; <span class="keyword">bool</span> vis[(<span class="number">1</span> &lt;&lt; <span class="number">21</span>)];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> S)</span></span>&#123;</span><br><span class="line">	priority_queue &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(make_pair(<span class="number">0</span>, S));</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis); dis[S] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.top().second; q.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[cur]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[cur] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">			<span class="keyword">if</span> ((cur &amp; b[<span class="number">0</span>][i]) == b[<span class="number">0</span>][i] &amp;&amp; (cur &amp; b[<span class="number">1</span>][i]) == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">int</span> v = ((cur | f[<span class="number">0</span>][i]) | f[<span class="number">1</span>][i]) ^ f[<span class="number">0</span>][i];</span><br><span class="line">				<span class="keyword">if</span> (dis[v] &gt; dis[cur] + t[i])&#123;</span><br><span class="line">					dis[v] = dis[cur] + t[i];</span><br><span class="line">					<span class="keyword">if</span> (!vis[v]) q.push(make_pair(-dis[v], v));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, t + i, s);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">'+'</span>) b[<span class="number">0</span>][i] += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">'-'</span>) b[<span class="number">1</span>][i] += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="keyword">if</span> (s[j] == <span class="string">'-'</span>) f[<span class="number">0</span>][i] += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">'+'</span>) f[<span class="number">1</span>][i] += (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">	&#125;</span><br><span class="line">	Dijkstra((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (dis[<span class="number">0</span>] == INF) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dis[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>状态压缩</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]家园</title>
    <url>/2020/01/31/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E5%AE%B6%E5%9B%AD/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$m$艘飞船在地球、月球和$n$个空间站间周期性地穿梭，第i艘船的容量为$h_i$</p>
<p>地球上有$k$个人，求最少的时间，把他们全部转移到月球上</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>关于每一个时间点建一层图，飞船穿梭以其容量为流量连边即可</p>
<p>每次加入新的边可以在原来的残余网络上继续跑Dinic</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>忘记判断方案存在性</p>
<p>当前弧优化，不加T一个点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">50000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">50001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D (tim * (n + 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P ((tim - 1) * (n + 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pre r[i][(tim - 1) % r[i].size()]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Now r[i][tim % r[i].size()]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, k, h[<span class="number">25</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; r[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[e[i].to] == <span class="number">0</span>)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to; now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (dep[v] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x] == x ? x : f[x] = getf(f[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("2.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) f[i] = i; f[T] = T;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> tmp, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, h + i, &amp;tmp);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x, j = <span class="number">0</span>; j &lt; tmp; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="number">-1</span>) x = T;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; r[i].size(); k++)</span><br><span class="line">				<span class="keyword">if</span> (getf(r[i][k]) != getf(x)) f[getf(r[i][k])] = getf(x);</span><br><span class="line">			r[i].push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (getf(<span class="number">0</span>) != getf(T))&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	for (int i = 1; i &lt;= m; i++)&#123;</span></span><br><span class="line"><span class="comment">//		for (int j = 0; j &lt; r[i].size(); j++) printf("%d ", r[i][j]);</span></span><br><span class="line"><span class="comment">//		puts("");</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	ins(S, <span class="number">0</span>, k);</span><br><span class="line">	<span class="keyword">int</span> tim = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (maxflow &lt; k)&#123;</span><br><span class="line">		++tim;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">			<span class="keyword">if</span> (Pre != T)&#123;</span><br><span class="line">				<span class="keyword">if</span> (Now == T) ins(Pre + P, T, h[i]);</span><br><span class="line">				<span class="keyword">else</span> ins(Pre + P, Now + D, h[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			ins(i + P, i + D, INF);</span><br><span class="line">		Dinic();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tim);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>网络流</tag>
        <tag>最大流</tag>
        <tag>时间分层</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]魔术球问题</title>
    <url>/2020/01/30/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E9%AD%94%E6%9C%AF%E7%90%83%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n$个柱子上依次放入$1…ans$的球，使得每根柱子的球上大下小，且所有相邻的球相加为完全平方数</p>
<p>求最大的$ans$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>把每一根柱子看成一条路径，相加为平方数则连边</p>
<p>网络流最小路径覆盖问题，用给定的路径覆盖尽可能多的点</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>r开得太小</p>
<p>整数二分l<strong>&lt;=</strong>r</p>
<p>及时记录答案</p>
<p>以前写的输出方案是错的<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt, f;</span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">    head[u] = tot; e[tot].from = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn]; <span class="keyword">int</span> T = <span class="number">5001</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">            <span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f)&#123;</span><br><span class="line">                dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">                q.push(e[i].to);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rec[maxn], upper[maxn], mid;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow; </span><br><span class="line">        <span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = dfs(e[i].to, min(Max - flow, e[i].f));</span><br><span class="line">            e[i].f -= tmp;</span><br><span class="line">            e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">            flow += tmp;</span><br><span class="line">            <span class="keyword">if</span> (e[i].to != T &amp;&amp; cur &lt;= mid) rec[cur] = e[i].to - mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (bfs())&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">int</span> tmp = dfs(<span class="number">0</span>, INF)) maxflow += tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>, last[maxn], cnt;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)&#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span> e); tot = <span class="number">1</span>; maxflow = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); <span class="built_in">memset</span>(rec, <span class="number">0</span>, <span class="keyword">sizeof</span> rec);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mid; i++) ins(<span class="number">0</span>, i, <span class="number">1</span>), ins(i + mid, T, <span class="number">1</span>), last[i] = tot - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mid; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= mid; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = i + j;</span><br><span class="line">                <span class="keyword">if</span> ((<span class="keyword">int</span>)<span class="built_in">sqrt</span>(tmp) * (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(tmp) == tmp) ins(i, j + mid, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        Dinic();</span><br><span class="line">        <span class="keyword">if</span> (mid - maxflow &lt;= n)&#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ans &lt; mid)&#123;</span><br><span class="line">            	ans = mid; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) v[i].clear(); cnt = <span class="number">0</span>;</span><br><span class="line">            	<span class="keyword">bool</span> vis[maxn]; <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">			    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ans; i++)&#123;</span><br><span class="line">					<span class="keyword">if</span> (vis[i] || e[last[i]].f == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">int</span> cur = i; ++cnt;</span><br><span class="line">					<span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">						v[cnt].push_back(cur); vis[cur] = <span class="number">1</span>; <span class="keyword">bool</span> f = <span class="number">0</span>;</span><br><span class="line">						<span class="keyword">for</span> (<span class="keyword">int</span> j = head[cur]; j; j = e[j].nxt)</span><br><span class="line">							<span class="keyword">if</span> (e[j].f == <span class="number">0</span> &amp;&amp; e[j].to != <span class="number">0</span>)&#123;</span><br><span class="line">								f = <span class="number">1</span>, cur = e[j].to - ans;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						<span class="keyword">if</span> (!f) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v[i].size(); j++)</span><br><span class="line">    		<span class="built_in">printf</span>(<span class="string">"%d "</span>, v[i][j]);</span><br><span class="line">    	<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF1218C]Jumping Transformers</title>
    <url>/2020/01/30/%5BCF1218C%5DJumping%20Transformers/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="640fcd95e1cb883de99745cf5d11c17859ac9116203ff76c55c2d96451d49a5f">56642207b18260fa3cfad3f3995ff646593879568d784f2e8ad75e6883999a87b145f2c737e97385573b061dca7c7da0bffb0fd8dfd3dcd744067af6c79ad78be02834e0110693fb387251db63d5b6e6be4051092ae6fb5f8669678eb67d4063f4efcaaa2689a7729e0d7d7b88fd37eb59cbb34516c22d5e32eab33c961fc24fe46c3fd1acfbb23f9e0387ba41272275fbc3b872cee40781a125afcf850e67ae1d79a5dbd2a520adb863ea2b3eb1a08a5d31ed5fc897445c3590dd7ceccb959da8c8be70c84434e98157ee0fb21a0e4f15d807bc9be60a4c8b52ddec0f27f1a1828ba69be12a5dfc0c0761b0dbed7c8f94292ea7b1b2ea1a5cedc32ba0e64d58d5a41c3fa6d4ed0738a6bb983b85a1a6de79a4872c1b65edc43e02390b0ae220a25441e0edb7f3fd4a1027222686e1e73ce35e44795f8ea77065d94aa73fc271b43531789858267a53a2dd3ff1becd9ea4dd97933f0a2e9f7b77fceb453f54c8cc0354925e8ca478784454025848a753bb8bc47044063d5471830b116eb13da705647db5c9c7f6aa68227269d978745e5425c6d24926b7fe62d85b7699f10684344377e44e3415e392dc4434fcd1eecc8a142ba80e99c42a292bf36c1848eb7dd960604f14897e7b8670d2f4208001499381493d961c82493a26673842ff7317c12224a81dee553b1aad1f78cea9dcdec1f912f5271c430c1f01c5c8ed46aa376c65823a79133fc5c6fdfbec20952c615b22b8a14b5a0b2aacd19b1e4b118f528e516768f7f36c526a90dfc478bf406ee036d8046c5f6bad1782b8f29129963f4e27228c801191f15a312f8dee4ad16329a5a6a15ec836a24a99387137e6a61932f1e2689f650f4683eef4db86ab5d09857677d0e32d365ec25a6d92b9c9bb74d9a8e99c2cf3ca0ad55c1ceb5616d30ddfbbc17ee24d2575a6342693305d3d53099496c0e435f8a452cd44acd0190e19668d18309f345ff3f68765271331e50817be0a1d5021ec691d97f84924f5ed42320b7fe4f025ea350121ee12c9185dd6375f1fd618a0c8690e033181ddedfee5b750ee8d446652c5aba58994371c9fdf11e7edd6cf266edcd3b70cf90aca4d91066dcfc2a5ab260c35eab5db557a1e5fa164b74a4a61c51e4bb464644c5f45213803d3488a2231247ad0720641554a260e338bd735933e5462e61820860aa21f3a9510b74451eeebace45c2016a76fe129ab7e767117da8ac23df683670ad3fd1cbf96b954a33eaee0fed2f6ddbcdb92143584b860754896e74e4d38af70676fb9e83130a7e546ddce0fe62c05a113b370bbe12e35ce740f45769367c99c0bf113faff8b5e73af86c8ec9d43e234bbc1c95e1a5467b3edc8dba3f520ce8ca5494194a1c3f6aeecc7f22484d796a7cfb77a3f9d80d87244225e3371b798d95c1b5191f09bce7060eb406b4ef13d01a5d1b79e1cd9de8ed41fcaa5b90eb3d9d920b901ef94d18cd329d6d749e593a937ece75611e2d6329d0503320771f3d8ec373ef824e1a25009f84964928ae86b31588d3bdbbc5d9d295361997173d3bf01adc1310ec3af32e4a4afdc2f4e2dba17866e452f9bc98e3fd479ba05c85a928c20ece3d5da449aed65f8c37f1834da97949f09e5df500651aee57b3c4398412370e9881c668b39cb90eeb5c7f2425dea17127e4cb7a48d92952d8b81972eef987b6c22c83bf70e5f8f96858386a08d912db757116eb4a2e2d60ff33049c754b8b7a2f333e217ba2e59648b478d31a8f98ea0c28b444d0752e0accafe2d909b8075a29ad38d2d6c6ea4887ea9d7ea19775089faa00866fe07ac4fe76bf99bddd98abe57316fa50e0db4b93696663d9242f397771108eeb3a1829731269c764015154a0e67bcbb45402c2affcf4de5dd533ea6cc48acd3790059c27fccae25ab7ca816357ff0ad3df5872896543a63b7f87ac8d6ed50eebf0b7e863c04798e3e37e2faaec7e9515637725eb9808b96468ef017af46a8c328ecf4d12778491b45f2286ff4b0c2be989784bc6dbaa268218b7dcc89e8bebd15b4c5861e9a20ee778da08ae125efe9ebfa67ef146f58fecc8c1959ccb4d145a1c09222820a6fd3a30e8f7c012edd2c086162bb0bd399eefaf29088059b2865a2b1fad0fb2583e0393a094c991065b4888427d575269665f52907c113e5b577a507e46282f8a8ddc541585e47fb308e27b8948c417bee562db26b35bce4082b0a898c55443967a089910542bf0e851b9e377a2c7f3883c79b13f58af856c87b756b6b69113250391295e631e5e2c51a741e0b4cf95e3605fe40e024ea1f7d4dceaabc371414a30bb734c8ecbe8880754e4d0417f3c4a3981f025da2d89e0728cf4e61a533b878c6c9b1d5fd649ae56af4347fc288e7d11e36b0784c0fb28d5114ad3450c98765eb969452c81e27cd20c3aa430c02fce62843115bc99779269893b1aa66abb95febd800f9b405842bd70075cb5f2945e359e49f84e8ae604cc2b0ad4d7d21d4fed5e945f2ca4dbea7ae0128161551985cd4fc1f1f1b6933ee8b3281c11fbc7e5d741298b4e877011aeaadddcb5e373f3faad4aa836507d3344e77336e9bff432088001803a8a9cfd537acce3daa23ca6e5a5a91d19d5dcc855ecd3ac4b35a6ea2810385b2307c3c5b7556532454200a670bc962b993ad35bdcdfdccfa2f65974c7443a3cdc9ab17515f627790c7062c87e101bef9306b736d6315bb7ec2fdfccb78faa8ebabba6281b3668937ad5b4e23a38b42683a2344633a9b4ac7e9a152d47c1a6a4580d74e34fe5b12efe711ac19a1d57d382550d9e9e5a67addd78ae598e69d5bf7540136a3d4773ba3123ae00954255ba6c52264d0df9d85d03c89c6bd74b596aef1bc1500656d816af6e7403174b71ee52f7f6193c66186d019dfc0d2cdb316475142cba1ba4168bc638e4dfbe8d14b8b609b51cbe697f575939af05563af07c492ff730b45391675f32a5c71a793e8a2b1735e588a175b5f1b4d7a3627d85668c758bdb54ca7a7ae2ca22eb8c56ec0cd28cdcaeacde8a8bd946308f2aa1d0edde8c50c41fefe9beda3ddc5ffd6b45fd2be1ca099af1c1058e0eb5ceac61862b341d67869e211a0eb666af6cc6e0814128655efa1e249ab60946bd0019b7a0723d33f1eb2fecbbe0ee961f9cc1607ff13a750757246c56947f1ae44c167a71ccbd4f221f19e4e3931cad5942bb677d125f5e287eaed34d3d17a899f428bedd088cdc3ee67ad7d0b8265052c3ff8ff6ac8d8958b6f309d5f3e436448e01dfe4ac6ed0eca9a4414b3287051cfee0b639030e7ef50b069b481055db46f45a1ce298ac11c4b1cfe8e8b2f7d009793ccb35a28dd9720bc0f580f022f9d29dcebc7efe78df8060e5b4de4089466bf79c0eeb4ed8239aacc7af0b17b437c24ebf386aef872eef6aedadf8c3a5f14e4620f5b17e37bfa37e47b106a1599e61f15d086145bc24160ebf68b9bc7c954710afe4d90147bd4bdb4260c9e886814c1536ef7eda5b26c2c6bef299d04ae113e3aeb781007d68883bcc0fc3ab9842838f368cae37a823d5f0d8d18a0156a32baea9c09df8ecca60622946d5c9e869b802ea8d5d15e01ecfe56d16f112d0d43bbf537e2e875a7fa1841bb676b8cdddc2db9710a823200ac1d403baabd8a1fe86bc1221809ecf0aa60aae1df9a43c5e56a12c6ddea9bece3f5720781c4bbba3dfbd56be39100a0f904bd1b7a4c7de0dc8aafa3522311fa5c621df3644ee98a20da74eaa1961783c26e3b53f69664fcea9c4a96cb469ae45e787fde712593c0fdccef00b72deb4d5fc25c21ab9cb2efbb465e8e926b442d9787475166b6051e55e10be6681d888d975156909f1650359069c269a3b66a978f9b6aed7264ed8dc5245f8212fafe13a04e2ddb72eb025ba5961c8fb4ec0c4f562811057ed892ed7d3c09e25c9a4808b3724fe66967f16c513decc879a45f5c6b9e79501de1525f76be99b9d1f6d7b3babe5daa6e55884247254d17ffa103d325c80490844bab1e9babc6801bdee05cf9f5b355f0af56a9224c810e019cdcbe825a71a60471123e7bb28729a4add790c217f147af27042cb89757e383a6805cf2b5c19727cd049a8aa80de0894c7dbedbe12f21085c35733680d77d5fedef83bdbd31c85906ec6d561bc333ad430d49e42cff4d4365b02afddc465301d82d46c71746b0631a2e44f0233116b1b383567b662a5837cbed55a7d548fe8811632ccffefaf464b3b3439c9da1c75efcbce35f1ee50c38b42c542ecc16afb82e87c868dca3e5b312165d2fa63903b22fcff021c48c2650b0307368e9b4f5994295071c689d55e8ba2b3f6195d4c269e4a968878a1de42ac28fd5232a3eb4b990ce1ffcdd245db4878acab4114f6b1f7a0988596db4489d39146ee734ad59ce8c0fa28cd557835695ace036568a04ac9e13fdeb6ddf91315800315f85620820eb7d434d9ae755e5ffaf33c40f3ee23a68997622f1c6c55d2a9af25a6940acb760bc7949832078bdf3108d1122cf9d2ba71eede7ff8f72e780a713f74bde0d3f27d08d75c684621e0c1305b6e86b39f3d48438c05e9e3c91e9005aa2f14b36d0635798c105eae9b2f650370f500ca0a02ee4ec2c592ecaed133579411bd796918ec5ec54573a7cf796c52441a3ea0c15b7f4f2fd4aeda595f75f5e69c0f876adc3105d724020de8b240d1f5b71e4da189ad32deb896b29ac87e350004f56e55d4096fdb21702540c508001d065a3367af4e7863296639ef26b69a1d1a03c2fe44261dac1140e1341188677e611fc6d17d42fb7cc49cf73b2b0f2a7a1fbee5e0ae3c37e0fef631bc8036788fe775ec0552460de14fb81e51670d076db0eec7c2d12a683794d6ee0f9f7c204b636fa2a487a687c5c9ea1757f5e0af583ff6c1fc5e524ae4853d92c1a09cd09899a4ee0aaf3da9d2d4e2715d8b9f5a55017e7899ab871fb2a3f4151eb4fffdbe01edef9052dcd2be40482a9d5887cb0c2e2056ce667ba9c9baef8397f425431ebc42a0ab342d3ca9e0bfd11a024ad0cba8050811949906de554de95d1ebd379a9cde1dea4f229003bcd6e64c4dccfcfc72a864bf19a7e2a5a12ac53db9a296dcf93fbe3234cfd319d23bbf2eef7aecd93c0814becd7ffbcef62bd355faee4a2d7f455532e0876a94ba0584e66531d9b02d94f37bc0142b57b7ad8da0df677fed7ea52a7f9c109fcc38db178a7df841dc7072abe1a3251ad9d7d21a1ad976143536f1e25d7d98408e10f8ca4fa8698f30a2f062261cabacc50c5b933046d77568646978426504c23de9c7c7fa87cfeaaff57e31cae238deeca5352a9edbbce48502cd9b39c0abb920a579e5d551be6bf482b8e41ac7eec2129b5355eee384e3562c1c3e07e0e888af36576b887bc83df2ddaace801e540535c29b0e753dc0db6b434e1765c47ecd6e2f749d8ef08f6911be0433a543e6f90500a01e8a60609f02875acef7a9f6c96f109ff15ea8a9026594deaef51f65afc21ae319782a977778f0cb94b22de6b21bef5f58286b9fd93385cd5cbe7ce30cc59aa7293b0774e76efa18e1ec09cd3ed9e198d6ffe96e1cb529757bc6de46026e26d14fb92f77d90aedc16dca76df251c4f66f65203bfd86d01b5e420dc15d19948fad0b31d865f12490d9f3edba485388e7ea7ed99d8e68ad1da9d187abe992b01ab0ae764c526ab48fc8245ea326639558aa1e6a212d9ba7720d4116aa0625043942bf60361edc286f8ff5711dcef53591febea9d98c3dec8f1785ada2e62e3f1922d03e0ee1c0d65b06b9795706ae35a3bda1dd9a998bfee6a38f3fd66a7e4e66bde920e74f48dcd17a7ae98c0ba809ec0c03136a736308c03c2f99dc2019820f379734ed20b0f73ddfe56f1ebad3fe20c85d21128c5abccf3dc3d597124bbb4810dd18f677b5e7570f08ca3787e8ecb0f2897f53c99318201a0219702ca3cbbfaf4a34865073696da69a93781deff3d3b90f9b27496af88fbbd0df5f47126214eeb22695fe05302c02a8a0673c0734833407de3b3efe6b6f770ec24265b493d17d0e854066b6eb6f8e57e212a07b522d91b8e88077f59560060c20842a7aca10b97b27e3f3421e7a393019862687b38dd15ef590972de6b0923fd0fea279a7e68d5575d83429cca62f4a597f24e9cf998664494f0992d77cb45017938d836c9b610ed41ec97c033ba5a3f93aecc1d6d51c05577b388c1402157b9ddbc7fb57d19e99e2dea89c5738b959ba74644dd3158c2b423894839506ba1f679fa9dfca9f1e82945788052b9785163ab3262dd5bc057a93a8e2a8b88188f7288d092555f241f71972c5f4c5f0fb0c51fd76fe2402455274b7642620fe345f28add67f8d5bca1057c312359c6ff572c6d0261fac891d62031c3305c496e37dda07719e6369c0b9806e44ed0bf9a8b54f074505e1c4d7a0886d5b769091395bd092cf5d6c65c8fc3ff122b80a3a5d83063f521e252d20218fffc31e1f01a496c344b8919eaac68c8e65db48d4b0d4972a1bb90f1f69278a3df5705a4390972453ce820133f661544924c99659a235bd7e3bb825bc120f9e590e0d01a5f131a8569648dc288db0f9905adbd129d5e0fd05d34f62682b04263062d90b4ef93f01db2854b2ab6091ea6cfabe3542187b93a6c8a76058840228b7f428c75af59d946eca609aefee038fbe270dd501fbc3467b07302493c0545474b64edd25a31ef3c8e429f6c284e8506f5b7a47a0741a3b11ad77c71913d751bec438d9f8ff99053c981ceec035f492dda905607b197cb2ab7ef3ac1cfd2548cfacfc6f85e8ad5772c9ef238288a3c92f19be2170d4d076c49aa494d5b91b5c62d83dc95b1deb73e358d8524474acf462119fe53d3250ac4bab7e642aa670256ea9022552d47f43541758f178c31e77dd935f147c0cf5838a6d529a25a0484fee41b771dd7c04abeaa443a987aa0b516d4e0e3081be55d57728919c9a8763ed904ed0f4f7c1b930706123564459ebff28c1e2493503e66f89b10c95bfd44e18c9d8dcabda29b11872faf639f3c91aaa3c4394c99e030e849c61f31b98bba575e9734e649fdfe3ac4c4bf1000213b5fe21c4c4dd27e6a46ac465bd8d8eaea75870cab7d53bd7a7e2f6793ba7578df9e59a527ccf72193a118ede85239d6c4628db1e38ffc65bc09e2311a9cd99a91e26f76f71f44d7b5bb1f1510f43661171a8f8e4527c9e887474610651c3ce56a70a93fff93fd4503cdabf8d5f77d6ccb35e2ede54fc9e76ae1b569a4d905c9e569f3d659f2562eabe5747041fd71cb6c7ffcddaa67daa9c68459795d669857256c72aeced27b182eb8a5eb383d645e5c1301c9b7d61ca61769b0e29794f2b6e1ff7ae4cf8a43e3753572f0418c2714619da1f24614ad160ec4efa77568c3419c05567fa7fb0a45b7e68f692e9fe20eede6feac7919ab54410008f5ed871bfbdce9331c9aa46b502be1d881fe4d4e6030bfb67e515ab53d1b88ae738289d21160e79298bc6c71bfc9ac54ca471cb98f0bfac20fe0d711846242b6274e57d9f763d7bafc6379b8f8963e400cace20c969e960f080ff090e40100dcadc52cc74047f7c1310f1e90114ae0f2f57000cad924e34cf13d29db3b400bf2bf8340b743488f98541bc679d92d7b633eacea812b10e5f3310e0822218f3706cba9461eb608b6bc78eee637d94e3557aa48c7dd89642a18ed9998e18ebde5e05b49438e3f2b64253ef4812e74aa3b10d0304516f1ce5f2955e2e6008bb99b4f48ceea4e829fec8a951e9e13860659d4d6543e96e56fb18a6ac283d3396311ed651229b23e7e75815b8e654485591ea67dbf53d2ae5f7a121c4bef22664511e2b03e7d4a7fbfd7f37c4caee5a6bee9e09057a22db9f52d491b3b255a15d0039a9275acd9e71f388a03088f320660e77effbcb0d5bf8503b0c7c408d7d02a76a2430b79e912923d284a8f8a3e732d85e982b1bb5c16408fc2bc73af7a86137083f4bd4710510e202efed6056269ecb216bb290aab6be019475af54d3545bee6425c5ccabc3569e7fce7b34a37042b5ba3391905cfc0e5a94c2994f8d220fb175084624103125c84fa7817ab40a2dbcce5915ebe37b102cdd689850e32ce5cfb9194c93fb52e51f0e2e9e895014cd06af66e893356e4ba414b90c22d24a2c9b2685b6cb14faf9c567800ed7385ec581cbc5aab29baaf17c1829a24a121da05835a62230a1cedccd6433d6af227fe19f24b8112ad90d95d718285b5b560014329d101b85b38e644c9577909cf5b6110c34e075bc0b4170852c53a15374caf6d6807c525c9a07516488b4914aab2e4e4bd79f73e275071fa02a74c5dcc6f1108054f2d5e2b343c7da9ff605af41240ec41e109d167a6bb50d7428b090fe020416d7d0542a37ac2d064023ba97a6b7618e0c611af7e80a4626144a93d3ba3ac88c674d7a66e6d1b73a3f9ea535e3f56c11e9c1f038457f537f7d9a8216194222b7674fbc57f248986386873f25464467c695eafa01446fe54c636b24d8b5753281c50f323e54a4057a683abc1c1d225131e8638fcf4acec779305170925050f64e940fe7ebaf6a1d6481cc2e0e253dc1d712b40feaa80f3e2fd4f79f37e59e08619761085426960e1802155b7741ebc06b858fa6a573190fcc12715aff168d831e0b6d7dfedc94fbe84b3f7c97e90f06ca78051a75beaf19be841b20b80546d20fdf6c381596d30125a3520281cfe47ef0a7c8768f7a8d626630a8adb9aaf8a27bc02dc6be0e1aa3ca7c6cb94d7ea289daaab82077fc9c3b6c744ab53492f9f00f13a5f4d23818bddbb52797bc39be2f99fa02ca07959d93e7129608d2adfb3fcde5024028a41340fde48f179d800d5c569258c2414ef7ac60e5663f0427bea322e392f87c6dc943a3db97d2601b07d51833731f180bab5496ecb9352750b6b9df19cae5c92c75f46a8b35ae3184797728994c655153e45dbd4ae13696486590aaa909da233832c7d6d57c100597ef7de5ca38873aa06ce99412888128d32e204a784fd0010bc20b06c0bc5a6bb804d612c14ce0979360f9247ab04552ed5acdb3d70c63e000ee39e2108929a5a27960731b20195834ecc17fe8b2f8068b9e417d72d26cc8f62dc7c0415213437744b6913509353eab855e8da527d001326270342afe58a27d72836cb0ed2d62bab576e91f240d9255bce3dfd61e898f04d1a8e75ce3cc4e910842b15f97be34702bce7d024a9897be8a86cecd42ca6fa7ca81903420ba7e1ce044042c4adb3b6ae26a3c18ceb020c1c06ac2d6e6763440d2db0309433f0656fdf55d7b9f8197ab3d94061ebfe99e96f417af43026a0c45f65d0ce6431f86ae3978c72ef6fa9c9d8d095c2195534d21fb69064469f2c13e734bfa9a0bb0e3c2924ec5a2a3166eacb70ef888df8458b4911eeb9ea2b75d341cf1c952b8ada4baf7700e78edcc9f47c33520f840c490dce86e397e6ff219ad5904549bc22a9b8e8fafae2a5541260f1ee19da98d5120394eedd97fc8912c1bfd8abb67c9d2e143219772adfc5ecffe45edfe640ad2ce58a2b4c489cbd052acbbe3aa26682165eef066d2abed6fefdce84e2733686bb083aff4b0a07cb50a9228caaea9cda6811a32d53eced7233215f5a891cffef1e7dbedee7a8776b9fa06c5d6afb2e04f001f7d1568520f22941fffc22be4c4e20677d6a66bfe5d827904f4bf6e3c131fbd35d863c046e55187e55a080d4288ccfec7002d2402db3d4189a5eaa368a304ce64f726feb725f79c78d659d942e3a7e58c508e2119754bd33f1dcc158dc525bd57d6d75564378130694788d4f057210aa096d626a17e6c55873904065d393d89054de6fe2e10ecf7ef1d49f2d793ad87b3ac274844ab5f2a4538348cce401a680dae5c813173c73609eaa11ae3884a5837b03a49ef5025e7dd4987f027dfd8a52c5609824de9032cada500416bb901a18cd0ab46e8c9c08a385b0463ee0d0344c705eac9858d37b1bcaa7de3a341558e13bc2b03ef705283a07a4080d336383f92e07a9988b430c3908493a2162f942869cc9e94405ec27bf45b873be7ef0965d4eb005109b7cfb2786494f8f6808e091368f3623936703a69d76a5e58f7738703bbad98d00f394b8c41b7470c6d4af607348205060f8bb0278bb60b02c7b209c400cf8394de14e0df536dd38fc66dd9342708ada2d93f9b365e0aea0dba7e521c4d226938371d823eabc427456b44892ce61dcdd386ad4f823a6fe035599fe40e4fc457cdfc178a9f96b4326de025cd0cb7148dc01b303191c916b62f09f17cbbdc6a1a48d60d98e8a32c0196ee7221f9ee268e6ed15085dc80ea77a8664e77f840f31e7246fc7c8dff2994011f838df5cba6170e0afa425a10757e21854181836bb8a38df690c7552c223b336c0c15af21ea99b3dafcdad625905fff75aad1c37b810f592060cb2036fbd6ab87c98e174174efd98616871ce86f42b109f693dcaa5f88d8fa8484e14fb1852d2ff1703fa2486abd2ac857a3ac0acbc58a77864bb1757cf1afaa203286c160a037e1a24b6e46898903b13e7ccf8d27febf4f946942a1e178fcf9510be5cc6d543b01af0e39d2bf4230c20c1a11bd780012a7bf18cc55648d6fbfe806b212986d6f3985e7fd15d196b399cb0f8e46a0ff8335486a05517de0b9caee867629a223b48d84c8aa9fd65f9d6983632c833e7cb22b10854d8bd35abbc7a7b4da414a967e166fe63f7475b3a8f57534157ce0fc61de3848ea6e8b92b4884fe8d19359fd13bdecd320604730758c6aeb37ff43484bdd546b251be72bbbb718be2e2233d5026fe5b9945e919aba41befb7970e0846676b851fb5d6d6b280634292aba75fb37aadd135388bef7c8cbf9de6dda606f87355615e450f6285bbedad869b6e6232c2b6ca37f3a3573862fb8cdf5835293f740aac8b2f298e93a43397d4f4fc7b885be572d4d9e0b661d7a041c72943fb3c7872626750833c6611a69fd4e9b9b56b382d49cbe52f52716178efa8a830a8b608ae0a234514fc3990c3a1868963e6f2592df8b85fa869fe7dda257f462b74c7c8dca85721c8ea44559e256bacf0a0c774045aef081348e92938e47c93f8cd5f953f5f51f75eea3f0a71d5c0355e223f9f16856bd1f9bdef42a2956fe8561140022f38b037cadfd5b8c6438c1ef762c507fa2be8f4127a9c343690c32f96fcd68bd15e3a59a7ff4b2c31f3892ac577ef1df015295e12978bbbfcfd59c5dbca6df7666f7df1eee710ee872370933f4052b023f5717c8e256f8b664e3d000e9ba82480b38656eb61114d9058eeba5fa49fb172944767bb13fc5e1b2d4113cb228aba5f618034607246c99924cb6a2a685d91e15be827370e304393017550021f74f1178f12ca8700e8869d9c221090ad9962de214014adb12c6b142fe427b4b32fa1539dae02d042c21b1823601d366c19493afb0b9e69f4be218748c55c723afd131ca604865364f56fdf0cb5f0072ba9ccb47b6730c3075fb6dc8995a14e1324a8330298db8142d391ef07aa4667945d9fba129e9c6a072ccdfb1aca6b87654e67d693b4069ee8997133afc3f5e8c2c05982c86527154a5f557176658421e33deeb3b3d57c2b5809a09a5bdfdefd606c4fe864d08a924c059934c8516b49f7f0c30f62847493be20fe663df7a715d5151d46daf99d8d35855d4b3426ca8adaa99be8e5758ab97961543c3a61e85b55b79062009219ab832b59ae62e0955be92ffa6eacbd4955d52f790b902b672d8c80680ecaa2b1e49f41abce6cfa413b4c773768d62554e14ac89aec88dd32f47af8370c6ab4ad6d5efd50d1c215354c54e74970e5baf2b86f82826d1fbc791e312ef3dea97bbfff23c3805b0e3ddbbfe251fcdc72730a95d08134c55f8cbd7a71ce4672df3b7226966a9aff1d4ed866db95c69b7a2fd3c622014652a3e5c0746dabc40f49cda16876ec818f6e5cc86ea80e9c76b3ab227c0ec7bc58c33a5ebeb9c0ce9efacc8be2baf2383c7e5964fb2b0d09ceaa3d9be606d5c78c45aacda45528825296b8624cbac1e3b239bf058168f077c1ff43a1a3cb4752735f385335f07af97e5b6d266951125b731295111afd5db958dfb01fcd9c1be21985e52e44bb228f355b8b7bcb357852314554222c5d772c74dcc7ae3306288a59dd3b734b54349e0e0521ac52f45e000e5e1ed7869fdfd7ae99ce332e3f0bfdcc311d54ce0e3e3d6da8c430cbc79f315950cb72628a78065545c5cf38014f85ea8f1f865b21d2b63ff91275a83b438a9f6c313591151af1acf93ab8c7800abd8ec438fba6afd933f408d7c4a64f73c58d894c57ad7a8b43ead377207e4352a95b28ecb49926a6cfe33c5f9dd2e5697c67387f6d6fd86a23af18c9bd1b967070d3431cb25e15b92487e8181efa8148d8042785b8265f06fd255b8c7404e0c503b1775922beeedae5f60d488aa32386c399f615478c60370fab04a23967846a6bca782ab3bdfada601ea1d12df146d08806027f4abed78bb1b3f6da90e4fb189c948e2bc83da851e1bb515e4acfda562467b65412d97a844c6523ff961e7101c1e399ee6c440124c52db44c88f5bf00d9ca272dace30ccf50e90bfdcd03049d683f178da7f32c1007b855dfbbf4d0d30bf27d4aee5b1fcba0b07f466e37b2cfb03eed4de721b7945ea1fc377afc84318e8d73b89051ec1f2524cdda78ac06ed71d98adee8e19ddaaed1da87f6afeac135e7c3420210876b8a302776b43aa9b058e8a3ed83d3bfe32eb8f735400df5362e74bcb316a959cff8e7b54a4c1770263e67d0b352044460f509608e2dd2f80a79c209455188efe680c886c23f210590a7b92863fa861915a72044d2e5c19187650a16d5102a128060dd9217706e91795df0082bbb4eae36eb6a053edf0b3f32372bd2a7b0f50fce8300925c3948a97fb39026178fe16c862a415ed43582093693edc579040594a7bccadebe21309bdfa982f4e7f538a9b03ec386030a6070093aa38e93486499889632b2c01a6335de27efd0d31efe5a5a559f0cdcc638c7db720a4c825ae4daf027a896ff886fcb030725f738f89e222f71251a1d34fab62e35faeff7b458a9d6cc49318aca70c53d01b4bac3975ada12aee285cb69730c55eeaad6a3cf9ba01fc7c2d68a25084bc1317c3e68ba4166863fecb7ccd5df918ff6e0d8eba588e92b15a1e368837fc8b78d30d59e3b44f9c1d17e5b29ee5fe2d83c136a91411b4d418f2bb605722ae20a0bf46e686b04fedcd6eaa430d94814af3da0af664c8054fe9008d08954f81aaad82d256715876b4668b62df014c4d6d678f6463bc0bdf323d661e8662b09c38455030435a02831f2933b958fb05035beba2690a2bdcc5d96d717b3c9c4e4b50994b54929adebc5a7663ca601270097f4684445641a954c09f5fd9af50dd946c6d7569ffe2b45fdfb25243846ff5928e21c7ecc64b37ddb2c1f867fd16d680a0209c93257ccb933ba6ce92f241d7f641c8f504f720c1314e569e0d64fc8c9d656863ea56a40458bf94f1a92a3b67bbbfae72a0f902eb767321c88cb61d312ddac508deca28fa14b1afa35778b23e76ec6bcf4ff8da1b9c5ba9b6d9fb3b826bebc08fdb2f2e0845f76e5628fc7f4c98c97ab0bb7e51707605201f4e09afebd9d9c706d4b8f62dd39113aa7d34a9447a20b8955d112cd8fb8d61dadf6092f0f40f3998fd43c3f0fd3839a5f649764f1fcfd3af4199049d3819466dbdb32051b28dc8145f88bffb122e0288fd1439f39d796602fbb52d01554b981d063a092deab13be36d0c44a65ccad4753b49defc173488a5a927432a61a642e7ae1574c09cc4908172cc53c4b34e39df6fd0ba5c5fc580c9583ad3bf7577bc7694fbf2cadd24bb75e39e70d836ecf9bc2ffe931e68d9c29eb5b6bb1a36f890bb65094ead26c0f3b48543e15ac5936093b2627391df96bd6d9aef2648d13924da39e554e8ff0349e2b1371310d4da9cfe10074f13eb1efe34cb5a9b597a41b5f85d874e9020538bd60bd0a9f9f34c9aabb26bfb176cd3e684dc17331acdb84f575ff80238430c6a7372575b696f4921ce81e08396dfd3348ea2e6507061a503cd9a89b55a1c6a902465cfd8d0c9e3f910a75ecb6496f8a53df35ae369104a0b43231b2fbec81cd3f3330bbe18a2cccc5b41804faff682697b12568f3906876041362f3bdf4faa5e7426711cfa144ded309de0eb9f1e020d0cacd8d79dfea44e6567e8ff8dd6a72c38f82e3e5d4661d3bdcb652c440249934da9cf696b6f35e120077df0d847d74af13d46e2d46d43b686e2b24914f89966cfd46f0d9f109e4526d50ef379ecb705fe172df7299352951be5d90b34c2ed7f4ba2bbd5a4e7d71c3166248ae5a2098dc6921d7c132054d38db81b938b8215698a4a8edd3289c334128975b6abfadca027e9c262bbf45c3e42b3dcd336da759808e3c85fae1aa8b8196ae8c44036d33a0fde2ee1542d071c8b1e428e521ca044b118d1d25201555b93faaa90573dffced08c88a65cb83ba5d60432cabb866233ec6ce125580de39d60df1203de4f42e9c8322bbdf7188f787ed7a11d20cd7bc15f7bf335e0d25effa618a17aec0d68dc42691f672bb8b155376bc3496ad1c8229b59ffd17b303682933cdada4a9d77dffa4cbd73705ab9b364275d5bbf31336c7eb720d4a49f9d910f87abe0d305c3fbee66d4bef48c5c1d5da997a359d02cee3bd1c683f20fb671ef1a6605a653850945fcc8daa50fd171741ef157d028342287288d927cb915a29e9b9c3fea7278e33b924c44dbcc56ad63cd38f88e167c89c3cba1ac9f4b6fcbf34a355de6d39f691c585711b24c2f7880bc23395c77e47205fff50e94ea4d137c9afef64eb783cee17b84abd67086db7b9e5c67e8c21e40f68e317dafdc0fe5019ad5427a229b590d9f0fe05d3402a119c98f0daceeb07c1fdfe5ea510905e898aebdf5d50f03e29b43dd949927686a32fda53456e6fd2502955b6220dc995ff3caeb7ea503ca416acf1bbbe87930016d7f1b522646d2202fd8b3604a9dc31e002945b369fcbdb3c9aa8f7fc43158f80229e69e5af90e72ce69b605f41f857c75e51422cd21092c6debdee44419ba0afa29281d9b19c67f848c730bdaeadebac8ecbf16fa162c38fcb4d4cec1f2f9d0fcd9eb91f612c9f4eadfdd562f0e219827aa3edb0791b29165108dd9c04b0f7a936628c84128290468ad66f968e31f896435e2775a0c4c18497853b49c1105405b6e472fe1132759810e96e21b8329e4e9807cee4719f22d4d1ecc51a287bc9de6f576c67a848657dc9f5dfe4914c4c88aed56b83e70c13942c527b90054210cba02b50e356e89618bd295c8782a3aca40689416dfb4ef1d305651ebb7e8f86ebfd4be57d0cce34ac14f95fe7523fddcf50832248d5b9b8cfe876087c88080a54deb</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>动态规划Dp</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]最小路径覆盖问题</title>
    <url>/2020/01/30/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E8%A6%86%E7%9B%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>用几条链覆盖有向图，链之间不能重叠，求最小的个数并输出方案</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>构造二层的网络跑最大流即可，答案没问题</p>
<p>构造方案的时候根据$2i+1$-&gt;$T$的流量找到链头，再根据中间的流量构造即可</p>
<p>好久之前写了个错的代码，测试过了，数据差评</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>更改构造方案</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">12005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f);</span><br><span class="line">	addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn], T;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">	q.push(<span class="number">0</span>); <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upper[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (flow &gt;= Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(e[i].to, min(Max - flow, e[i].f));</span><br><span class="line">			<span class="keyword">if</span> (tmp == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(<span class="number">0</span>, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, res[maxn], last[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		ins(u &lt;&lt; <span class="number">1</span>, v &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	&#125; T = n * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(<span class="number">0</span>, i &lt;&lt; <span class="number">1</span>, <span class="number">1</span>), ins(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, T, <span class="number">1</span>), last[i] = tot - <span class="number">1</span>;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="keyword">int</span> ans = n - maxflow;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (vis[i] || e[last[i]].f == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> cur = i &lt;&lt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">			vis[cur &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">bool</span> f = <span class="number">0</span>; <span class="built_in">printf</span>(<span class="string">"%d "</span>, cur &gt;&gt; <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = head[cur]; j; j = e[j].nxt)</span><br><span class="line">				<span class="keyword">if</span> (e[j].f == <span class="number">0</span> &amp;&amp; e[j].to != <span class="number">0</span>) f = <span class="number">1</span>, cur = e[j].to - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (!f) <span class="keyword">break</span>;</span><br><span class="line">		&#125; <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]太空飞行计划问题</title>
    <url>/2020/01/29/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E5%A4%AA%E7%A9%BA%E9%A3%9E%E8%A1%8C%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一些正权点和负权点，选择一个正权点就必须选择某些负权点，问最大收益</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>说说怎么建图</p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/21712.png" alt=""><br>来自 SSL_XXY_BlackCloud </p>
<p>如果求这个网络的最小割，那么要么S-正权点的边被割掉，要么和该正权点相连的负权点-T的边全部被割掉，这恰好符合题意</p>
<p>割掉的部分就是损失的部分，要不实验做不了，要不就是仪器要钱，用$\sum p$减去maxflow即可</p>
<p>输出方案的时候有<strong>trick</strong>，最后那次dfs中dep为0的实验就是被砍掉的，不做的；dep不为0的实验相连的仪器dep显然也不为0，又由T的dep为0可以推得它们连向T的边全部砍掉了</p>
<p>不能用e[i].f的理由就是e[i].f不能判断这个点是否被割掉，反例如下：</p>
<p><img src="https://i.loli.net/2020/01/30/3kOW9P6zSsemvpV.jpg" alt=""></p>
<p>虽然1-&gt;3流完了，可是1-&gt;3并没有被割掉</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>bfs没有重置dep</p>
<p>输出方案没想到用dep，在用e[i].f</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;addedge(u, v, f); addedge(v, u, <span class="number">0</span>);&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, c[maxn], p[maxn], tp;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], last[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">				dep[v] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (dep[v] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			flow += tmp;</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs()) maxflow += dfs(S, INF);</span><br><span class="line">&#125; <span class="keyword">bool</span> f;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + (ch &amp; <span class="number">15</span>), ch = getchar();</span><br><span class="line">	<span class="keyword">if</span> (ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span>) f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("1.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> v, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i); tp += p[i]; f = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (v = read())&#123;</span><br><span class="line">			ins(i, v + n, INF);</span><br><span class="line">			<span class="keyword">if</span> (f == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, c + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(S, i, p[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ins(i + n, T, c[i]);</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (dep[i] &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="keyword">if</span> (dep[i + n] &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i); <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tp - maxflow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]飞行员配对方案问题</title>
    <url>/2020/01/29/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E9%A3%9E%E8%A1%8C%E5%91%98%E9%85%8D%E5%AF%B9%E6%96%B9%E6%A1%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求二分图最大匹配</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>复习一下模板</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>bfs中vis的位置：要记录的是右边的有没有在这次匹配</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m, n, u, v, ans;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]; <span class="keyword">int</span> mat[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[v] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (dfs(mat[v]) || !mat[v])&#123;</span><br><span class="line">			mat[v] = cur;</span><br><span class="line">			mat[cur] = v;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">	<span class="keyword">while</span> (u != <span class="number">-1</span>)&#123;</span><br><span class="line">		addedge(u, v);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">		ans += dfs(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!ans) <span class="built_in">puts</span>(<span class="string">"No Solution!"</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (mat[i] &gt; i) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, mat[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流24题]餐巾计划问题</title>
    <url>/2020/01/27/%5B%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98%5D%E9%A4%90%E5%B7%BE%E8%AE%A1%E5%88%92%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每天需要$x_i$块餐巾，购买餐巾一块$p$元，快洗$f$元$tf$天，慢洗$s$元$ts$天</p>
<p>要满足每天的餐巾需求，问最少花费</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>拆点，$i$是脏餐巾，$i+n$是干净餐巾</p>
<p>购买餐巾从S连到i+n；快洗i连到i+tf+n；慢洗i连到i+ts+n；不洗i连到i+1</p>
<p>每天消耗$x_i$条，源点连i；i+n连汇点</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>当天用完的餐巾当天可以洗</p>
<p>long long</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">4001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f, c;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">4</span>]; <span class="keyword">int</span> head[maxn &lt;&lt; <span class="number">1</span>], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f, e[tot].c = c;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f, <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f, c);</span><br><span class="line">	addedge(v, u, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> pre[maxn &lt;&lt; <span class="number">1</span>], dis[maxn &lt;&lt; <span class="number">1</span>], flow[maxn &lt;&lt; <span class="number">1</span>], last[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis); <span class="built_in">memset</span>(flow, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> flow); <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span> inq);</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop(); q.push(S);</span><br><span class="line">	inq[S] = <span class="number">1</span>, dis[S] = <span class="number">0</span>; pre[T] = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop(); inq[cur] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dis[v] &gt; dis[cur] + e[i].c)&#123;</span><br><span class="line">				dis[v] = dis[cur] + e[i].c;</span><br><span class="line">				flow[v] = min(flow[cur], e[i].f);</span><br><span class="line">				pre[v] = cur;</span><br><span class="line">				last[v] = i;</span><br><span class="line">				<span class="keyword">if</span> (!inq[v])&#123;</span><br><span class="line">					inq[v] = <span class="number">1</span>; q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pre[T] != <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow, mincost;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (SPFA())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = T;</span><br><span class="line">		maxflow += flow[T];</span><br><span class="line">		mincost += flow[T] * dis[T];</span><br><span class="line">		<span class="keyword">while</span> (cur != S)&#123;</span><br><span class="line">			e[last[cur]].f -= flow[T];</span><br><span class="line">			e[last[cur] ^ <span class="number">1</span>].f += flow[T];</span><br><span class="line">			cur = pre[cur];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, tf, f, ts, s, p, x[maxn];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, x + i);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>, &amp;p, &amp;tf, &amp;f, &amp;ts, &amp;s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(S, i + n, INF, p), ins(i + n, T, x[i], <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (i != n) ins(i, i + <span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">		ins(S, i, x[i], <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (i + tf &lt;= n) ins(i, i + tf + n, INF, f);</span><br><span class="line">		<span class="keyword">if</span> (i + ts &lt;= n) ins(i, i + ts + n, INF, s);</span><br><span class="line">	&#125;</span><br><span class="line">	work();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, mincost);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络流24题</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最小费用最大流</tag>
        <tag>拆点</tag>
      </tags>
  </entry>
  <entry>
    <title>[PKUSC2018]真实排名</title>
    <url>/2020/01/25/%5BPKUSC2018%5D%E7%9C%9F%E5%AE%9E%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出序列$\{a_i\}$ ，将其中$k$个数翻倍，求对于每个数而言大于等于它的个数不变的方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>分类讨论即可，还是比较简单的题</p>
<p>当$a_i$不翻倍，则$[(a_i +1)/2),a_i)$中的数不得翻倍，其他随便$C_{n-x-1}^{k}$</p>
<p>当$a_i$翻倍，则$[a_i,2a_i)$中的数必须翻倍，其他随便$C_{n-x}^{k-x}$</p>
<p>边界讨论比较烦：0的时候要特判，不满足上述计算；相同的数要小心</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>排序没有排回来，导致答案乱序</p>
<p>0没有特判（真想不到！）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, a[maxn], tmp[maxn], fac[maxn], inv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * x % mo;</span><br><span class="line">		x = <span class="number">1l</span>l * x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span> || m == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (m &gt; n || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1l</span>l * fac[n] * inv[n - m] % mo * inv[m] % mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> x = lower_bound(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>, l) - tmp;</span><br><span class="line">	<span class="keyword">int</span> y = upper_bound(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>, r) - tmp;</span><br><span class="line">	<span class="keyword">return</span> y - x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), tmp[i] = a[i];</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mo;</span><br><span class="line">	inv[n] = <span class="built_in">pow</span>(fac[n], mo - <span class="number">2</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) inv[i] = <span class="number">1l</span>l * inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mo;</span><br><span class="line">	sort(tmp + <span class="number">1</span>, tmp + n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, C(n, k));</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">int</span> ans = (C(n - <span class="number">1</span> - f((a[i] + <span class="number">1</span>) / <span class="number">2</span>, a[i] - <span class="number">1</span>), k) + C(n - f(a[i], a[i] * <span class="number">2</span> - <span class="number">1</span>), k - f(a[i], a[i] * <span class="number">2</span> - <span class="number">1</span>))) % mo;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PKUSC</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>[APIO2016]划艇</title>
    <url>/2020/01/22/%5BAPIO2016%5D%E5%88%92%E8%89%87/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有n个数，每个数可以在$[a_i,b_i]$之间取值，也可以取0</p>
<p>要求数列中所有非零数构成严格递增序列</p>
<p>求方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>容易想到用$f_{i,max}$表示dp完前i个之后最大值为max的方案数</p>
<p>由于a、b太大，而我们关心的只是大小关系，因此想到离散化，令$f_{i,j}​$表示dp完前i个之后最大值在离散后的第j个区间中</p>
<p>$f_{i,j}$由两部分得到：当p&lt;j，$\sum_{p=0}^{j-1} f_{i-1,p} \cdot (t_{j+1}-t_j)$</p>
<p>当p=j，我们发现还须知道前面的数中有几个在该区间内，那么再加入一维状态k，</p>
<script type="math/tex; mode=display">
\sum_{k=1}^{lim_j} \frac{C_{t_{j+1}-t_j}^{k+1}}{C_{t_{j+1}-t_{j}}^{k}}=\sum_{k=1}^{lim_j-1} \frac{t_{j+1}-t_j-(k+1)}{k+1}</script><p>一个trick：离散化的时候把$a_i$和$b_i+1$丢进去，这样区间就是左闭右开的了</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一开始没有考虑p=j的情况</p>
<p>线性逆元打错了</p>
<p>f开小了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], f[maxn &lt;&lt; <span class="number">1</span>][maxn], sum[maxn &lt;&lt; <span class="number">1</span>], lim[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">0</span>, tmp[maxn &lt;&lt; <span class="number">1</span>], inv[maxn &lt;&lt; <span class="number">1</span>]; <span class="comment">// f [)</span></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("1.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, a + i, b + i);</span><br><span class="line">		tmp[i * <span class="number">2</span> - <span class="number">1</span>] = a[i]; tmp[i * <span class="number">2</span>] = b[i] + <span class="number">1</span>;</span><br><span class="line">	&#125; sort(tmp + <span class="number">1</span>, tmp + <span class="number">2</span> * n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> cnt = unique(tmp + <span class="number">1</span>, tmp + <span class="number">2</span> * n + <span class="number">1</span>) - tmp - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		a[i] = lower_bound(tmp + <span class="number">1</span>, tmp + cnt + <span class="number">1</span>, a[i]) - tmp;</span><br><span class="line">		b[i] = lower_bound(tmp + <span class="number">1</span>, tmp + cnt + <span class="number">1</span>, b[i] + <span class="number">1</span>) - tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n * <span class="number">2</span>; i++) inv[i] = <span class="number">1l</span>l * inv[mo % i] * (mo - mo / i) % mo;</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++) sum[j] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt; b[i]; j++)&#123;</span><br><span class="line">			++lim[j];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = lim[j] - <span class="number">1</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">				f[j][k + <span class="number">1</span>] = (f[j][k + <span class="number">1</span>] + <span class="number">1l</span>l * f[j][k] * (tmp[j + <span class="number">1</span>] - tmp[j] - k) % mo * inv[k + <span class="number">1</span>] % mo) % mo;</span><br><span class="line">			f[j][<span class="number">1</span>] = (f[j][<span class="number">1</span>] + <span class="number">1l</span>l * sum[j - <span class="number">1</span>] * (tmp[j + <span class="number">1</span>] - tmp[j]) % mo) % mo;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; cnt; j++)&#123;</span><br><span class="line">			sum[j] = sum[j - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = lim[j]; k &gt;= <span class="number">0</span>; k--) sum[j] = (sum[j] + f[j][k]) % mo;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (sum[cnt - <span class="number">1</span>] - <span class="number">1</span> + mo) % mo);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>APIO</category>
      </categories>
      <tags>
        <tag>组合数学</tag>
        <tag>动态规划Dp</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOI2004]郁闷的出纳员</title>
    <url>/2020/01/21/%5BNOI2004%5D%E9%83%81%E9%97%B7%E7%9A%84%E5%87%BA%E7%BA%B3%E5%91%98/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>维护数据结构，支持以下操作：</p>
<p>1.插入 2.把所有数的权值改变一个数 3.删除所有小于Min的数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>平衡树维护，2操作视为Min的上下浮动，插入时-delta即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>rotate没有pushup</p>
<p>删除的时候ans可能不止+1<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> Q, Min, delta = <span class="number">0</span>, cnt = <span class="number">0</span>, ans = <span class="number">0</span>, rt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> son[<span class="number">2</span>], v, sz, lnk, rd;</span><br><span class="line">	&#125;a[maxn * <span class="number">40</span>]; <span class="keyword">int</span> tot;</span><br><span class="line">	T()&#123;tot = <span class="number">0</span>;&#125;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> S(d) a[a[cur].son[d]]</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		a[cur].sz = S(<span class="number">0</span>).sz + S(<span class="number">1</span>).sz + a[cur].v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k = a[cur].son[d ^ <span class="number">1</span>];</span><br><span class="line">		a[cur].son[d ^ <span class="number">1</span>] = a[k].son[d];</span><br><span class="line">		a[k].son[d] = cur;</span><br><span class="line">		pushup(cur); pushup(k);</span><br><span class="line">		cur = k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur)&#123;</span><br><span class="line">			cur = ++tot;</span><br><span class="line">			a[cur].lnk = x;</span><br><span class="line">			a[cur].rd = rand();</span><br><span class="line">			a[cur].v = a[cur].sz = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk == x)&#123;</span><br><span class="line">			a[cur].v++;</span><br><span class="line">			a[cur].sz++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> d = a[cur].lnk &lt; x;</span><br><span class="line">		ins(a[cur].son[d], x);</span><br><span class="line">		<span class="keyword">if</span> (S(d).rd &gt; a[cur].rd) rotate(cur, d ^ <span class="number">1</span>);</span><br><span class="line">		a[cur].sz = S(<span class="number">0</span>).sz + S(<span class="number">1</span>).sz + a[cur].v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &gt; x) del(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[cur].lnk &lt; x) del(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!a[cur].son[<span class="number">0</span>] &amp;&amp; !a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				ans += a[cur].v;</span><br><span class="line">				a[cur].sz = <span class="number">0</span>; a[cur].v = <span class="number">0</span>; cur = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!a[cur].son[<span class="number">0</span>] &amp;&amp; a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				rotate(cur, <span class="number">0</span>);</span><br><span class="line">				del(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a[cur].son[<span class="number">0</span>] &amp;&amp; !a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				rotate(cur, <span class="number">1</span>);</span><br><span class="line">				del(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">int</span> d = S(<span class="number">0</span>).rd &gt; S(<span class="number">1</span>).rd;</span><br><span class="line">				rotate(cur, d);</span><br><span class="line">				del(a[cur].son[d], x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		a[cur].sz = S(<span class="number">0</span>).sz + S(<span class="number">1</span>).sz + a[cur].v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (S(<span class="number">0</span>).sz &gt;= x) <span class="keyword">return</span> find(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (S(<span class="number">0</span>).sz + a[cur].v &gt;= x) <span class="keyword">return</span> a[cur].lnk;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> find(a[cur].son[<span class="number">1</span>], x - S(<span class="number">0</span>).sz - a[cur].v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> -INF;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &gt;= x) <span class="keyword">return</span> pre(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">return</span> max(a[cur].lnk, pre(a[cur].son[<span class="number">1</span>], x));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	srand(<span class="keyword">unsigned</span>(time(<span class="number">0</span>)));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;Q, &amp;Min);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">char</span> opt[<span class="number">5</span>]; <span class="keyword">int</span> k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, opt, &amp;k);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'I'</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (k &gt;= Min) t.ins(rt, k - delta), ++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'A'</span>) delta += k;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'S'</span>) delta -= k;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'F'</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (k &gt; cnt - ans) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.find(rt, cnt - ans - k + <span class="number">1</span>) + delta);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (t.pre(rt, Min - delta) != -INF)&#123;</span><br><span class="line">			t.del(rt, t.pre(rt, Min - delta));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>NOI</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>[CQOI2017]老C的方块</title>
    <url>/2020/01/20/%5BCQOI2017%5D%E8%80%81C%E7%9A%84%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在下图所示的方阵中，蓝边是挡板，按照一定的规律出现</p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/5092.png" alt=""></p>
<p>有一些方格中放了方块，清除方块要一定代价，求最小的代价，使得以下的形状不出现</p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/5093.png" alt=""></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先棋盘黑白染色，然后再按照是否与挡板相邻染成四色</p>
<p>重要发现：所有不喜欢的图形一定由四色各一种组成</p>
<p>建四层的图，跑网络最大流即可，因为最大流一定是所需的最小代价</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>dfs的时候min(Max-flow,e[i].f)，把已有的flow减掉！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> S, T, dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">	q.push(S); <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">			<span class="keyword">if</span> (e[i].f == <span class="number">0</span> || dep[v] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			dep[v] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">			q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (dep[T] &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (flow &gt;= Max) <span class="keyword">return</span> Max;</span><br><span class="line">		<span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dep[v] == dep[cur] + <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(v, min(Max - flow, e[i].f));</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs()) maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; lnk;</span><br><span class="line"><span class="keyword">int</span> L, C, n; <span class="keyword">int</span> x[maxn], y[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;C, &amp;L, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, x + i, y + i, w + i);</span><br><span class="line">		lnk[MP(x[i], y[i])] = i;</span><br><span class="line">	&#125; S = n + <span class="number">1</span>, T = n + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (x[i] % <span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (y[i] % <span class="number">2</span> == <span class="number">1</span>) ins(S, i, w[i]);</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] + <span class="number">1</span>, y[i])]) ins(lnk[MP(x[i] + <span class="number">1</span>, y[i])], i, INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] + <span class="number">1</span>)]) ins(lnk[MP(x[i], y[i] + <span class="number">1</span>)], i, INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] - <span class="number">1</span>)]) ins(lnk[MP(x[i], y[i] - <span class="number">1</span>)], i, INF);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x[i] % <span class="number">4</span> == <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (y[i] % <span class="number">2</span> == <span class="number">0</span>) ins(S, i, w[i]);</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] - <span class="number">1</span>)]) ins(lnk[MP(x[i], y[i] - <span class="number">1</span>)], i, INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] + <span class="number">1</span>)]) ins(lnk[MP(x[i], y[i] + <span class="number">1</span>)], i, INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] - <span class="number">1</span>, y[i])]) ins(lnk[MP(x[i] - <span class="number">1</span>, y[i])], i, INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] + <span class="number">1</span>, y[i])]) ins(i, lnk[MP(x[i] + <span class="number">1</span>, y[i])], min(w[i], w[lnk[MP(x[i] + <span class="number">1</span>, y[i])]]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x[i] % <span class="number">4</span> == <span class="number">2</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (y[i] % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] - <span class="number">1</span>)]) ins(i, lnk[MP(x[i], y[i] - <span class="number">1</span>)], INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] + <span class="number">1</span>)]) ins(i, lnk[MP(x[i], y[i] + <span class="number">1</span>)], INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] + <span class="number">1</span>, y[i])]) ins(i, lnk[MP(x[i] + <span class="number">1</span>, y[i])], INF);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> ins(i, T, w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x[i] % <span class="number">4</span> == <span class="number">3</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (y[i] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] - <span class="number">1</span>)]) ins(i, lnk[MP(x[i], y[i] - <span class="number">1</span>)], INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i], y[i] + <span class="number">1</span>)]) ins(i, lnk[MP(x[i], y[i] + <span class="number">1</span>)], INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] - <span class="number">1</span>, y[i])]) ins(i, lnk[MP(x[i] - <span class="number">1</span>, y[i])], INF);</span><br><span class="line">				<span class="keyword">if</span> (lnk[MP(x[i] + <span class="number">1</span>, y[i])]) ins(lnk[MP(x[i] + <span class="number">1</span>, y[i])], i, min(w[i], w[lnk[MP(x[i] + <span class="number">1</span>, y[i])]]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> ins(i, T, w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxflow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CQOI</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>染色</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]Treap</title>
    <url>/2020/01/19/%5B%E6%A8%A1%E6%9D%BF%5DTreap/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>维护一个数据结构，支持插入；删除；查询某个数的排名；查询排名为x的数；查询前驱；查询后继</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>Treap，结合二叉搜索树和堆</p>
<p>按照随机权值以堆的形式排列，保证复杂度</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>暂无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> S(d) a[a[cur].son[d]]</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> son[<span class="number">2</span>], v, sz, lnk, rd;</span><br><span class="line">	&#125;a[maxn &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> tot;</span><br><span class="line">	T()&#123;tot = <span class="number">0</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		a[cur].sz = S(<span class="number">0</span>).sz + S(<span class="number">1</span>).sz + a[cur].v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> k = a[cur].son[d ^ <span class="number">1</span>];</span><br><span class="line">		a[cur].son[d ^ <span class="number">1</span>] = a[k].son[d];</span><br><span class="line">		a[k].son[d] = cur;</span><br><span class="line">		pushup(cur); pushup(k);</span><br><span class="line">		cur = k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur)&#123;</span><br><span class="line">			cur = ++tot;</span><br><span class="line">			a[cur].sz = a[cur].v = <span class="number">1</span>;</span><br><span class="line">			a[cur].lnk = x;</span><br><span class="line">			a[cur].rd = rand();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk == x)&#123;</span><br><span class="line">			a[cur].v++; a[cur].sz++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> d = (x &gt; a[cur].lnk);</span><br><span class="line">		ins(a[cur].son[d], x);</span><br><span class="line">		<span class="keyword">if</span> (a[cur].rd &lt; S(d).rd) rotate(cur, d ^ <span class="number">1</span>);</span><br><span class="line">		pushup(cur); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; a[cur].lnk) del(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x &gt; a[cur].lnk) del(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (a[cur].v &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                a[cur].v--;</span><br><span class="line">                a[cur].sz--;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!a[cur].son[<span class="number">0</span>] &amp;&amp; !a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				a[cur].sz--;</span><br><span class="line">				<span class="keyword">if</span> (--a[cur].v == <span class="number">0</span>) cur = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a[cur].son[<span class="number">0</span>] &amp;&amp; !a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				rotate(cur, <span class="number">1</span>);</span><br><span class="line">				del(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!a[cur].son[<span class="number">0</span>] &amp;&amp; a[cur].son[<span class="number">1</span>])&#123;</span><br><span class="line">				rotate(cur, <span class="number">0</span>);</span><br><span class="line">				del(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">int</span> d = (S(<span class="number">0</span>).rd &gt; S(<span class="number">1</span>).rd);</span><br><span class="line">				rotate(cur, d);</span><br><span class="line">				del(a[cur].son[d], x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pushup(cur);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk == x) <span class="keyword">return</span> S(<span class="number">0</span>).sz + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &lt; x) <span class="keyword">return</span> S(<span class="number">0</span>).sz + a[cur].v + rank(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &gt; x) <span class="keyword">return</span> rank(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (S(<span class="number">0</span>).sz &gt;= x) <span class="keyword">return</span> find(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (S(<span class="number">0</span>).sz + a[cur].v &gt;= x) <span class="keyword">return</span> a[cur].lnk;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> find(a[cur].son[<span class="number">1</span>], x - S(<span class="number">0</span>).sz - a[cur].v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> -INF;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &gt;= x) <span class="keyword">return</span> pre(a[cur].son[<span class="number">0</span>], x);</span><br><span class="line">		<span class="keyword">return</span> max(a[cur].lnk, pre(a[cur].son[<span class="number">1</span>], x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">suf</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) <span class="keyword">return</span> INF;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].lnk &lt;= x) <span class="keyword">return</span> suf(a[cur].son[<span class="number">1</span>], x);</span><br><span class="line">		<span class="keyword">return</span> min(a[cur].lnk, suf(a[cur].son[<span class="number">0</span>], x));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t; <span class="keyword">int</span> Q, rt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> opt, x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;opt, &amp;x);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>) t.ins(rt, x);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">2</span>) t.del(rt, x);</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.rank(rt, x));</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.find(rt, x));</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.pre(rt, x));</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">6</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.suf(rt, x));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>模板</tag>
        <tag>Treap</tag>
      </tags>
  </entry>
  <entry>
    <title>[HNOI2015]亚瑟王</title>
    <url>/2020/01/19/%5BHNOI2015%5D%E4%BA%9A%E7%91%9F%E7%8E%8B/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n$张牌，每张牌有$p_i$的概率被打出，造成$d_i$的伤害</p>
<p>每回合按顺序考虑每一张牌，若该牌打出就结束该回合</p>
<p>共有$r$轮，求造成的期望伤害</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>要解决的就是第i张牌前打出牌数量不同，设前i张牌中出了j张的概率为$f_{i,j}$，容易得出f的递推式</p>
<p>分别解决每张牌被打出的概率</p>
<script type="math/tex; mode=display">
P_i = \sum_{j=0}^{r} f_{i-1,j} \cdot (1 - (1 - p_i)^{r-j})</script><p>统计答案即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>循环的范围太小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> p[maxn], d[maxn], <span class="built_in">pow</span>[maxn][maxn], f[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &lt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T, n, r;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">	<span class="keyword">while</span> (T--)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(<span class="built_in">pow</span>, <span class="number">0</span>, <span class="keyword">sizeof</span> <span class="built_in">pow</span>); <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;r);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, p + i, d + i);</span><br><span class="line">			<span class="built_in">pow</span>[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= r; j++) <span class="built_in">pow</span>[i][j] = <span class="built_in">pow</span>[i][j - <span class="number">1</span>] * (<span class="number">1</span> - p[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= min(i, r); j++)&#123;</span><br><span class="line">				f[i][j] = f[i - <span class="number">1</span>][j] * <span class="built_in">pow</span>[i][r - j];</span><br><span class="line">				<span class="keyword">if</span> (j != <span class="number">0</span>) f[i][j] += f[i - <span class="number">1</span>][j - <span class="number">1</span>] * (<span class="number">1</span> - <span class="built_in">pow</span>[i][r - j + <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">double</span> P = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= min(i, r); j++)</span><br><span class="line">				P += f[i - <span class="number">1</span>][j] * (<span class="number">1</span> - <span class="built_in">pow</span>[i][r - j]);</span><br><span class="line">			ans += P * d[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>[PKUWC2018]Minimax</title>
    <url>/2020/01/15/%5BPKUWC2018%5DMinimax/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵二叉树，即每个节点最多两个子节点</p>
<p>对于非叶子节点$i$，有$p_i$的概率选择子节点中权值较小的，有$1-p_i$的概率选择较大的</p>
<p>对于叶子节点，权值给出，且保证所有叶子节点的权值不相同</p>
<p>问最后根节点的权值情况</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先把权值离散化，对于节点cur，权值为i的概率为</p>
<script type="math/tex; mode=display">
p_{cur}\cdot (\sum_{j=1}^{i}f_j)+(1-p_{cur})\cdot (\sum_{j=i}^{m}f_j)</script><p>考虑优化向上合并的过程，刚好可以用线段树合并，合并时顺便维护前缀和、后缀和即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>线段树合并的时候先合并了左儿子，权值改变了，更新右儿子的时候出问题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * x % mo;</span><br><span class="line">		x = <span class="number">1l</span>l * x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv = <span class="built_in">pow</span>(<span class="number">10000</span>, mo - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> link[maxn], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ls, rs, v, tg;</span><br><span class="line">		A()&#123;tg = <span class="number">1</span>;&#125;</span><br><span class="line">	&#125;a[maxn * <span class="number">40</span>];</span><br><span class="line">	<span class="keyword">int</span> rt[maxn], tot = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].tg == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">		LS.v = <span class="number">1l</span>l * LS.v * a[cur].tg % mo;</span><br><span class="line">		RS.v = <span class="number">1l</span>l * RS.v * a[cur].tg % mo;</span><br><span class="line">		LS.tg = <span class="number">1l</span>l * LS.tg * a[cur].tg % mo;</span><br><span class="line">		RS.tg = <span class="number">1l</span>l * RS.tg * a[cur].tg % mo;</span><br><span class="line">		a[cur].tg = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur) cur = ++tot;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">			a[cur].v = k;</span><br><span class="line">			<span class="keyword">return</span> cur;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; pushdown(cur);</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid) a[cur].ls = upd(a[cur].ls, l, mid, p, k);</span><br><span class="line">		<span class="keyword">else</span> a[cur].rs = upd(a[cur].rs, mid + <span class="number">1</span>, r, p, k);</span><br><span class="line">		a[cur].v = (LS.v + RS.v) % mo;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pfu, <span class="keyword">int</span> sfu, <span class="keyword">int</span> pfv, <span class="keyword">int</span> sfv, <span class="keyword">int</span> P)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur &amp;&amp; !v) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		pushdown(cur); pushdown(v);</span><br><span class="line">		<span class="keyword">if</span> (!cur)&#123;</span><br><span class="line">			a[v].v = <span class="number">1l</span>l * a[v].v * (<span class="number">1l</span>l * P * pfu % mo + <span class="number">1l</span>l * (<span class="number">1</span> + mo - P) * sfu % mo) % mo;</span><br><span class="line">			a[v].tg = <span class="number">1l</span>l * a[v].tg * (<span class="number">1l</span>l * P * pfu % mo + <span class="number">1l</span>l * (<span class="number">1</span> + mo - P) * sfu % mo) % mo;</span><br><span class="line">			<span class="keyword">return</span> v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!v)&#123;</span><br><span class="line">			a[cur].v = <span class="number">1l</span>l * a[cur].v * (<span class="number">1l</span>l * P * pfv % mo + <span class="number">1l</span>l * (<span class="number">1</span> + mo - P) * sfv % mo) % mo;</span><br><span class="line">			a[cur].tg = <span class="number">1l</span>l * a[cur].tg * (<span class="number">1l</span>l * P * pfv % mo + <span class="number">1l</span>l * (<span class="number">1</span> + mo - P) * sfv % mo) % mo;</span><br><span class="line">			<span class="keyword">return</span> cur;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, t1 = LS.v, t2 = RS.v, t3 = a[a[v].ls].v, t4 = a[a[v].rs].v;</span><br><span class="line">		a[cur].ls = Merge(a[cur].ls, a[v].ls, l, mid, pfu, (sfu + t2) % mo, pfv, (sfv + t4) % mo, P);</span><br><span class="line">		a[cur].rs = Merge(a[cur].rs, a[v].rs, mid + <span class="number">1</span>, r, (pfu + t1) % mo, sfu, (pfv + t3) % mo, sfv, P);</span><br><span class="line">		a[cur].v = (LS.v + RS.v) % mo;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">			ans = (ans + <span class="number">1l</span>l * l * link[l] % mo * a[cur].v % mo * a[cur].v % mo) % mo;</span><br><span class="line"><span class="comment">//			printf("%d %d %d\n", l, link[l], a[cur].v);</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		calc(a[cur].ls, l, mid);</span><br><span class="line">		calc(a[cur].rs, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"><span class="keyword">int</span> v[maxn], tmp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (head[cur] == <span class="number">0</span>) t.rt[cur] = t.upd(t.rt[cur], <span class="number">1</span>, cnt, v[cur], <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		dfs(e[i].to);</span><br><span class="line">		<span class="keyword">if</span> (t.rt[cur] != <span class="number">0</span>) t.rt[cur] = t.Merge(t.rt[cur], t.rt[e[i].to], <span class="number">1</span>, cnt, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1l</span>l * p[cur] * inv % mo);</span><br><span class="line">		<span class="keyword">else</span> t.rt[cur] = t.rt[e[i].to];</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("1.in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> fa, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;fa); addedge(fa, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (head[i] == <span class="number">0</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, v + i), tmp[++cnt] = v[i];</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">	&#125; sort(tmp + <span class="number">1</span>, tmp + cnt + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (head[i] == <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> p = lower_bound(tmp + <span class="number">1</span>, tmp + cnt + <span class="number">1</span>, v[i]) - tmp;</span><br><span class="line">			link[p] = v[i];</span><br><span class="line">			v[i] = p;</span><br><span class="line">		&#125;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	t.calc(t.rt[<span class="number">1</span>], <span class="number">1</span>, cnt);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t.ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PKUWC</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>线段树合并</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF555E]Case Of Computer Network</title>
    <url>/2020/01/01/%5BCF555E%5DCase%20Of%20Computer%20Network/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给无向图定向，使得满足q组u能到v</p>
<p>只需告知可能或不可能</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>显然边双里的点可以不用管，因此想到缩点</p>
<p>缩点之后要判断是否有一条边被两种不同的需要覆盖，链上打标记差分即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>本地调的时候有两个dfs没调用，缩点的时候注意不要一条边走两次</p>
<p>CF上一遍过</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, Q, u[maxn], v[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], low[maxn], tdx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> col[maxn], Ctot = <span class="number">0</span>, Ttot = <span class="number">0</span>; <span class="keyword">bool</span> ins[maxn];</span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s; <span class="keyword">int</span> rt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">	rt[cur] = Ttot;</span><br><span class="line">	dfn[cur] = low[cur] = ++tdx;</span><br><span class="line">	s.push(cur); ins[cur] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">if</span> ((i ^ <span class="number">1</span>) == pre) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) Tarjan(v, i), low[cur] = min(low[cur], low[v]);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ins[v]) low[cur] = min(low[cur], low[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (low[cur] == dfn[cur])&#123;</span><br><span class="line">		++Ctot;</span><br><span class="line">		<span class="keyword">while</span> (s.top() != cur)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = s.top(); s.pop();</span><br><span class="line">			col[tmp] = Ctot;</span><br><span class="line">			ins[tmp] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		col[cur] = Ctot; ins[cur] = <span class="number">0</span>; s.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], f[maxn][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	f[cur][<span class="number">0</span>] = fa; dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[cur]; i++)</span><br><span class="line">		f[cur][i] = f[f[cur][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">		<span class="keyword">if</span> (e[i].to != fa) dfs1(e[i].to, cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (dep[v] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[u]) v = f[v][i];</span><br><span class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];</span><br><span class="line">	<span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tg[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		dfs2(v, cur);</span><br><span class="line">		tg[<span class="number">0</span>][cur] += tg[<span class="number">0</span>][v];</span><br><span class="line">		tg[<span class="number">1</span>][cur] += tg[<span class="number">1</span>][v];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (tg[<span class="number">0</span>][cur] &gt; <span class="number">0</span> &amp;&amp; tg[<span class="number">1</span>][cur] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, u + i, v + i);</span><br><span class="line">		addedge(u[i], v[i]);</span><br><span class="line">		addedge(v[i], u[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (!dfn[i]) ++Ttot, Tarjan(i, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span> e); <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		<span class="keyword">if</span> (col[u[i]] != col[v[i]]) addedge(col[u[i]], col[v[i]]), addedge(col[v[i]], col[u[i]]);</span><br><span class="line">	dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> qu, qv, i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;qu, &amp;qv);</span><br><span class="line">		<span class="keyword">if</span> (rt[qu] != rt[qv])&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		qu = col[qu], qv = col[qv];</span><br><span class="line">		<span class="keyword">int</span> lca = LCA(qu, qv);</span><br><span class="line">		tg[<span class="number">0</span>][qu]++, tg[<span class="number">0</span>][lca]--;</span><br><span class="line">		tg[<span class="number">1</span>][qv]++, tg[<span class="number">1</span>][lca]--;</span><br><span class="line">	&#125; dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>树</tag>
        <tag>差分</tag>
        <tag>边双</tag>
        <tag>Tarjan</tag>
        <tag>缩点</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF813D]Two Melodies</title>
    <url>/2019/12/24/%5BCF813D%5DTwo%20Melodies/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$\{a_i\}$中找出两个子序列（可以不连续），使得每个序列中相邻两数查为1或为7的倍数</p>
<p>求两个子序列长度和的最大值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令 $f_{i,j}$表示前面两个断点分别在i和j的最大值</p>
<p>暴力$\theta(n^3)$转移，枚举断点，枚举原序列的数字均可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">	f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = i - <span class="number">1</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">			<span class="keyword">if</span> (_abs(a[i] - a[k]) == <span class="number">1</span> || a[i] % <span class="number">7</span> == a[k] % <span class="number">7</span>) f[j][i] = max(f[j][i], f[j][k] + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (_abs(a[i] - a[j]) == <span class="number">1</span> || a[i] % <span class="number">7</span> == a[j] % <span class="number">7</span> || j == <span class="number">0</span>) f[k][i] = max(f[k][i], f[j][k] + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (_abs(a[j] - a[k]) == <span class="number">1</span> || a[j] % <span class="number">7</span> == a[k] % <span class="number">7</span> || k == <span class="number">0</span>) f[i][j] = max(f[i][j], f[i][k] + <span class="number">1</span>);</span><br><span class="line">			f[j][i] = f[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对枚举断点的进行优化，记录所有$k\in [0,j-1]$的满足条件的Max即可</p>
<p><del>前一种比较难优化</del></p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一开始写的没法优化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn], n, a[maxn], Max1[maxn * <span class="number">100</span>], Max2[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> _abs(<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(Max1, <span class="number">0</span>, <span class="keyword">sizeof</span> Max1); <span class="built_in">memset</span>(Max2, <span class="number">0</span>, <span class="keyword">sizeof</span> Max2);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">			Max1[a[j]] = max(Max1[a[j]], f[i][j]),</span><br><span class="line">			Max2[a[j] % <span class="number">7</span>] = max(Max2[a[j] % <span class="number">7</span>], f[i][j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">			f[i][j] = max(f[i][j], max(Max1[a[j] - <span class="number">1</span>], Max1[a[j] + <span class="number">1</span>]) + <span class="number">1</span>);</span><br><span class="line">			f[i][j] = max(f[i][j], f[i][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line">			f[i][j] = max(f[i][j], Max2[a[j] % <span class="number">7</span>] + <span class="number">1</span>);</span><br><span class="line">			Max1[a[j]] = max(Max1[a[j]], f[i][j]);</span><br><span class="line">			Max2[a[j] % <span class="number">7</span>] = max(Max2[a[j] % <span class="number">7</span>], f[i][j]);</span><br><span class="line">			f[j][i] = f[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) ans = max(ans, f[i][j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF796E]Exam Cheating</title>
    <url>/2019/12/21/%5BCF796E%5DExam%20Cheating/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>考试中学渣旁边坐着两个学霸，学渣一题都不会，学霸各有一些题会做且保证正确</p>
<p>学渣一共可以偷看P次，每次最多看一个学霸的连续的K题，问他最多看对几题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令$f_{i,p,l,r}$表示考虑到第i道题目，用了p次偷看机会，左边学霸上一次偷看还有l道题可以看，右边学霸上一次偷看还有r道题可以看的最优解</p>
<p>分情况讨论（看哪边，是否重新开始）即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一个地方dr打成r</p>
<p>\(a[2][maxn]\)定义成\(a[maxn][2]\)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre f[(i + 1) % 2]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> now f[i % 2]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dl max(l - 1, 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dr max(r - 1, 0)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, P, K, l[<span class="number">2</span>], a[<span class="number">2</span>][maxn], f[<span class="number">2</span>][maxn][<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;P, &amp;K);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t, i = <span class="number">1</span>; i &lt;= l[<span class="number">0</span>]; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t); a[<span class="number">0</span>][t] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;l[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t, i = <span class="number">1</span>; i &lt;= l[<span class="number">1</span>]; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t); a[<span class="number">1</span>][t] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (P * K &gt;= <span class="number">2</span> * n)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) tmp += (a[<span class="number">0</span>][i] | a[<span class="number">1</span>][i]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tmp);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f[<span class="number">0</span>], <span class="number">-0x3f</span>, <span class="keyword">sizeof</span> f[<span class="number">0</span>]); f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(now, <span class="number">-0x3f</span>, <span class="keyword">sizeof</span> now);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt;= P; p++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; K; l++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; K; r++)&#123;</span><br><span class="line">					now[p][dl][dr] = max(now[p][dl][dr], pre[p][l][r]);</span><br><span class="line">					<span class="keyword">if</span> (l &gt; <span class="number">0</span>) now[p][l - <span class="number">1</span>][dr] = max(now[p][l - <span class="number">1</span>][dr], pre[p][l][r] + a[<span class="number">0</span>][i]);</span><br><span class="line">					now[p + <span class="number">1</span>][K - <span class="number">1</span>][dr] = max(now[p + <span class="number">1</span>][K - <span class="number">1</span>][dr], pre[p][l][r] + a[<span class="number">0</span>][i]);</span><br><span class="line">					<span class="keyword">if</span> (r &gt; <span class="number">0</span>) now[p][dl][r - <span class="number">1</span>] = max(now[p][dl][r - <span class="number">1</span>], pre[p][l][r] + a[<span class="number">1</span>][i]);</span><br><span class="line">					now[p + <span class="number">1</span>][dl][K - <span class="number">1</span>] = max(now[p + <span class="number">1</span>][dl][K - <span class="number">1</span>], pre[p][l][r] + a[<span class="number">1</span>][i]);</span><br><span class="line">					<span class="keyword">if</span> (l &gt; <span class="number">0</span> &amp;&amp; r &gt; <span class="number">0</span>) now[p][l - <span class="number">1</span>][r - <span class="number">1</span>] = max(now[p][l - <span class="number">1</span>][r - <span class="number">1</span>], pre[p][l][r] + (a[<span class="number">0</span>][i] | a[<span class="number">1</span>][i]));</span><br><span class="line">					<span class="keyword">if</span> (r &gt; <span class="number">0</span>) now[p + <span class="number">1</span>][K - <span class="number">1</span>][r - <span class="number">1</span>] = max(now[p + <span class="number">1</span>][K - <span class="number">1</span>][r - <span class="number">1</span>], pre[p][l][r] + (a[<span class="number">0</span>][i] | a[<span class="number">1</span>][i]));</span><br><span class="line">					<span class="keyword">if</span> (l &gt; <span class="number">0</span>) now[p + <span class="number">1</span>][l - <span class="number">1</span>][K - <span class="number">1</span>] = max(now[p + <span class="number">1</span>][l - <span class="number">1</span>][K - <span class="number">1</span>], pre[p][l][r] + (a[<span class="number">0</span>][i] | a[<span class="number">1</span>][i])); </span><br><span class="line">					now[p + <span class="number">2</span>][K - <span class="number">1</span>][K - <span class="number">1</span>] = max(now[p + <span class="number">2</span>][K - <span class="number">1</span>][K - <span class="number">1</span>], pre[p][l][r] + (a[<span class="number">0</span>][i] | a[<span class="number">1</span>][i]));</span><br><span class="line">				&#125;</span><br><span class="line">	&#125; <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt;= P; p++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt;= K; l++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt;= K; r++)</span><br><span class="line">				ans = max(ans, f[n % <span class="number">2</span>][p][l][r]);</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF1234F]Yet Another Substring Reverse</title>
    <url>/2019/12/19/%5BCF1234F%5DYet%20Another%20Substring%20Reverse/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你可以将字符串的一个子串进行翻转，使得字符串中连续的不出现相同字符的长度最大</p>
<p>$字符集\leq 20$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>翻转相当于把两个不相交的子串合并，因为顺序没有影响（如ABC-&gt;ACB）</p>
<p>状态压缩，令$f_S$表示答案子串为S的最优解</p>
<p>令T为S的补集，可以发现</p>
<script type="math/tex; mode=display">
ans = max\{f_{A\in S} + f_{B\in T}\}</script><p>预处理Max即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; <span class="number">20</span>], n, ans;</span><br><span class="line"><span class="keyword">char</span> str[maxn]; <span class="keyword">bool</span> vis[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>); n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>, S = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++) vis[j] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span> (vis[str[j] - <span class="string">'a'</span>]) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				vis[str[j] - <span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">				++cnt;</span><br><span class="line">				S |= (<span class="number">1</span> &lt;&lt; (str[j] - <span class="string">'a'</span>));</span><br><span class="line">				f[S] = max(f[S], cnt);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">			<span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>) f[i] = max(f[i], f[i ^ (<span class="number">1</span> &lt;&lt; j)]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">20</span>); i++)</span><br><span class="line">		ans = max(ans, f[i] + f[((<span class="number">1</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>) ^ i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF1238E]Keyboard Purchase</title>
    <url>/2019/12/19/%5BCF1238E%5DKeyboard%20Purchase/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定包含m种字符的字符串，找到一种键盘，使它是m个字符的一种排列</p>
<p>打完这段字符串，会在键盘上移动一些距离，求距离最小值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题不能用传统方式去看，因为前面字符的排列方式会影响后面的Dp，不得不退化到n!</p>
<p>最好的情况是令这m个字符在键盘上距离皆为1，令$f_S$为当前已经确定S中的字符</p>
<p>显然若一个字符已经确定，而另一个没有确认且没有在这次被确认，它们之间的距离会+1</p>
<p>得到转移</p>
<script type="math/tex; mode=display">
f_S=min\{f_{S-\{i\}}+c\}</script><h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; <span class="number">20</span>], n, m, c[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> str[(<span class="keyword">int</span>)<span class="number">1e5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, str);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) c[str[i] - <span class="string">'a'</span>][str[i + <span class="number">1</span>] - <span class="string">'a'</span>]++, c[str[i + <span class="number">1</span>] - <span class="string">'a'</span>][str[i] - <span class="string">'a'</span>]++;</span><br><span class="line">	<span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f); f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; m); i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; m; k++)</span><br><span class="line">				<span class="keyword">if</span> ((i &gt;&gt; j &amp; <span class="number">1</span>) ^ (i &gt;&gt; k &amp; <span class="number">1</span>)) t += c[j][k];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">			<span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) f[i] = min(f[i], f[i ^ (<span class="number">1</span> &lt;&lt; j)] + t);</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[(<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>idea</tag>
        <tag>动态规划Dp</tag>
        <tag>状态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>[ARC073F]Many Moves</title>
    <url>/2019/12/19/%5BARC073F%5DMany%20Moves/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在编号为1~n的n个格子上有2个棋子，初始时在A和B</p>
<p>现给出$\{x_i\}$，需要一次将某个棋子移到x处，允许有棋子在同一个格子，求最小的移动距离和</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令$f_j$表示前一步完成时除了在x处的棋子，另一个棋子在j的最小值</p>
<p>容易得到转移：</p>
<script type="math/tex; mode=display">
\begin{cases}
f_{i,j}=f_{i-1,j}+|x_i-x_{i-1}|\\
f_{i,x_{i-1}}=min\{min\{f_{i-1,j}+|j-x_i|\},f_{i-1,x_{i-1}}+|x_i-x_{i-1}|\}\\
\end{cases}</script><p>绝对值拆开，线段树维护区间$v-p,v+p$最小值即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>开始赋值的时候应该是$v_A=|x_1-B|$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l, r;</span><br><span class="line">		LL Minl, Minr, tg;</span><br><span class="line">	&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">			a[cur].Minl = INF;</span><br><span class="line">			a[cur].Minr = INF;</span><br><span class="line">			a[cur].tg = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125; <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		build(cur &lt;&lt; <span class="number">1</span>, l, mid); build(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">		a[cur].Minl = min(a[cur &lt;&lt; <span class="number">1</span>].Minl, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minl);</span><br><span class="line">		a[cur].Minr = min(a[cur &lt;&lt; <span class="number">1</span>].Minr, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].tg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].tg += a[cur].tg;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].Minl += a[cur].tg;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].Minr += a[cur].tg; </span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tg += a[cur].tg;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minl += a[cur].tg;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minr += a[cur].tg;</span><br><span class="line">		a[cur].tg = <span class="number">0</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">Query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l == a[cur].r) <span class="keyword">return</span> a[cur].Minl + a[cur].l;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		<span class="keyword">int</span> mid = a[cur].l + a[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid) <span class="keyword">return</span> Query(cur &lt;&lt; <span class="number">1</span>, p);</span><br><span class="line">		<span class="keyword">return</span> Query(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">QMinl</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span> INF;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r) <span class="keyword">return</span> a[cur].Minl;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		<span class="keyword">return</span> min(QMinl(cur &lt;&lt; <span class="number">1</span>, l, r), QMinl(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">QMinr</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span> INF;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r) <span class="keyword">return</span> a[cur].Minr;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		<span class="keyword">return</span> min(QMinr(cur &lt;&lt; <span class="number">1</span>, l, r), QMinr(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> p, LL k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l == a[cur].r)&#123;</span><br><span class="line">			a[cur].Minl = min(a[cur].Minl, k - p);</span><br><span class="line">			a[cur].Minr = min(a[cur].Minr, k + p);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		<span class="keyword">int</span> mid = a[cur].l + a[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid) upd(cur &lt;&lt; <span class="number">1</span>, p, k);</span><br><span class="line">		<span class="keyword">else</span> upd(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, p, k);</span><br><span class="line">		a[cur].Minl = min(a[cur &lt;&lt; <span class="number">1</span>].Minl, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minl);</span><br><span class="line">		a[cur].Minr = min(a[cur &lt;&lt; <span class="number">1</span>].Minr, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Minr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="keyword">int</span> n, A, B, Q;</span><br><span class="line">LL x[maxn];</span><br><span class="line">LL _abs(LL x)&#123;<span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;Q, &amp;A, &amp;B);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, x + i);</span><br><span class="line">	t.build(<span class="number">1</span>, <span class="number">1</span>, n); t.upd(<span class="number">1</span>, A, _abs(<span class="number">1l</span>l * B - x[<span class="number">1</span>])); t.upd(<span class="number">1</span>, B, _abs(<span class="number">1l</span>l * A - x[<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">		LL d = _abs(x[i] - x[i - <span class="number">1</span>]), tmp = t.Query(<span class="number">1</span>, x[i - <span class="number">1</span>]);</span><br><span class="line">		LL Minl = t.QMinl(<span class="number">1</span>, <span class="number">1</span>, x[i]);</span><br><span class="line">		LL Minr = t.QMinr(<span class="number">1</span>, x[i], n);</span><br><span class="line">		t.a[<span class="number">1</span>].Minl += d;</span><br><span class="line">		t.a[<span class="number">1</span>].Minr += d;</span><br><span class="line">		t.a[<span class="number">1</span>].tg += d;</span><br><span class="line">		t.upd(<span class="number">1</span>, x[i - <span class="number">1</span>], min(tmp + d, min(Minl + x[i], Minr - x[i])));</span><br><span class="line">	&#125; LL ans = INF;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = min(ans, t.Query(<span class="number">1</span>, i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[AHOI2009]中国象棋</title>
    <url>/2019/12/15/%5BAHOI2009%5D%E4%B8%AD%E5%9B%BD%E8%B1%A1%E6%A3%8B/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求在$n\cdot m​$的棋盘上摆放一些炮，使得任意两个炮不能互相攻击的方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对于每一列，显然只能有0或1或2个炮，这是列中不能攻击的充要条件</p>
<p>令$f_{i,j,k}$为考虑前i行，其中有j列有1个炮，k列有两个炮的方案数，这也意味着有$m-i-j$列没有放棋子</p>
<p>分当前行放0或1或2个棋子讨论即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>不必维护行的信息，在转移的时候行就是满足条件的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">9999973</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn][maxn], n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">X</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1l</span>l * x * (x - <span class="number">1</span>) / <span class="number">2</span> % mo;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; j + k &lt;= m; k++)&#123;</span><br><span class="line">				f[i][j][k] = f[i - <span class="number">1</span>][j][k];</span><br><span class="line">				<span class="keyword">if</span> (k &gt; <span class="number">0</span>) f[i][j][k] = (f[i][j][k] + <span class="number">1l</span>l * f[i - <span class="number">1</span>][j + <span class="number">1</span>][k - <span class="number">1</span>] * (j + <span class="number">1</span>) % mo) % mo;</span><br><span class="line">				<span class="keyword">if</span> (j &gt; <span class="number">0</span>) f[i][j][k] = (f[i][j][k] + <span class="number">1l</span>l * f[i - <span class="number">1</span>][j - <span class="number">1</span>][k] * (m - j - k + <span class="number">1</span>) % mo) % mo;</span><br><span class="line">				<span class="keyword">if</span> (k &gt; <span class="number">1</span>) f[i][j][k] = (f[i][j][k] + <span class="number">1l</span>l * f[i - <span class="number">1</span>][j + <span class="number">2</span>][k - <span class="number">2</span>] * X(j + <span class="number">2</span>) % mo) % mo;</span><br><span class="line">				<span class="keyword">if</span> (k &gt; <span class="number">0</span>) f[i][j][k] = (f[i][j][k] + <span class="number">1l</span>l * f[i - <span class="number">1</span>][j][k - <span class="number">1</span>] * j % mo * (m - j - k + <span class="number">1</span>) % mo) % mo;</span><br><span class="line">				<span class="keyword">if</span> (j &gt; <span class="number">1</span>) f[i][j][k] = (f[i][j][k] + <span class="number">1l</span>l * f[i - <span class="number">1</span>][j - <span class="number">2</span>][k] * X(m - j - k + <span class="number">2</span>) % mo) % mo;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; j + k &lt;= m; k++)</span><br><span class="line">			ans = (ans + f[n][j][k]) % mo;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AHOI</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2019]划分</title>
    <url>/2019/12/12/%5BNOIP2019%5D%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出$\{a_i\}$，求$\{p_k\}$，使得</p>
<script type="math/tex; mode=display">
\sum_{i=p_{k-2}+1}^{p_{k-1}} a_i \leq \sum_{i=p_{k-1}+1}^{p_k} a_i</script><p>求</p>
<script type="math/tex; mode=display">
\sum_{k=1}^{K}(\sum_{i=p_{k-1}+1}^{p_k}a_i)^2</script><p>的最小值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先给出$\theta(n^3)​$Dp，令$f_{i,j}​$表示只考虑前i个数，前一个p=j的最小值</p>
<script type="math/tex; mode=display">
f_{i,j}=min_{s_i-s_j\geq s_j-s_k}\{f_{i,k}+(s_i-s_j)^2\}=min_{s_i-s_j\geq s_j-s_k}\{f_{i,k}\}+(s_i-s_j)^2</script><p>固定j，单调地取k，可以优化到$\theta(n^2)​$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL f[maxn][maxn], s[maxn], a[maxn];</span><br><span class="line"><span class="keyword">int</span> n, type;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;type);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">	<span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i][<span class="number">0</span>] = s[i] * s[i]; </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">		<span class="keyword">int</span> k = j; LL Min = INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = j + <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">			<span class="keyword">while</span> (s[i] - s[j] &gt;= s[j] - s[k - <span class="number">1</span>] &amp;&amp; k &gt; <span class="number">0</span>) Min = min(Min, f[j][--k]);</span><br><span class="line">			f[i][j] = min(f[i][j], Min + (s[i] - s[j]) * (s[i] - s[j]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans = INF;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) ans = min(ans, f[n][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容易证明，最后一部分越小越优，令$d_i$为以i结尾的最优方案时最后一段的大小</p>
<p>每次$f_i$自然是由满足$d_j\leq s_i-s_j$，即$d_j+s_j\leq s_i​$中最大的j转移而来（这个结论不大会证，但是举不出反例呵呵呵）</p>
<p>若$j&gt;k$，且$d_k+s_k&gt;d_j+s_j$，那么k就是无效的，维护关于$d_j+s_j$的单调队列即可<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL f[maxn], s[maxn], a[maxn], d[maxn];</span><br><span class="line"><span class="keyword">int</span> n, type, l, r, q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;type);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">	q[l = r = <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r &amp;&amp; d[q[l + <span class="number">1</span>]] + s[q[l + <span class="number">1</span>]] &lt;= s[i]) ++l;</span><br><span class="line">		d[i] = s[i] - s[q[l]]; f[i] = f[q[l]] + d[i] * d[i];</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r &amp;&amp; d[q[r]] + s[q[r]] &gt;= d[i] + s[i]) --r;</span><br><span class="line">		q[++r] = i;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>NOIP</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC022E]Median Replace</title>
    <url>/2019/12/11/%5BAGC022E%5DMedian%20Replace/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于长度为奇数的01?字符串，可以将连续3个字符用中位数代替，问使得最后可以变为1的方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>手动建自动机，表示字符串的替代转移</p>
<p>可以发现替换掉的0越多越好，所以可以贪心地转移，自动机节点数有限</p>
<p><strong>注意，在建立自动机的时候，有些节点（如2，5）要用后两个字符再去匹配，有可能它们和后面的字符消去，形成更优的解</strong></p>
<p>自动机的样子盗张图</p>
<p><img src="https://i.loli.net/2018/07/11/5b4603963b498.png" alt=""></p>
<p>倒序Dp即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> to[<span class="number">8</span>][<span class="number">2</span>] = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">8</span>], n; <span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>); n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">	f[n + <span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, f[n + <span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (str[i] != <span class="string">'0'</span>) f[i][j] += f[i + <span class="number">1</span>][to[j][<span class="number">1</span>]];</span><br><span class="line">			<span class="keyword">if</span> (str[i] != <span class="string">'1'</span>) f[i][j] += f[i + <span class="number">1</span>][to[j][<span class="number">0</span>]];</span><br><span class="line">			f[i][j] %= mo;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料：<a href="https://blog.csdn.net/ShadyPi/article/details/81007277" target="_blank" rel="noopener">link</a></p>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]可持久化线段树（主席树）</title>
    <url>/2019/12/11/%5B%E6%A8%A1%E6%9D%BF%5D%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求静态区间第k小</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>离散化一下，然后先建原树，依次插入$a_i$形成n个版本</p>
<p>每次询问时在r和l-1两个版本里同时查询即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS(cur) a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS(cur) a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l, r, ls, rs, v;</span><br><span class="line">	&#125;a[maxn * <span class="number">40</span>]; <span class="keyword">int</span> tot;</span><br><span class="line">	T()&#123;tot = <span class="number">1</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		build(a[cur].ls = ++tot, l, mid);</span><br><span class="line">		build(a[cur].rs = ++tot, mid + <span class="number">1</span>, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> mid = a[t].l + a[t].r &gt;&gt; <span class="number">1</span>, cur;</span><br><span class="line">		a[cur = ++tot] = a[t];</span><br><span class="line">		a[cur].v++;</span><br><span class="line">		<span class="keyword">if</span> (a[t].l == a[t].r) <span class="keyword">return</span> cur;</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid) a[cur].ls = upd(a[t].ls, p);</span><br><span class="line">		<span class="keyword">else</span> a[cur].rs = upd(a[t].rs, p);</span><br><span class="line">		a[cur].v = LS(cur).v + RS(cur).v;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[u].l == a[u].r) <span class="keyword">return</span> a[u].l;</span><br><span class="line">		<span class="keyword">if</span> (LS(v).v - LS(u).v &gt;= k) <span class="keyword">return</span> Query(a[u].ls, a[v].ls, k);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> Query(a[u].rs, a[v].rs, k - (LS(v).v - LS(u).v));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t; <span class="keyword">int</span> n, Q, a[maxn], tt[maxn], link[maxn], rt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i), tt[i] = a[i];</span><br><span class="line">	sort(tt + <span class="number">1</span>, tt + n + <span class="number">1</span>); t.build(<span class="number">1</span>, <span class="number">1</span>, n); rt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = lower_bound(tt + <span class="number">1</span>, tt + n + <span class="number">1</span>, a[i]) - tt;</span><br><span class="line">		link[tmp] = a[i];</span><br><span class="line">		a[i] = tmp;</span><br><span class="line">		rt[i] = t.upd(rt[i - <span class="number">1</span>], a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> l, r, k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, link[t.Query(rt[l - <span class="number">1</span>], rt[r], k)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>可持久化</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF708E]Student's Camp</title>
    <url>/2019/12/09/%5BCF708E%5DStudent&#39;s%20Camp/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$(n+2)\cdot m$的矩阵，第2~n+1行最左的砖块和最右的砖块分别在白天和晚上有$P=\frac{A}{B}$的概率被毁</p>
<p>暴风雨持续了k天k夜，问k天之后整个矩阵仍然联通（共边）的概率，对1e9+7取模</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>令$f_{T,l,r}$为第T行剩下l~r的砖块且上方全部联通的概率，$p_i$为第i块砖恰好留下的概率</p>
<p>得到一个naive的递推式</p>
<script type="math/tex; mode=display">
f_{T,l,r}=p_l\cdot p_{m-r}\cdot \sum_{[x,y]与[l,r]有交}f_{T-1,x,y}</script><p>用前缀和优化， 令$sf_{T,j}=\sum_{1\leq i\leq j}f_{T,i,j}$，$ssf_{T,j}=\sum_{1\leq i\leq j}sf_{T,i}$</p>
<p>则</p>
<script type="math/tex; mode=display">
f_{T,l,r}=p_l\cdot p_{m-r}\cdot(\sum_{1\leq i\leq j\leq m}f_{T-1,i,j}-\sum_{1\leq i\leq j\leq l-1}f_{T-1,i,j}-\sum_{r+1\leq i\leq j\leq m})</script><p>利用对称性翻转区间，$f_{T,x,y}=f_{T,m-y+1,m-x+1}$</p>
<script type="math/tex; mode=display">
f_{T,l,r}=p_l\cdot p_{m-r}\cdot(\sum_{1\leq i\leq j\leq m}f_{T-1,i,j}-\sum_{1\leq i\leq j\leq l-1}f_{T-1,i,j}-\sum_{1\leq i\leq j\leq m-r})</script><script type="math/tex; mode=display">
=p_l\cdot p_{m-r}\cdot (ssf_{T-1,m} - ssf_{T-1,l-1} - ssf_{T-1,m-r})</script><p>又可以发现</p>
<script type="math/tex; mode=display">
sf_{T,j}=\sum_{1\leq i\leq j}f_{T,i,j}=(\sum_{1\leq i\leq j}p_l)\cdot p_{m-j}(ssf_{T-1,m}-ssf_{T-1,m-j})-p_{m-j}\cdot \sum_{1\leq i\leq j}p_i\cdot ssf_{T-1,i-1}</script><p>直接维护sf和ssf就做完了 $\theta(n\cdot m)$</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>初始化的时候fac和inv求得不够，应该求到k</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1505</span>;</span><br><span class="line"><span class="keyword">const</span> LL mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">LL <span class="title">pow</span><span class="params">(LL x, LL t)</span></span>&#123;</span><br><span class="line">    x %= mo; LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * x % mo;</span><br><span class="line">        x = <span class="number">1l</span>l * x * x % mo;</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, k, A, B;</span><br><span class="line">LL P, p[maxn], sp[maxn], fac[maxn * <span class="number">100</span>], inv[maxn * <span class="number">100</span>];</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || m == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * inv[m] % mo * inv[n - m] % mo;</span><br><span class="line">&#125;</span><br><span class="line">LL sf[maxn][maxn], ssf[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;n, &amp;m, &amp;A, &amp;B, &amp;k);</span><br><span class="line">    P = <span class="number">1l</span>l * A * <span class="built_in">pow</span>(B, mo - <span class="number">2</span>) % mo; fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % mo;</span><br><span class="line">    inv[k] = <span class="built_in">pow</span>(fac[k], mo - <span class="number">2</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) inv[i] = <span class="number">1l</span>l * inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mo;</span><br><span class="line"><span class="comment">//    printf("::%lld\n", C(5, 2));</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) p[j] = <span class="number">1l</span>l * <span class="built_in">pow</span>(P, j) * <span class="built_in">pow</span>(<span class="number">1</span> + mo - P, k - j) % mo * C(k, j) % mo;</span><br><span class="line">    sp[<span class="number">0</span>] = p[<span class="number">0</span>]; <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) sp[j] = (sp[j - <span class="number">1</span>] + p[j]) % mo;</span><br><span class="line">    sf[<span class="number">0</span>][m] = ssf[<span class="number">0</span>][m] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= n; T++)&#123;</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">            S = (S + <span class="number">1l</span>l * ssf[T - <span class="number">1</span>][j - <span class="number">1</span>] * p[j - <span class="number">1</span>] % mo) % mo;</span><br><span class="line">            sf[T][j] = (sf[T][j] + mo + <span class="number">1l</span>l * sp[j - <span class="number">1</span>] * p[m - j] % mo * (ssf[T - <span class="number">1</span>][m] - ssf[T - <span class="number">1</span>][m - j]) % mo) % mo;</span><br><span class="line">            sf[T][j] = (sf[T][j] + mo - <span class="number">1l</span>l * S * p[m - j] % mo) % mo;</span><br><span class="line">            ssf[T][j] = (ssf[T][j - <span class="number">1</span>] + sf[T][j]) % mo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ssf[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>[HNOI2012]永无乡</title>
    <url>/2019/12/08/%5BHNOI2012%5D%E6%B0%B8%E6%97%A0%E4%B9%A1/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于一些点，支持连边和求联通块中第k重要的点</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>动态开点权值线段树，线段树上合并</p>
<p>询问的时候二分即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> ls, rs, v, l, r;</span><br><span class="line">	&#125;a[maxn * <span class="number">40</span>];</span><br><span class="line">	<span class="keyword">int</span> rt[maxn], tot;</span><br><span class="line">	T()&#123;tot = <span class="number">0</span>;&#125; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">			a[cur].v = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (p &lt;= mid)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!a[cur].ls) a[cur].ls = ++tot;</span><br><span class="line">			upd(a[cur].ls, l, mid, p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!a[cur].rs) a[cur].rs = ++tot;</span><br><span class="line">			upd(a[cur].rs, mid + <span class="number">1</span>, r, p);</span><br><span class="line">		&#125;</span><br><span class="line">		a[cur].v = LS.v + RS.v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!cur || !v) <span class="keyword">return</span> cur | v;</span><br><span class="line">		a[cur].ls = Merge(a[cur].ls, a[v].ls);</span><br><span class="line">		a[cur].rs = Merge(a[cur].rs, a[v].rs);</span><br><span class="line">		a[cur].v += a[v].v;</span><br><span class="line">		<span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l == a[cur].r) <span class="keyword">return</span> a[cur].l;</span><br><span class="line">		<span class="keyword">if</span> (k &lt;= LS.v) <span class="keyword">return</span> Query(a[cur].ls, k);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> Query(a[cur].rs, k - LS.v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == f[x] ? x : f[x] = getf(f[x]);&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, Q, p[maxn], link[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, p + i);</span><br><span class="line">		t.rt[i] = ++t.tot; f[i] = i;</span><br><span class="line">		t.upd(t.rt[i], <span class="number">1</span>, n, p[i]);</span><br><span class="line">		link[p[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">int</span> fu = getf(u), fv = getf(v);</span><br><span class="line">		t.Merge(t.rt[fu], t.rt[fv]);</span><br><span class="line">		f[fv] = fu;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">char</span> opt[<span class="number">2</span>]; <span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, opt);</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'B'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">int</span> fu = getf(u), fv = getf(v);</span><br><span class="line">			t.Merge(t.rt[fu], t.rt[fv]); f[fv] = fu;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">'Q'</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			<span class="keyword">if</span> (v &gt; t.a[t.rt[getf(u)]].v) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, link[t.Query(t.rt[getf(u)], v)]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>动态开点</tag>
        <tag>线段树合并</tag>
        <tag>线段树二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC023D]go home</title>
    <url>/2019/12/06/%5BAGC023D%5Dgo%20home/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>数轴的整点上有一些人，一辆公交车从S开始载上并送这些人回家，方向取决于车上人的投票</p>
<p>所有的人都会让自己回家的时间最小，求公交车送完所有人的时间</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>不一定所有人都往自己的方向投票</strong></p>
<p>如果最左边的人小于最右边的人，那么不管怎样公交车都先到最右边，再到最左边（即左边的人一开始投右边）</p>
<p>直接合并，统计答案</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>p爆long long</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, s, x[maxn], dire;</span><br><span class="line">LL ans = <span class="number">0</span>, p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, x + i, p + i);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (x[l] &gt;= s)&#123;</span><br><span class="line">            ans += <span class="number">1l</span>l * (x[r] - s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x[r] &lt;= s)&#123;</span><br><span class="line">            ans += <span class="number">1l</span>l * (s - x[l]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[l] &lt; p[r])&#123;</span><br><span class="line">            <span class="keyword">if</span> (dire != <span class="number">1</span>) dire = <span class="number">1</span>, ans += <span class="number">1l</span>l * (x[r] - x[l]);</span><br><span class="line">            p[r] += p[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p[l] &gt;= p[r])&#123;</span><br><span class="line">            <span class="keyword">if</span> (dire != <span class="number">-1</span>) dire = <span class="number">-1</span>, ans += <span class="number">1l</span>l * (x[r] - x[l]);</span><br><span class="line">            p[l] += p[r--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC023F]01 on tree</title>
    <url>/2019/12/06/%5BAGC023F%5D01%20on%20tree/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵权值为01的树，找到一个拓扑序列，使得权值序列中逆序对对数最少</p>
<p>求最小值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑两个拓扑序的合并，令$a_1,b_1,a_2,b_2$分别为序列1,2中01的个数</p>
<p>当$b_1\cdot a_2\leq a_1\cdot b_2$即$\frac{b_1}{a_1}\leq\frac{b_2}{a_2}$时，序列1在前面更优</p>
<p>满足排序性质，用堆维护</p>
<p>每次找最小的序列和父亲的序列合并一定最优，局部最优必定导致全局最优</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>1不能再合并，不要加进去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x == f[x] ? x : f[x] = getf(f[x]);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b, id;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(A x)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1l</span>l * b * x.a &gt; <span class="number">1l</span>l * a * x.b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(A x)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a != x.a || b != x.b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;a[maxn]; LL ans = <span class="number">0</span>;</span><br><span class="line">priority_queue &lt;A&gt; q;</span><br><span class="line"><span class="keyword">int</span> n, anc[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, anc + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> val, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val);</span><br><span class="line">		f[i] = i;</span><br><span class="line">		<span class="keyword">if</span> (val == <span class="number">0</span>) a[i] = (A)&#123;<span class="number">1</span>, <span class="number">0</span>, i&#125;;</span><br><span class="line">		<span class="keyword">else</span> a[i] = (A)&#123;<span class="number">0</span>, <span class="number">1</span>, i&#125;;</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">1</span>) q.push(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		A t = q.top(); q.pop();</span><br><span class="line">		<span class="keyword">int</span> cur = getf(t.id);</span><br><span class="line">		<span class="keyword">if</span> (a[cur] != t) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">int</span> fa = getf(anc[cur]);</span><br><span class="line">		ans += <span class="number">1l</span>l * a[fa].b * a[cur].a;</span><br><span class="line">		a[fa].a += a[cur].a;</span><br><span class="line">		a[fa].b += a[cur].b;</span><br><span class="line">		f[getf(cur)] = f[getf(fa)];</span><br><span class="line">		<span class="keyword">if</span> (fa != <span class="number">1</span>) q.push(a[fa]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>[ZJOI2019]语言</title>
    <url>/2019/12/05/%5BZJOI2019%5D%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵无根树和树上的若干条链</p>
<p>求无序点对数，使得这两个点不重合且它们之间的路径至少被一条链包含</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>特别暴力的做法，对于每个节点开一棵权值线段树，统计权值不为0的个数</p>
<p>对于一条链，分别在$u$，$v$，$f_{lca(u,v)}$打1,1,-2标记，自底向上线段树合并即可</p>
<p>线段树动态开点+标记永久化，因为每个区间如果被加上一定会被减去</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>线段树中当前节点的区间若被操作区间覆盖，修改Min时也要修改tg</p>
<p>-2要打在lca的父亲上<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LS a[a[cur].ls]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RS a[a[cur].rs]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r, Min, tg, ls, rs;</span><br><span class="line">    &#125;a[maxn * <span class="number">400</span>];</span><br><span class="line">    <span class="keyword">int</span> rt[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r)&#123;</span><br><span class="line">            a[cur].Min += k;</span><br><span class="line">            a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">int</span> M = a[cur].l + a[cur].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!a[cur].ls &amp;&amp; M &gt;= l)&#123;</span><br><span class="line">            a[++tot].l = a[cur].l; a[tot].r = M;</span><br><span class="line">            a[cur].ls = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!a[cur].rs &amp;&amp; M &lt; r)&#123;</span><br><span class="line">            a[++tot].l = M + <span class="number">1</span>; a[tot].r = a[cur].r;</span><br><span class="line">            a[cur].rs = tot;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].ls) upd(a[cur].ls, l, r, k);</span><br><span class="line">        <span class="keyword">if</span> (a[cur].rs) upd(a[cur].rs, l, r, k);</span><br><span class="line">        a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cur) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">if</span> (!v) <span class="keyword">return</span> cur;</span><br><span class="line">        a[cur].Min += a[v].Min;</span><br><span class="line">        <span class="keyword">if</span> (a[cur].l != a[cur].r)</span><br><span class="line">        a[cur].ls = Merge(a[cur].ls, a[v].ls),</span><br><span class="line">        a[cur].rs = Merge(a[cur].rs, a[v].rs);</span><br><span class="line">        a[cur].tg = (a[cur].Min &gt; <span class="number">0</span>) ? a[cur].r - a[cur].l + <span class="number">1</span> : LS.tg + RS.tg;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t; </span><br><span class="line"><span class="keyword">int</span> dep[maxn], f[maxn], sz[maxn], son[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    dep[cur] = dep[fa] + <span class="number">1</span>; f[cur] = fa; sz[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">            dfs1(v, cur);</span><br><span class="line">            <span class="keyword">if</span> (sz[v] &gt; sz[son[cur]]) son[cur] = v;</span><br><span class="line">            sz[cur] += sz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> id[maxn], tdx = <span class="number">0</span>, top[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[cur] = topf; id[cur] = ++tdx;</span><br><span class="line">    <span class="keyword">if</span> (!son[cur]) <span class="keyword">return</span>;</span><br><span class="line">    dfs2(son[cur], topf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">        <span class="keyword">if</span> (e[i].to != f[cur] &amp;&amp; e[i].to != son[cur]) dfs2(e[i].to, e[i].to);</span><br><span class="line">&#125; LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">U</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, k;</span><br><span class="line">    U(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>, <span class="keyword">int</span> c = <span class="number">0</span>)&#123;</span><br><span class="line">        l = a; r = b; k = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; <span class="built_in">vector</span> &lt;U&gt; vec[maxn];</span><br><span class="line"><span class="keyword">int</span> n, Q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, cur); t.rt[cur] = t.Merge(t.rt[cur], t.rt[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vec[cur].size(); j++)&#123;</span><br><span class="line">        t.upd(t.rt[cur], vec[cur][j].l, vec[cur][j].r, vec[cur][j].k);</span><br><span class="line"><span class="comment">//        printf("::%d %d %d\n", vec[cur][j].l, vec[cur][j].r, vec[cur][j].k);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    if (cur == 5) printf("%d\n", t.a[t.rt[cur]].tg);</span></span><br><span class="line">    ans += t.a[t.rt[cur]].tg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span> &lt;U&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    <span class="keyword">while</span> (top[u] != top[v])&#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        tmp.push_back((U)&#123;id[top[v]], id[v], <span class="number">0</span>&#125;);</span><br><span class="line">        v = f[top[v]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">    tmp.push_back((U)&#123;id[u], id[v], <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addedge(u, v); addedge(v, u);</span><br><span class="line">    &#125; dfs1(<span class="number">1</span>, <span class="number">0</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        t.rt[i] = i, t.a[i].l = <span class="number">1</span>, t.a[i].r = n;</span><br><span class="line">        vec[i].push_back((U)&#123;id[i], id[i], <span class="number">1</span>&#125;);</span><br><span class="line">        vec[f[i]].push_back((U)&#123;id[i], id[i], <span class="number">-1</span>&#125;);</span><br><span class="line">    &#125; tot = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">int</span> t = split(u, v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp.size(); j++)&#123;</span><br><span class="line">            vec[u].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">1</span>&#125;);</span><br><span class="line">            vec[v].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">1</span>&#125;);</span><br><span class="line">            vec[f[t]].push_back((U)&#123;tmp[j].l, tmp[j].r, <span class="number">-2</span>&#125;);</span><br><span class="line"><span class="comment">//            printf("::%d %d\n", tmp[j].l, tmp[j].r);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>); <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans - n) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ZJOI</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>标记永久化</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2019]Emiya家今天的饭</title>
    <url>/2019/11/22/%5BNOIP2019%5DEmiya%E5%AE%B6%E4%BB%8A%E5%A4%A9%E7%9A%84%E9%A5%AD/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出$n\cdot m$的矩阵，从中选出任意个数$(\geq 0)$的元素，使得每行最多只有1个，且每列的个数不超过总数的一半</p>
<p>求所有方案中元素的乘积的和，对$998244353$取模</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，合法的方案数等于所有方案减去不满足的方案数</p>
<p>对于不满足的情况，一定<strong>有且仅有</strong>一列的选择个数超过一半</p>
<p>若选了$x$道菜，其中某种食材用了$y$，条件变形一下得到：$2y+n-x\geq n$</p>
<p>枚举超过一半的那一列，令$f[j][k]$表示有j行取了数，目前$2y+n-x$为k的方案数</p>
<p>分为当前行不选；当前行选，不选选定的列；选当前行，选选定的列 进行Dp即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">105</span>][maxn], s[<span class="number">105</span>];</span><br><span class="line">LL ans = <span class="number">1</span>, f[<span class="number">105</span>][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a[i] + j); s[i] = (s[i] + a[i][j]) % mo;</span><br><span class="line">			<span class="keyword">if</span> (j == m) ans = <span class="number">1l</span>l * ans * (s[i] + <span class="number">1</span>) % mo;</span><br><span class="line">		&#125; ans--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f); f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= (n &lt;&lt; <span class="number">1</span>); k++)&#123;</span><br><span class="line">				f[j][k] = (f[j][k] + <span class="number">1l</span>l * f[j - <span class="number">1</span>][k] * (s[j] + mo - a[j][i]) % mo) % mo;</span><br><span class="line">				f[j][k + <span class="number">1</span>] = (f[j][k + <span class="number">1</span>] + f[j - <span class="number">1</span>][k]) % mo;</span><br><span class="line">				f[j][k + <span class="number">2</span>] = (f[j][k + <span class="number">2</span>] + <span class="number">1l</span>l * f[j - <span class="number">1</span>][k] * a[j][i] % mo) % mo;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n + <span class="number">1</span>; j &lt;= (n &lt;&lt; <span class="number">1</span>); j++) ans = (ans + mo - f[n][j]) % mo;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NOIP</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Artical]NOIP2019考后总结</title>
    <url>/2019/11/21/%5BArtical%5DNoip2019%E8%80%83%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="98ffbf1662ba672fedde8ed2018e5c2fbb8bd3b3f3235a5829edfb0471ffc64f">aba5c7bcecb0e845494faab52ce2974a258b00f2a0905022f77e97008d2305c814e07851c06596df751d30371e46a840571759a48fc2cf1530f10f6554e3f8caa5b2c1095e89af71b2f188a6424ba1a2c82dcc6f4dfc2f30d94c343012e236b14ad12cc9fb0ea026283490c3422a8ecdfea93241d6a16b0bd8f0c126665d52743152bd621d8c1825e03c9281214bab0df7a11716accbc7d34388046e8494922a43b5516a482df51062eda763ea787171051be70951251c90e54dabe2aba81db4eefaa3068ebec7ef71cff7ff3cc23c3e3086b63536d39b813b448a0ba74f43aca4db537fe89ef9400bb6b01cbc15a042aec01a8f88a2f89476afc2e2012248cab9f1c3f7f8918bf2e500ef868078e03c30a6ccafa56c5f8a6f797e347940f06eba18ac9cebbb111763606ee2df6e3a60eb0581d15376f91136cb2ef3e659b9b99f5a83cf9aa4435fc8ee01cc4c341062caa64e4c8c41d16ea6ce562b681db84b779cc413c1166e5cb58a781273a5ea46a9dc50636f88e16b44ed839dce335a575b56d0353b65bc14f8ca45a77a2bb6e4a3bfe1375b06c6d2a966530efcd5ccd838fbc945e6bc63ba74197461fb205e516fea96df33ecfdd0a61b09dd565cfd1b55b46abee78d9c7c6f4ceb03733863a28694453caf3d81f2994f2642310aa615d7e3725fa463e3af4e44fd086c7da7107fb4ab934a3a0fdb232226f52843d11e5f750b8da97398d8691afc98b58362ba8bf536333b4887d31a8f0e83cf204485b714eb40abda61b79f1a71bcecf5ea2cee2f8eca8080a07e0099daa7792ba11b1d2d1e1c6a97c0a229444dc208d42559d11ebde97ae186fcc5279cb27abb39176912c6b83beff365d6432abe4986a76a282b0ef4c865632123bc4de143914c7d8ec7ed43fd8eecfb0f3ea15d544dccab5715f25a0ff65b5a2c3dc995b0aa5fa89a8cc7f34ef1409655e4f0781b78c842777eb43e7862b122ac646f6c6d399ccac5bb9fe9840479c54ea38809704abbfd9ca372816bc56d5d1b15ffec538a452ed0309dd93016ae98890fb005b67bd1f1b5f344ff7e740c7c53454989358eecf3ae237002452fc7dffdd8dde392f1c1858d82a1380d12b4dde7a8a0fa769b3549f93faa8e3759b229b553f328c4ac38f9b7de5482a6faf4502260d39a478afc2b5377f276c7a0a55d65238059ea84867ce015e456363120b1b0ad0fc6453ca5225852d67d3009b0e8c0ca8677f94cbf3f2304ad3f9a08115c562055a47d2fa9b904b20c6961f4798eec96aa0c5a6bbedb7a9c341a96d7fb82fb6073a19a9d95d85da97ceecb9381c14c1fc9537d70ed007a838345a5782020090747061609cc2c7d82cb10e70e0903bd9b3328a728ea037aa3a90a7b105efbc44173dadf7ed259a0cdfde09a8cbd8a610506aece9da5c390104cb1be1a5adf628aa16d940498287fcf7dc74e08db57dfb78b71c9980c501c48e2f4caec25b8ae1aebca3dd8de14d62642e91a0f4c4c8469ad8b5bee3a44bc27a78214cdfc239bb05ded8db6d962b6156fa45912e8794b9e9c34e6969a2283c067c78cf0fe53a7c6651316c930ab7a8da1097e9353eb9a7bef41c0b2b0d245afd8a3f2f3fd862175da7409b6793b84a7c12e2adbb8684af5bb6c627af090cad77e3d3b531bce21a4501b424026a3e0a594b7bcfc00c6e523f9c958d602e9903b0603f0db2f5d22d61645a494f6017b95733c6eca110019ef049daf7ce6e33aa2f3132591b7931db51b168da5486d6ad80e4277a3f739835ebe4ef73a42198db0050df58cee889e282419baf975c16efd99fbf0fe3194fd92ca493048477dad5dbfd1dfebe11362d7fda0634637598ad6caa35d22b76ead698c35b34a9017d68e7d4d899b42e09d7327eaeec975c5f7bc33f4351e38c42a796eae4008834c870eedba64302ada21dab58e1af748bb266ebc8ec31ab1ddd85b33a91436d77190f71493fb63d647b1ae543bd3660ca6c798759cd87b0d3b4acd834fbb348afada31e575fc250a5c9cbbd7c7963279f7b26d60b8469d419d0733303a353067162ef683ed1f5fbaba4f3fba73cb204a6b9a113524056f17e86ca6473d540f632d1d51cba4f7f64e8dda40bf9cf556850a345316461e10fa21640a2858e98fe022fbbefdbec7017a226752617f976b95b9d5b1a97a11fc0de17957c7e76b9ba36b113cf02af3b1619e8f8005428da5f14ad9a64b81f10e924855b5eeaadd1eb907cf3a8a00c5719103683f4ee697d32228f3654fb450cbb0e368b8b8af6b23acdf6ed2e6abecb3369abc4d75d2555e0b1b89d805d394607db4a627aaaf49a3b7ec70fcfb5d7bbbdc286bd3865e8f65faf659cc5d6a0f6b9998cd59f71f6017ec0700055320edb52011d7d707c11c8ca1fb8bea1fb0f122b746812f12f3347eff6eee97f185d1682acaa8a44bdb100080eb3b70e78f3d44903d98f2e87b674ef7938f7740c9b260114a39fdc712b17ad523ca767d7a7ce0439c21d4efd7908f20cb1a24fae9d8b1272c2bbbbd93747ee3ad914307e388fc5e47a6301f098be9da6ac098e8618d4b514ccf943045b70ceb9668ab3eab9905930fe6a677b194f50a88ee9b64174c23ea213d5ae05ee94d86c2a4850197518734723ab24d825d638abb849ddccc90e9e8ef5b38f9eca5897e7f1bfcd0c44e9ee53ed4ff5902570604b8b7a59920ff490ae3cdf0d93bf12c7493055219f2d70e4c9517b92958f1fbb154de1ca22dd4178c5bd3b11e28c2fd6abf93dbbfb64807273b78a1959b646b778f9e847fd7cb7c18d731074a36d1ff888a6f00d075283076a68b97200c94f243640b8ba1d77687a81312c2c189163519fb0a72dcc896bea747a2e0b3db9d345795414a32e1c4a0e89a39a3881f6bcbc6a94a4d52c6581e21fd992e190c69cf67bb8feaa9e6c5d5de066e93570a5b1c01192eb0ec99f471a093a4891808243cac86acc96740d5805bae9920a0e91dcb4c41fcbca03316e4d77598e58c923b2e7a00ae41a53898c9399a5bd75596fa84a94ebfa8a1a9381e28c330dc958f889f5802426a50a0a10f604faea5ebd04d567ee2d2cae78af46bd0ece802458c50aff2ee1c5f15f227567626f371216c3f8967a4a546337f64ff2c7f7b836bee9eb095b244a3981c102209fd491c782e776de0b617513ce95e1c5f3d88ab7c076e39e6d2fec6ae94f14aec26da674713cbd996d00121ae587151e9e36aa4267b57a97ee610a29b9ee01ef45d41675f72bf73587c090a75057d3116b3d7e58cab32a1a8ce3c49f987276bd7b363d2a5b24180990ae1aa096339329d9ddb87a275dd9c12be64d9a07389fd6b9769a969be41292c9efb33bbc4bda6a93a3b708107f3bd5896011b5c4a1ce1b49657d2285e312980677d7d4ed11aacfdb3dad4816fba8a36d3c5439417734620d40e080abe205daa2fc3b6ea7b0ea1878d71a012f89e9d9828164b3c7dfccc9001050f37af31e556e66b1f01aa03069569fd6d9dcc0104e265f9099b30240ddbdec8190b84dad28bfd27d9ee6a41362476bf6c6c311812eed1a0d8e6dfb670365a0107223b7b8c4a495f3aa074dc6de177ff27f22d2fd579a8eca395a3323eac03d8a3f68f6776c2a6d99f089fc9305875cb017e8bb12b73a9beba367e25d5692febee9d662fa17dfa4e63263416119b6e2672da96d5fd9a531e96ecb34cc355522f9053b31402d4fb457a32a59f2211b5712b9c11ec70cb02393dc55cd92b6ed8bfaa439fa17d27799fbbe6c3d3094aa4b1ff82fea2fe7304ef0ece1d1a694c59912a55730f5a902a6ee2729b142ee109dc0291db20e8ff2e1af3bae9c4619e23bd078405245339c3a27a0123899fb45fa0167d4512634314a98bbeaed5d5475fe15eb0be5f6619f2f4405c0f210d45a1d01ccabced6e623a81e6fad5a1ab1c5bdc17139c7d432a483149bcbb8a47c11c5f6acfd9032df548655343031b1e770bb45dfa003b7002351ede29d7b19b7f0b243da9178ad42d610fbd8ad1570ea78af74d7657fe0b8f9092d8adb7266669f085de8000f1c76dd53e0895eca6bc1bc8c8aa864fd075609459722273b516aa06b015a89a37cf0b913e3a5fa8823e3e7fde6187f0ecf901ecbad27d05df62012d6f45692feb23f02d7af9ac446f848affa5849cafef53d740e7872a3d9fafeb2d5c7e2561367d9b832e8b8f7391690f33913a81cd1c49b58016e4220c0ffd2ed73e9dff1cac2f359d6c5287e64c534384ef25738d9cf6931012b35b944b5662616ac335540c2a581f22f2d617a415096529564238e7dd8fae4b015bcfc6ab1e1c21860f74b27b27e2b00103a735819f4f379b5cf5d5bd124b2e3d9cf1fb8459e80ed6feeaee2e010dd45f8c9a0cc4b21d62fe8a3d8b13dd4fe79eef42caf951b449b15e0eee01822794a2ad5c7da170dd88ea4cc52c0a53744223b82a806e4cf170598c94b17ab54ce14d1ef30e70d4689896e8e4184aba0f5d16e772f5c931554b27fdde618ddf4acbe0bc570ab820fdc4d049b106fb78b24fc80e846d5245bb51752d2ac735f88b3ccdd1dd3dd0e1a27d834237abd983af13252aa13e773cb089a3470320250147a649acf970618bd29a64e0eb50bf449d98afcd845904e6c4c9bea9d4ad9fa6d61208c00d85a2721b6fa76cc619b06274ced2f8c7fac4fb18430ac244f993d4591aa20894b850d50a67e3c52a70869788dda171e7358f8956e94f2a9573166fcdb9a4b9d92d97db6fbde905fbc02ccb1d5f78de8f93b685d093c710f1d594e8ca1a93f6dfae47dc6d6faf017d393129ac2e1f9521cac57e3d56f9c1cd194ac6af38d8878bf32782871ba16428c350eb17294503107eed5bda4656573e8626ae43cff0be32bd246c423fe4838c1081dae9ab7bb8fe27778b7bd0ff06c2301c81a4fe36df79ba5175eeeb8f08a225b2c8995765c2e7679d4a65e71a4457d0e3cc2e718c6e7b19e71f1d5fa6546d49123ddbb4dd48be434c834910fec6c5646066e55d85d4555a395b43b1628982e907aa3d09ce9c293cfe0ed10191bb87a2feccf3ea5c23aa52994f36602cc5997fb3d5587b8048bdcaa6f1109d23587cf80c9fc229845a36a644d42cc92195846e985f71fbe676d30883a1b2fb853f896b6d11e4eefa4493f2eea7ce48ca4c9a34715f5cf27229ca7ba60f73c6b9a89526c309d42eff00bbe81b03f09c055cf797b1cada29662f0d41112e2e159b96d245675e1700f6f11ef2d3ef2c37950a91be398c046c87aa1e782b35c7a2f464ae6488d8fc340d47e3027204ca65617bcf0d716758c0cac36c8ac8ee3a9c147b0625c7c500</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>Artical</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2019]括号树</title>
    <url>/2019/11/21/%5BNOIP2019%5D%E6%8B%AC%E5%8F%B7%E6%A0%91/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一棵以$1$为根的树中，每个节点都有一个左括号或者右括号</p>
<p>令$F(x)$为从$1$到$x$的路径上组成的括号串中合法的连续子串的数量</p>
<p>求$ans=\oplus_{x=1}^n x\cdot F(x)$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先考虑对于一个字符串如何计算，令f为以当前位为结尾的合法串个数，整个串的总数即为f的求和</p>
<p>dfs顺便用栈维护即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>前缀和要在进入下一层前处理好</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn], f[maxn], sum[maxn];</span><br><span class="line"><span class="built_in">stack</span> &lt;<span class="keyword">int</span>&gt; s; LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">'('</span>) s.push(cur);</span><br><span class="line">	<span class="keyword">int</span> tmp = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">')'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (!s.empty())&#123;</span><br><span class="line">			f[cur] = f[fa[s.top()]] + <span class="number">1</span>;</span><br><span class="line">			tmp = s.top();</span><br><span class="line">			s.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; 	sum[cur] = f[cur] + sum[fa[cur]];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		dfs(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (str[cur] == <span class="string">'('</span> &amp;&amp; !s.empty()) s.pop(); </span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (tmp != <span class="number">-1</span>) s.push(tmp);</span><br><span class="line">	ans ^= (<span class="number">1l</span>l * cur * sum[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, str + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, fa + i);</span><br><span class="line">		addedge(fa[i], i);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF852E]Casinos and travel</title>
    <url>/2019/11/15/%5BCF852E%5DCasinos%20and%20travel/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，定义$f(t)$为以t为根，从根到叶子节点的所有链上白格子数为偶数，的黑白染色方案数</p>
<p>求$\sum_{i=1}^n f(i)$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先写个Dp，发现每一棵有根树的答案为：</p>
<p>令$x$为n-叶子节点的个数，则$f(t)=2^x$</p>
<p>$O(n)$求和即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>想到结论就好了<del>不会证也没事</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mo = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ind[maxn], n, c, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">1</span>; x %= mo;</span><br><span class="line">	<span class="keyword">while</span> (t &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * x % mo;</span><br><span class="line">		x = <span class="number">1l</span>l * x * x % mo;</span><br><span class="line">		t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		ind[u]++, ind[v]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (ind[i] &gt; <span class="number">1</span>) ++c;</span><br><span class="line">	<span class="keyword">int</span> P = <span class="built_in">pow</span>(<span class="number">2</span>, c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (ind[i] == <span class="number">1</span>) ans = (ans + <span class="number">2l</span>l * P % mo) % mo;</span><br><span class="line">		<span class="keyword">else</span> ans = (ans + P) % mo;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>[CF254C]Anagram</title>
    <url>/2019/11/15/%5BCF254C%5DAnagram/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>替换最少数量的字符，使得A中的每个大写字符个数都与B中相同</p>
<p>输出最少替换次数以及字典序最小的方案</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>完完全全<del>一道傻逼题</del>，考场脑子坏掉了</p>
<p>最少次数显然，输出方案就从后往前，替换字符更小或者不能再协调就替换，不然先不替换</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>犯了一堆神奇的错误，还是思路实现不清晰啊</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn]; <span class="keyword">int</span> n, cnt[<span class="number">26</span>], c[<span class="number">2</span>][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//	freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> n = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[a[i] - <span class="string">'A'</span>]++, cnt[b[i] - <span class="string">'A'</span>]--, c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]++;</span><br><span class="line">	<span class="keyword">int</span> res = <span class="number">0</span>, x = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)&#123;</span><br><span class="line">		res += max(cnt[j], <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (cnt[j] &lt; <span class="number">0</span> &amp;&amp; x == <span class="number">-1</span>) x = j;</span><br><span class="line">		<span class="keyword">if</span> (cnt[j] &gt; <span class="number">0</span>) c[<span class="number">1</span>][j] = cnt[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[i] - <span class="string">'A'</span>] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[i] - <span class="string">'A'</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] - <span class="string">'A'</span> &gt; x || c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>] == c[<span class="number">1</span>][a[i] - <span class="string">'A'</span>])&#123;</span><br><span class="line">				--cnt[a[i] - <span class="string">'A'</span>]; --c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]; --c[<span class="number">1</span>][a[i] - <span class="string">'A'</span>];</span><br><span class="line">				a[i] = x + <span class="string">'A'</span>;</span><br><span class="line">				++cnt[x];</span><br><span class="line">				<span class="keyword">while</span> (cnt[x] &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">25</span>) ++x;</span><br><span class="line">			&#125; <span class="keyword">else</span> c[<span class="number">0</span>][a[i] - <span class="string">'A'</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Codeforces</category>
      </categories>
      <tags>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title>[JOI2019]三级跳</title>
    <url>/2019/11/15/%5BJOI2019%5D%E4%B8%89%E7%BA%A7%E8%B7%B3/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出${w_i}$，多次询问给出l，r，求满足$l\leq a&lt;b&lt;c\leq r$，$b-a\leq c-b$的$w_a+w_b+w_c$的最大值</p>
<p>$n，q\leq 5\cdot 10^5$</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>如果一组ab可能合法，当且仅当ab中间不存在权值比$w_a$或者$w_b​$大的</p>
<p>可以用单调栈求出这些数对，对数是$O(n)$的</p>
<p>然后扫描线+线段树维护区间w+Max的最大值即可</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>注意扫描线要从后往前扫，因为从前往后的话最大值可能是从l前面跳过来的</p>
<p>从后往前扫容易控制边界</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxn], n, Q;</span><br><span class="line"><span class="keyword">int</span> s[maxn], top = <span class="number">0</span>; </span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; q[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">A</span>&#123;</span></span><br><span class="line">		<span class="keyword">int</span> l, r, Max, v, lazy;</span><br><span class="line">	&#125;a[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		a[cur].l = l, a[cur].r = r;</span><br><span class="line">		<span class="keyword">if</span> (l == r)&#123;a[cur].v = w[l]; <span class="keyword">return</span>;&#125; </span><br><span class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		build(cur &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">		build(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">		a[cur].v = max(a[cur &lt;&lt; <span class="number">1</span>].v, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!a[cur].lazy) <span class="keyword">return</span>;</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].lazy = max(a[cur &lt;&lt; <span class="number">1</span>].lazy, a[cur].lazy);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span>].Max = max(a[cur &lt;&lt; <span class="number">1</span>].Max, a[cur].lazy + a[cur &lt;&lt; <span class="number">1</span>].v);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy = max(a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy, a[cur].lazy);</span><br><span class="line">		a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max = max(a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max, a[cur].lazy + a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v);</span><br><span class="line">		a[cur].lazy = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r)&#123;</span><br><span class="line">			a[cur].Max = max(a[cur].Max, a[cur].v + k);</span><br><span class="line">			a[cur].lazy = max(a[cur].lazy, k);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pushdown(cur);</span><br><span class="line">		upd(cur &lt;&lt; <span class="number">1</span>, l, r, k);</span><br><span class="line">		upd(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, k);</span><br><span class="line">		a[cur].Max = max(a[cur &lt;&lt; <span class="number">1</span>].Max, a[cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].Max);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt; r || a[cur].r &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[cur].l &gt;= l &amp;&amp; a[cur].r &lt;= r) <span class="keyword">return</span> a[cur].Max;</span><br><span class="line">		pushdown(cur); <span class="keyword">return</span> max(Query(cur &lt;&lt; <span class="number">1</span>, l, r), Query(cur &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;t; <span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="keyword">while</span> (top &amp;&amp; w[s[top]] &lt; w[i]) p[s[top--]].push_back(i);</span><br><span class="line">		p[s[top]].push_back(i); s[++top] = i;</span><br><span class="line"> 	&#125; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line"> 	<span class="keyword">for</span> (<span class="keyword">int</span> l, r, i = <span class="number">1</span>; i &lt;= Q; i++)&#123;</span><br><span class="line"> 		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r); q[l].push_back(make_pair(r, i));</span><br><span class="line">	&#125; t.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p[i].size(); j++)&#123;</span><br><span class="line"><span class="comment">//			printf("%d: %d\n", i, p[i][j]);</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="number">2</span> * p[i][j] - i &lt;= n) t.upd(<span class="number">1</span>, <span class="number">2</span> * p[i][j] - i, n, w[i] + w[p[i][j]]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; q[i].size(); j++)</span><br><span class="line">			ans[q[i][j].second] = t.Query(<span class="number">1</span>, i, q[i][j].first);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JOI</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>状态缩减</tag>
        <tag>扫描线</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]LCA（ST表）</title>
    <url>/2019/11/14/%5B%E6%A8%A1%E6%9D%BF%5DLCA%EF%BC%88ST%E8%A1%A8%EF%BC%89/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>求静态区间最小值即可</p>
<p>常数有点大，不吸氧可能会T，不过是真好写</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>更新Min的时候还有一个区间是Min[i+(1&lt;&lt;j)][j-1]，不用+1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Min[maxn &lt;&lt; <span class="number">1</span>][<span class="number">25</span>], tdx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> link[maxn], dep[maxn], x[maxn &lt;&lt; <span class="number">1</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	Min[++tdx][<span class="number">0</span>] = dep[cur];</span><br><span class="line">	x[tdx][<span class="number">0</span>] = cur;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">			dfs(v, cur);</span><br><span class="line">			Min[++tdx][<span class="number">0</span>] = dep[cur];</span><br><span class="line">			x[tdx][<span class="number">0</span>] = cur;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	link[cur] = tdx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">24</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= tdx; i++)</span><br><span class="line">			<span class="keyword">if</span> (Min[i][j - <span class="number">1</span>] &lt; Min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]) x[i][j] = x[i][j - <span class="number">1</span>], Min[i][j] = Min[i][j - <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> x[i][j] = x[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>], Min[i][j] = Min[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = (<span class="keyword">int</span>)log2(r - l + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (Min[l][k] &lt; Min[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]) <span class="keyword">return</span> x[l][k];</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> x[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, Q, rt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;Q, &amp;rt);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(rt, <span class="number">0</span>);</span><br><span class="line">	ins();</span><br><span class="line"><span class="comment">//	for (int i = 1; i &lt;= tdx; i++) printf("%d ", Min[i][0]); puts("");</span></span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123;</span><br><span class="line">		<span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">if</span> (link[u] &gt; link[v]) swap(u, v);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Query(link[u], link[v]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]ST表</title>
    <url>/2019/11/14/%5B%E6%A8%A1%E6%9D%BF%5DST%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>如题</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>倍增求区间Max，查询的时候分为两段，保证覆盖即可，重叠无妨</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>无</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Max[maxn][<span class="number">21</span>], n, Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;Q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, Max[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) + i - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">			Max[i][j] = max(Max[i][j - <span class="number">1</span>], Max[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">while</span> (Q--)&#123; <span class="keyword">int</span> l, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">		<span class="keyword">int</span> k = (<span class="keyword">int</span>)log2(r - l + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(Max[l][k], Max[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>[Artical]NOIP2019考前总结</title>
    <url>/2019/11/14/%5BArtical%5DNoip2019%E8%80%83%E5%89%8D%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5c741beed7608de469a28f7c8ba0a47f120cfa9a9959f08679bb063d853a6ab3"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Artical</category>
      </categories>
      <tags>
        <tag>Artical</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP2016]天天爱跑步</title>
    <url>/2019/11/14/%5BNOIP2016%5D%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在树上有一些简单链，问每个点是多少条链的第\(w_j\)个点</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>把链分为上行的和下行的两条</p>
<p>在上行链上，造成贡献的必要条件是\(w_j+dep_j=dep_u\)，u为j子树中的点</p>
<p>在下行链上，造成贡献的必要条件是\(w_j-dep_j=l-dep_v\)，v为j子树中的点</p>
<p>dfs，顺便关于\(w_j+dep_j\)和\(w_j-dep[j]\)开桶统计即可</p>
<p>注意点1，当一条链两个端点的lca恰好在这条链有贡献，会被算两遍，要先减掉</p>
<p>注意点2，如果链的起点和终点都在子树中，lca以上就不能算贡献</p>
<p>因此，链的起点和终点的贡献要在lca处减掉</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>注意点1,2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">25</span>], dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	f[cur][<span class="number">0</span>] = fa; dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= dep[cur]; i++)</span><br><span class="line">		f[cur][i] = f[f[cur][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">		<span class="keyword">if</span> (e[i].to != fa) dfs1(e[i].to, cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (dep[v] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[u]) v = f[v][i];</span><br><span class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		<span class="keyword">if</span> (f[u][i] != f[v][i]) u = f[u][i], v = f[v][i];</span><br><span class="line">	<span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s[maxn], ds[maxn &lt;&lt; <span class="number">1</span>], dt[maxn &lt;&lt; <span class="number">2</span>], res[maxn];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; t[maxn], tt[maxn], ss[maxn]; <span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t1 = ds[w[cur] + dep[cur]], t2 = dt[w[cur] - dep[cur] + maxn];</span><br><span class="line">	ds[dep[cur]] += s[cur];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t[cur].size(); j++)</span><br><span class="line">		dt[t[cur][j] + maxn]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		dfs2(v, cur);</span><br><span class="line">	&#125;</span><br><span class="line">	res[cur] += ds[w[cur] + dep[cur]] - t1 + dt[w[cur] - dep[cur] + maxn] - t2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ss[cur].size(); j++)</span><br><span class="line">		ds[dep[ss[cur][j]]]--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tt[cur].size(); j++)</span><br><span class="line">		dt[tt[cur][j] + maxn]--;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125; dfs1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//	printf("%d\n", LCA(2, 5));</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, w + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v); <span class="keyword">int</span> lca = LCA(u, v);</span><br><span class="line">		s[u]++; <span class="keyword">if</span> (dep[lca] + w[lca] == dep[u]) res[lca]--; </span><br><span class="line">		ss[lca].push_back(u);</span><br><span class="line">		t[v].push_back(dep[u] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">		tt[lca].push_back(dep[u] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">	&#125; dfs2(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, res[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NOIP</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>差分</tag>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ781]天下大雨</title>
    <url>/2019/11/13/%5BSOJ718%5D%E5%A4%A9%E4%B8%8B%E5%A4%A7%E9%9B%A8/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="58d4ec37fa6997648339d7f4de89adcac204922a5ff8d9fd1e1e2a7dace263e5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>细节</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ684]降雨量</title>
    <url>/2019/11/13/%5BSOJ684%5D%E9%99%8D%E9%9B%A8%E9%87%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dd4545d98fd43c4d9a342a5cd2109bd6d1ec7b2ae6f91ed35e7c2ebf73aa0660"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>扫描线</tag>
        <tag>set</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ683]蜥蜴</title>
    <url>/2019/11/13/%5BSOJ683%5D%E8%9C%A5%E8%9C%B4/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9f6a1c6f404603baad97c867c5f394987065db76abfed47aa83e749eaf47382b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[AGC034E]Complete Compress</title>
    <url>/2019/11/12/%5BAGC034E%5DComplete%20Compress/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>树上有一些碎片，每次可以选择两个距离大于1的碎片在它们的最短路径上分别靠近一格，最终使得它们聚在任意一点</p>
<p>求最小的步数或告知不可能</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>对于一整棵树，如果根节点的所有子节点到它的距离和为偶数</p>
<p>且子树中到根距离和最大值不大于这棵整棵树到根的距离和的1/2，就是可行的</p>
<p><strong>注：等价于这个问题，有{\(a_i\)}，每次选择两个数各减去1，使最终和最小</strong></p>
<p><strong>如果\(2Max&gt;sum\)，最少距离和为\(2Max-sum\)，否则与原sum的奇偶性相同（0或1）</strong></p>
<p>因此每次要递归地尽量把到根距离和最大的子树的和变得最小</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>真的是做了整整一个晚上<del>机房好吵啊</del></p>
<p>用sdep[v]算到根的距离和没有考虑v是否也对距离和有贡献（s[v]==‘1’）<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], sz[maxn], sdep[maxn], sum; <span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	dep[cur] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">	sum += (dep[cur] - <span class="number">1</span>) * (s[cur] == <span class="string">'1'</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v != fa)&#123;</span><br><span class="line">			dfs1(v, cur);</span><br><span class="line">			sz[cur] += sz[v] + (s[v] == <span class="string">'1'</span>);</span><br><span class="line">			sdep[cur] += sdep[v] + sz[v] + (s[v] == <span class="string">'1'</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> link = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (sdep[v] + sz[v] + (s[v] == <span class="string">'1'</span>) &gt; sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>) || link == <span class="number">0</span>) link = v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (link == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	dfs2(link, cur); sdep[cur] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">		<span class="keyword">if</span> (e[i].to != fa) sdep[cur] += sdep[e[i].to] + sz[e[i].to] + (s[e[i].to] == <span class="string">'1'</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2l</span>l * (sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>)) &gt; sdep[cur]) sdep[cur] = <span class="number">2l</span>l * (sdep[link] + sz[link] + (s[link] == <span class="string">'1'</span>)) - sdep[cur];</span><br><span class="line">	<span class="keyword">else</span> sdep[cur] = sdep[cur] &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, ans = INF;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%s"</span>, &amp;n, s + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;u, &amp;v);</span><br><span class="line">		addedge(u, v); addedge(v, u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> rt = <span class="number">1</span>; rt &lt;= n; rt++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); <span class="built_in">memset</span>(sz, <span class="number">0</span>, <span class="keyword">sizeof</span> sz); sum = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(sdep, <span class="number">0</span>, <span class="keyword">sizeof</span> sdep);</span><br><span class="line">		dfs1(rt, <span class="number">0</span>); <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		dfs2(rt, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (sdep[rt] == <span class="number">0</span>) ans = min(ans, sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans == INF) ans = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Atcoder</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>树</tag>
        <tag>递归</tag>
        <tag>调试很久</tag>
      </tags>
  </entry>
  <entry>
    <title>[HNOI2012]矿场搭建</title>
    <url>/2019/11/12/%5BHNOI2012%5D%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在无向联通图中设置一些庇护所，使得任何1个点被删掉之后（同时在该地的庇护所也失效），所有点（包括删掉的这个点）都能到达至少一个庇护所</p>
<p>求最小的庇护所数及最优的方案数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>把所有的割点求出来，把这个图分为一些联通块</p>
<p>如果联通块里面割点个数为0，需要建两个，方案数为\(C_{cnt}^2\)</p>
<p>如果联通块里面割点个数为1，需要在除割点外建1个，方案数为\(cnt-1\)</p>
<p>如果联通块里面割点个数大于1，不论怎样都可以跑到其他联通块中，不用建</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>没写Case</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, _cnt, tdx;</span><br><span class="line"><span class="keyword">int</span> low[maxn], dfn[maxn];</span><br><span class="line"><span class="keyword">bool</span> cut[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	low[cur] = dfn[cur] = ++tdx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (dfn[v]) low[cur] = min(low[cur], dfn[v]);</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			Tarjan(v); low[cur] = min(low[cur], low[v]);</span><br><span class="line">			<span class="keyword">if</span> (low[v] &gt;= dfn[cur] &amp;&amp; cur != <span class="number">1</span>) cut[cur] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (cur == <span class="number">1</span>) ++_cnt;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cur == <span class="number">1</span>) cut[cur] = (_cnt &gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">LL ans; <span class="keyword">int</span> Min, c, t, Col, vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">	vis[cur] = Col;</span><br><span class="line">	++t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (!vis[v] &amp;&amp; !cut[v]) dfs(v, cur);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cut[v] &amp;&amp; vis[v] != Col) ++c, vis[v] = Col;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	<span class="keyword">while</span> (m != <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">0</span>; ans = <span class="number">1l</span>l, Min = <span class="number">0</span>; Col = <span class="number">0</span>; n = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(dfn, <span class="number">0</span>, <span class="keyword">sizeof</span> dfn); <span class="built_in">memset</span>(low, <span class="number">0</span>, <span class="keyword">sizeof</span> low); _cnt = <span class="number">0</span>; tdx = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(cut, <span class="number">0</span>, <span class="keyword">sizeof</span> cut); <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">			addedge(u, v);</span><br><span class="line">			addedge(v, u);</span><br><span class="line">			n = max(n, max(u, v));</span><br><span class="line">		&#125;</span><br><span class="line">		Tarjan(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (!cut[i] &amp;&amp; !vis[i])&#123;</span><br><span class="line">				c = <span class="number">0</span>; t = <span class="number">0</span>; ++Col;</span><br><span class="line">				dfs(i, <span class="number">0</span>);</span><br><span class="line">				<span class="keyword">if</span> (c == <span class="number">0</span>) ans *= <span class="number">1l</span>l * (t - <span class="number">1</span>) * t / <span class="number">2</span>, Min += <span class="number">2</span>;</span><br><span class="line">				<span class="keyword">if</span> (c == <span class="number">1</span>) ans *= t, Min++;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"Case %d: %d %lld\n"</span>, ++T, Min, ans);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HNOI</category>
      </categories>
      <tags>
        <tag>Tarjan</tag>
        <tag>割点</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ689]数字</title>
    <url>/2019/11/11/%5BSOJ689%5D%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="输入密钥以查看该文档" />
    <label for="hbePass">输入密钥以查看该文档</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="de9b2db085a7dc49b7147f1cba5ef9eeebf287d79bc0f4714761ab76b66f840b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
      </tags>
  </entry>
  <entry>
    <title>[APIO2009]采油区域</title>
    <url>/2019/11/11/%5BAPIO2009%5D%E9%87%87%E6%B2%B9%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<p>在nm的非负权值网格中放3个k*k的不重叠正方形，求3个正方形的权值和最大值</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p><del>题解里说，过一个疯一个呢，我看没有</del></p>
<p>在矩形里放3个一共有6种情况</p>
<p>处理出对于每个点而言左上左下右上右下的二维前缀和与k*k的正方形的权值和</p>
<p>转移显然</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>一发过去</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1505</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">LL s[maxn][maxn], a[<span class="number">4</span>][maxn][maxn], f[maxn][maxn], x[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, x[i] + j);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + x[i][j];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++)</span><br><span class="line">			f[i][j] = s[i][j] - s[i - k][j] - s[i][j - k] + s[i - k][j - k];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			a[<span class="number">0</span>][i][j] = max(max(a[<span class="number">0</span>][i - <span class="number">1</span>][j], a[<span class="number">0</span>][i][j - <span class="number">1</span>]), f[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			a[<span class="number">1</span>][i][j] = max(max(a[<span class="number">1</span>][i + <span class="number">1</span>][j], a[<span class="number">1</span>][i][j - <span class="number">1</span>]), f[i + k - <span class="number">1</span>][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">			a[<span class="number">2</span>][i][j] = max(max(a[<span class="number">2</span>][i - <span class="number">1</span>][j], a[<span class="number">2</span>][i][j + <span class="number">1</span>]), f[i][j + k - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">			a[<span class="number">3</span>][i][j] = max(max(a[<span class="number">3</span>][i + <span class="number">1</span>][j], a[<span class="number">3</span>][i][j + <span class="number">1</span>]), f[i + k - <span class="number">1</span>][j + k - <span class="number">1</span>]);</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i][j] + a[<span class="number">1</span>][i + <span class="number">1</span>][j] + a[<span class="number">2</span>][n][j + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][n][j] + a[<span class="number">2</span>][i][j + <span class="number">1</span>] + a[<span class="number">3</span>][i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">1</span>][i + <span class="number">1</span>][j] + a[<span class="number">3</span>][i + <span class="number">1</span>][j + <span class="number">1</span>] + a[<span class="number">0</span>][i][m]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i][j] + a[<span class="number">2</span>][i][j + <span class="number">1</span>] + a[<span class="number">3</span>][i + <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m - k + <span class="number">1</span>; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][n][j - k] + a[<span class="number">2</span>][n][j + <span class="number">1</span>] + f[i][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= n - k + <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &lt;= m; j++)</span><br><span class="line">			ans = max(ans, a[<span class="number">0</span>][i - k][m] + a[<span class="number">3</span>][i + <span class="number">1</span>][<span class="number">1</span>] + f[i][j]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>APIO</category>
      </categories>
      <tags>
        <tag>动态规划Dp</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>[Usage]1</title>
    <url>/2019/11/11/%5BUsage%5D1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>usage</category>
      </categories>
      <tags>
        <tag>usage</tag>
      </tags>
  </entry>
  <entry>
    <title>[SOJ692]medians</title>
    <url>/2019/11/10/%5BSOJ692%5Dmedians/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求所有奇数长区间的两端点的编号乘积再乘上中位数</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>中位数可以赋值1,-1来做</p>
<p>枚举中位数，求两侧前缀和相同的贡献和即可</p>
<p>注意到如果中位数相同，右端点相同，左边的贡献是可以直接加的</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>第j位的前缀和为b，它的贡献在第j+1位</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], b[maxn], cnt[<span class="number">2</span>][maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">LL ans = <span class="number">0</span>, tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		tmp = <span class="number">0</span>; <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == j) b[j] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a[j] &gt; a[i]) b[j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> b[j] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) b[j] += b[j - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) cnt[<span class="number">0</span>][b[j] + <span class="number">10000</span>] += (j + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">			tmp += <span class="number">1l</span>l * cnt[<span class="number">0</span>][b[j] + <span class="number">10000</span>] * j;</span><br><span class="line">		ans += <span class="number">1l</span>l * tmp * a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SOJ</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>[CTSC2008]祭祀</title>
    <url>/2019/11/08/%5BCTSC2008%5D%E7%A5%AD%E7%A5%80/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求有向图中最大的集合使得集合中的点两两不可到达</p>
<p>求集合的大小，输出1种可行的构造方案，并输出每个点能不能在点集中</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><a id="more"></a>
<p>第一问：由Diliworth定理，最长反链的长度=最小链覆盖的数量</p>
<p>本来是没有后两问的<del>哪个毒瘤写的spj</del></p>
<p>第二问：就是求二分图的最大独立集</p>
<p>第三问：把一个点以及和它相连的边和点都删掉，如果最小链覆盖-1，则可以</p>
<h3 id="关于第二问的构造方案"><a href="#关于第二问的构造方案" class="headerlink" title="关于第二问的构造方案"></a>关于第二问的构造方案</h3><p>首先不能直接选覆盖链的头或尾来构造，反例显然</p>
<p>这个问题等价于二分图的最大独立集的问题</p>
<p>最大独立集一定等于最小点覆盖的补集：1.它一定是最大的 2.该补集中一定没有连边，如果有的话不满足最小点覆盖</p>
<p>考虑如何求二分图的最小点覆盖：从左边的任何一个未匹配点开始，未匹配边-&gt;匹配边…，标记经过的所有点</p>
<p>左侧标记的点和右侧未标记的点就是最小点覆盖，如果i和i+n都在最大独立集里，就加入反链</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>不会构造方案<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f);</span><br><span class="line">	addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn], T;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">	q.push(<span class="number">0</span>); <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f &gt; <span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(e[i].to, min(Max - flow, e[i].f));</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	maxflow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(<span class="number">0</span>, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> link[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				link[i][j] |= (link[i][k] &amp; link[k][j]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) link[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (vis[cur]) <span class="keyword">return</span>;</span><br><span class="line">	vis[cur] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (cur &lt;= n)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (e[i].f == <span class="number">0</span> &amp;&amp; e[i].to != <span class="number">0</span>) dfs1(e[i].to);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cur &gt; n)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (e[i].f == <span class="number">0</span> &amp;&amp; e[i].to != T) dfs1(e[i].to);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">int</span> ex[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		link[u][v] = <span class="number">1</span>;</span><br><span class="line">	&#125; T = n &lt;&lt; <span class="number">1</span> | <span class="number">1</span>; Floyd();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(<span class="number">0</span>, i, <span class="number">1</span>), ex[i] = tot - <span class="number">1</span>, ins(i + n, T, <span class="number">1</span>), ex[i + n] = tot - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span> (link[i][j]) ins(i, j + n, <span class="number">1</span>);</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - maxflow);</span><br><span class="line">	<span class="keyword">int</span> tmp = n - maxflow;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (e[ex[i + n]].f != <span class="number">0</span>) dfs1(i + n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>, (!vis[i] &amp; vis[i + n]));</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">1</span>; p &lt;= n; p++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head); tot = <span class="number">1</span>; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (i != p &amp;&amp; !link[i][p] &amp;&amp; !link[p][i]) ins(<span class="number">0</span>, i, <span class="number">1</span>), ins(i + n, T, <span class="number">1</span>), ++cnt;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				<span class="keyword">if</span> (i != p &amp;&amp; j != p &amp;&amp; link[i][j]) ins(i, j + n, <span class="number">1</span>);</span><br><span class="line">		Dinic();</span><br><span class="line">		<span class="keyword">if</span> (cnt - maxflow == tmp - <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">'1'</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">'0'</span>);</span><br><span class="line">	&#125; <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTSC</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>调试很久</tag>
        <tag>二分图</tag>
        <tag>网络流</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]二分图最大匹配</title>
    <url>/2019/11/06/%5B%E6%A8%A1%E6%9D%BF%5D%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求二分图最大匹配</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>能协商就协商</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>每次bfs前要清空vis</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u];</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]; <span class="keyword">int</span> match[maxn][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">int</span> v = e[i].to;</span><br><span class="line">		<span class="keyword">if</span> (!vis[v])&#123;</span><br><span class="line">			vis[v] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (!match[v][<span class="number">1</span>] || bfs(match[v][<span class="number">1</span>]))&#123;</span><br><span class="line">				match[v][<span class="number">1</span>] = cur;</span><br><span class="line">				match[cur][<span class="number">0</span>] = v;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, i = <span class="number">1</span>; i &lt;= q; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">		<span class="keyword">if</span> (u &gt; n || v &gt; m) <span class="keyword">continue</span>;</span><br><span class="line">		addedge(u, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (!match[i][<span class="number">0</span>])&#123;</span><br><span class="line">			<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">			ans += bfs(i);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>[POJ1149]pigs</title>
    <url>/2019/07/15/%5BPOJ1149%5Dpigs/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n$个猪圈，有$m$个顾客会依次前来购买至多$M_i$只猪</p>
<p>每次顾客会打开$k$个猪圈，只有猪圈被打开的之后，被关上之前可以任意调换，最大化卖猪的数量</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>每次顾客来卖猪的时候视为先把所有的指定猪圈里的猪<strong>寄存</strong>到顾客手上</p>
<p>之后再去那些猪圈买猪的时候直接从顾客手里买</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>bfs的时候只扩展e[i].f&gt;0的边</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f); addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, keep[maxn], dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i != <span class="number">-1</span>; i = e[i].nxt)</span><br><span class="line">			<span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f)&#123;</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[n + m + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == n + m + <span class="number">1</span>) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i != <span class="number">-1</span>; i = e[i].nxt)&#123;</span><br><span class="line">		<span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f)&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">int</span> flow = dfs(e[i].to, min(Max - flow, e[i].f)))&#123;</span><br><span class="line">				e[i].f -= flow;</span><br><span class="line">				e[i ^ <span class="number">1</span>].f += flow;</span><br><span class="line">				<span class="keyword">return</span> flow;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())&#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">int</span> tmp = dfs(<span class="number">0</span>, INF)) maxflow += tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> f, i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f);</span><br><span class="line">		ins(<span class="number">0</span>, i, f);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> k, M; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a, j = <span class="number">1</span>; j &lt;= k; j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</span><br><span class="line">			<span class="keyword">if</span> (keep[a] == <span class="number">0</span>) ins(a, i + n, INF);</span><br><span class="line">			<span class="keyword">else</span> ins(keep[a], i + n, INF);</span><br><span class="line">			keep[a] = i + n;</span><br><span class="line">		&#125; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;M);</span><br><span class="line">		ins(i + n, n + m + <span class="number">1</span>, M);</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxflow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[模板]网络最大流（Dinic）</title>
    <url>/2019/07/14/%5B%E6%A8%A1%E6%9D%BF%5D%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81%EF%BC%88Dinic%EF%BC%89/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>求网络最大流</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>Dinic</p>
<h3 id="调试记录"><a href="#调试记录" class="headerlink" title="调试记录"></a>调试记录</h3><p>Max要减去flow，不然反例如下：</p>
<p><img src="https://i.loli.net/2020/01/30/fiJs8PEYlUcImOv.jpg" alt=""></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to, nxt, f;</span><br><span class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	e[++tot].to = v, e[tot].nxt = head[u], e[tot].f = f;</span><br><span class="line">	head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">	addedge(u, v, f);</span><br><span class="line">	addedge(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], now[maxn]; <span class="keyword">int</span> n, m, S, T;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q; <span class="keyword">while</span> (!q.empty()) q.pop();</span><br><span class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep); dep[S] = <span class="number">1</span>; q.push(S);</span><br><span class="line">	<span class="built_in">memcpy</span>(now, head, <span class="keyword">sizeof</span> now);</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = q.front(); q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">			<span class="keyword">if</span> (!dep[e[i].to] &amp;&amp; e[i].f)&#123;</span><br><span class="line">				q.push(e[i].to);</span><br><span class="line">				dep[e[i].to] = dep[cur] + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[T];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cur == T) <span class="keyword">return</span> Max;</span><br><span class="line">	<span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = now[cur]; i; i = e[i].nxt)&#123;</span><br><span class="line">		now[cur] = i;</span><br><span class="line">		<span class="keyword">if</span> (flow == Max) <span class="keyword">return</span> flow;</span><br><span class="line">		<span class="keyword">if</span> (dep[e[i].to] == dep[cur] + <span class="number">1</span> &amp;&amp; e[i].f)&#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = dfs(e[i].to, min(Max - flow, e[i].f));</span><br><span class="line">			e[i].f -= tmp;</span><br><span class="line">			e[i ^ <span class="number">1</span>].f += tmp;</span><br><span class="line">			flow += tmp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxflow = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (bfs())</span><br><span class="line">		maxflow += dfs(S, INF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;S, &amp;T);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> u, v, f, i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;f);</span><br><span class="line">		ins(u, v, f);</span><br><span class="line">	&#125;</span><br><span class="line">	Dinic();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxflow);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>网络流</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
</search>
